--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_lpm_compare 2015:04:22:18:04:07:SJ cbx_lpm_decode 2015:04:22:18:04:08:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1005w[3..0]	: WIRE;
	w_anode1015w[3..0]	: WIRE;
	w_anode1025w[3..0]	: WIRE;
	w_anode849w[1..0]	: WIRE;
	w_anode858w[3..0]	: WIRE;
	w_anode875w[3..0]	: WIRE;
	w_anode885w[3..0]	: WIRE;
	w_anode895w[3..0]	: WIRE;
	w_anode905w[3..0]	: WIRE;
	w_anode915w[3..0]	: WIRE;
	w_anode925w[3..0]	: WIRE;
	w_anode935w[3..0]	: WIRE;
	w_anode947w[1..0]	: WIRE;
	w_anode954w[3..0]	: WIRE;
	w_anode965w[3..0]	: WIRE;
	w_anode975w[3..0]	: WIRE;
	w_anode985w[3..0]	: WIRE;
	w_anode995w[3..0]	: WIRE;
	w_data847w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1025w[3..3], w_anode1015w[3..3], w_anode1005w[3..3], w_anode995w[3..3], w_anode985w[3..3], w_anode975w[3..3], w_anode965w[3..3], w_anode954w[3..3]), ( w_anode935w[3..3], w_anode925w[3..3], w_anode915w[3..3], w_anode905w[3..3], w_anode895w[3..3], w_anode885w[3..3], w_anode875w[3..3], w_anode858w[3..3]));
	w_anode1005w[] = ( (w_anode1005w[2..2] & w_data847w[2..2]), (w_anode1005w[1..1] & (! w_data847w[1..1])), (w_anode1005w[0..0] & w_data847w[0..0]), w_anode947w[1..1]);
	w_anode1015w[] = ( (w_anode1015w[2..2] & w_data847w[2..2]), (w_anode1015w[1..1] & w_data847w[1..1]), (w_anode1015w[0..0] & (! w_data847w[0..0])), w_anode947w[1..1]);
	w_anode1025w[] = ( (w_anode1025w[2..2] & w_data847w[2..2]), (w_anode1025w[1..1] & w_data847w[1..1]), (w_anode1025w[0..0] & w_data847w[0..0]), w_anode947w[1..1]);
	w_anode849w[] = ( (w_anode849w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode858w[] = ( (w_anode858w[2..2] & (! w_data847w[2..2])), (w_anode858w[1..1] & (! w_data847w[1..1])), (w_anode858w[0..0] & (! w_data847w[0..0])), w_anode849w[1..1]);
	w_anode875w[] = ( (w_anode875w[2..2] & (! w_data847w[2..2])), (w_anode875w[1..1] & (! w_data847w[1..1])), (w_anode875w[0..0] & w_data847w[0..0]), w_anode849w[1..1]);
	w_anode885w[] = ( (w_anode885w[2..2] & (! w_data847w[2..2])), (w_anode885w[1..1] & w_data847w[1..1]), (w_anode885w[0..0] & (! w_data847w[0..0])), w_anode849w[1..1]);
	w_anode895w[] = ( (w_anode895w[2..2] & (! w_data847w[2..2])), (w_anode895w[1..1] & w_data847w[1..1]), (w_anode895w[0..0] & w_data847w[0..0]), w_anode849w[1..1]);
	w_anode905w[] = ( (w_anode905w[2..2] & w_data847w[2..2]), (w_anode905w[1..1] & (! w_data847w[1..1])), (w_anode905w[0..0] & (! w_data847w[0..0])), w_anode849w[1..1]);
	w_anode915w[] = ( (w_anode915w[2..2] & w_data847w[2..2]), (w_anode915w[1..1] & (! w_data847w[1..1])), (w_anode915w[0..0] & w_data847w[0..0]), w_anode849w[1..1]);
	w_anode925w[] = ( (w_anode925w[2..2] & w_data847w[2..2]), (w_anode925w[1..1] & w_data847w[1..1]), (w_anode925w[0..0] & (! w_data847w[0..0])), w_anode849w[1..1]);
	w_anode935w[] = ( (w_anode935w[2..2] & w_data847w[2..2]), (w_anode935w[1..1] & w_data847w[1..1]), (w_anode935w[0..0] & w_data847w[0..0]), w_anode849w[1..1]);
	w_anode947w[] = ( (w_anode947w[0..0] & data_wire[3..3]), enable_wire);
	w_anode954w[] = ( (w_anode954w[2..2] & (! w_data847w[2..2])), (w_anode954w[1..1] & (! w_data847w[1..1])), (w_anode954w[0..0] & (! w_data847w[0..0])), w_anode947w[1..1]);
	w_anode965w[] = ( (w_anode965w[2..2] & (! w_data847w[2..2])), (w_anode965w[1..1] & (! w_data847w[1..1])), (w_anode965w[0..0] & w_data847w[0..0]), w_anode947w[1..1]);
	w_anode975w[] = ( (w_anode975w[2..2] & (! w_data847w[2..2])), (w_anode975w[1..1] & w_data847w[1..1]), (w_anode975w[0..0] & (! w_data847w[0..0])), w_anode947w[1..1]);
	w_anode985w[] = ( (w_anode985w[2..2] & (! w_data847w[2..2])), (w_anode985w[1..1] & w_data847w[1..1]), (w_anode985w[0..0] & w_data847w[0..0]), w_anode947w[1..1]);
	w_anode995w[] = ( (w_anode995w[2..2] & w_data847w[2..2]), (w_anode995w[1..1] & (! w_data847w[1..1])), (w_anode995w[0..0] & (! w_data847w[0..0])), w_anode947w[1..1]);
	w_data847w[2..0] = data_wire[2..0];
END;
--VALID FILE
