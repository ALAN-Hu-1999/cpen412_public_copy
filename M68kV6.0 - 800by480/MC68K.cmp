-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II 64-Bit Version 13.0 (Build Build 156 04/24/2013)
-- Created on Sun Jun 23 17:01:49 2013

COMPONENT MC68K
	PORT
	(
		InPortA		:	 IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		InPortB		:	 IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		RS232_RxData		:	 IN STD_LOGIC;
		InPortC		:	 IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		CLK_50Mhz		:	 IN STD_LOGIC;
		RESET_Key0_L		:	 IN STD_LOGIC;
		Trace_Request_Key3_L		:	 IN STD_LOGIC;
		Bus_Request_SW8_H		:	 IN STD_LOGIC;
		IRQ4_Key1_L		:	 IN STD_LOGIC;
		InPortE		:	 IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		IRQ2_Key2_L		:	 IN STD_LOGIC;
		CPUClock		:	 OUT STD_LOGIC;
		sdram_cke		:	 OUT STD_LOGIC;
		sdram_cs_n		:	 OUT STD_LOGIC;
		sdram_ras_n		:	 OUT STD_LOGIC;
		sdram_cas_n		:	 OUT STD_LOGIC;
		sdram_we_n		:	 OUT STD_LOGIC;
		sdram_a		:	 OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
		sdram_ba		:	 OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		HexDisplay3		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HexDisplay2		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HexDisplay1		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HexDisplay0		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		RomSelect_H		:	 OUT STD_LOGIC;
		UDS_L		:	 OUT STD_LOGIC;
		LDS_L		:	 OUT STD_LOGIC;
		Dtack_L		:	 OUT STD_LOGIC;
		sdram_clock		:	 OUT STD_LOGIC;
		LCDDataOut		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		LCD_RW		:	 OUT STD_LOGIC;
		CPU_RW		:	 OUT STD_LOGIC;
		LCD_E		:	 OUT STD_LOGIC;
		LCD_RS		:	 OUT STD_LOGIC;
		horiz_sync_out		:	 OUT STD_LOGIC;
		vert_sync_out		:	 OUT STD_LOGIC;
		SRamAddress		:	 OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		SRam_OE_L		:	 OUT STD_LOGIC;
		SRam_CE_L		:	 OUT STD_LOGIC;
		SRam_WE_L		:	 OUT STD_LOGIC;
		SRam_LB_L		:	 OUT STD_LOGIC;
		SRam_UB_L		:	 OUT STD_LOGIC;
		sdram_dqm		:	 OUT STD_LOGIC_VECTOR(0] DOWNTO dram_dqm[0]);
		sdram_dqm		:	 OUT STD_LOGIC_VECTOR(1] DOWNTO dram_dqm[1]);
		ResetOut		:	 OUT STD_LOGIC;
		DramDtack_L		:	 OUT STD_LOGIC;
		FlashAddress		:	 OUT STD_LOGIC_VECTOR(21 DOWNTO 0);
		FlashOE_L		:	 OUT STD_LOGIC;
		FlashWE_L		:	 OUT STD_LOGIC;
		FlashReset_L		:	 OUT STD_LOGIC;
		FlashCE_L		:	 OUT STD_LOGIC;
		DramSelect_H		:	 OUT STD_LOGIC;
		RS232_TxData		:	 OUT STD_LOGIC;
		AS_L		:	 OUT STD_LOGIC;
		VideoRamSelect_H		:	 OUT STD_LOGIC;
		OnChipRamSelect_H		:	 OUT STD_LOGIC;
		BG_L		:	 OUT STD_LOGIC;
		HexDisplay7		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HexDisplay6		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HexDisplay5		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HexDisplay4		:	 OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		LCD_Contrast_DE1		:	 OUT STD_LOGIC;
		LCD_BLON_DE2		:	 OUT STD_LOGIC;
		LCD_ON_DE2		:	 OUT STD_LOGIC;
		Address_OUT		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		UDS_OUT_L		:	 OUT STD_LOGIC;
		LDS_OUT_L		:	 OUT STD_LOGIC;
		RW_OUT		:	 OUT STD_LOGIC;
		AS_OUT_L		:	 OUT STD_LOGIC;
		BR_L		:	 OUT STD_LOGIC;
		BGACK_L		:	 OUT STD_LOGIC;
		VideoDac_Sync_L		:	 OUT STD_LOGIC;
		VideoDac_Clock		:	 OUT STD_LOGIC;
		VideoDAC_Blank_L		:	 OUT STD_LOGIC;
		DMA_DataOut		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		RedOut		:	 OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		GreenOut		:	 OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		BlueOut		:	 OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		RedLEDSA		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		RedLEDSB		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		RedLEDSC		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		GreenLEDS		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		OutPortE		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		sdram_dq		:	 INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		SRam_Data		:	 INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		FlashData		:	 INOUT STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;