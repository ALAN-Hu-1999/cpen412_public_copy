680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 07 Apr 2022      Time: 22:11:53          Source: C:\M68KV6.0 - 800BY480\ASSIGNMENT6\PARTB_PROJ\PARTB_ISR.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  128A      
0800000A  203C 0000   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  0030      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  127E      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  1282      
0800002C  23FC 0800   40                   move.l    #heap,__heap           pointer to free memory
08000030  12BA 0800 
08000034  1286      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  0274      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\M68KV6.0 - 800BY480\ASSIGNMENT6\PARTB_ISR_PROJ\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdio.h>
                      46   ; #include <string.h>
                      47   ; #include <ctype.h>
                      48   ; //IMPORTANT
                      49   ; //
                      50   ; // Uncomment one of the two #defines below
                      51   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                      52   ; // 0B000000 for running programs from dram
                      53   ; //
                      54   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      55   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      56   ; // building
                      57   ; //
                      58   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      59   ; // is based around Dram so #define accordingly before building
                      60   ; //#define StartOfExceptionVectorTable 0x08030000
                      61   ; #define StartOfExceptionVectorTable 0x0B000000
                      62   ; /**********************************************************************************************
                      63   ; **	Parallel port addresses
                      64   ; **********************************************************************************************/
                      65   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      66   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      67   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      68   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      69   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      70   ; /*********************************************************************************************
                      71   ; **	Hex 7 seg displays port addresses
                      72   ; *********************************************************************************************/
                      73   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      74   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      75   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      76   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      77   ; /**********************************************************************************************
                      78   ; **	LCD display port addresses
                      79   ; **********************************************************************************************/
                      80   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      81   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      82   ; /********************************************************************************************
                      83   ; **	Timer Port addresses
                      84   ; *********************************************************************************************/
                      85   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      86   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      87   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      88   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      89   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      90   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      91   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      92   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      93   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      94   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      95   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      96   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      97   ; /*********************************************************************************************
                      98   ; **	RS232 port addresses
                      99   ; *********************************************************************************************/
                     100   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     101   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     102   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     103   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     104   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     105   ; /*********************************************************************************************
                     106   ; **	PIA 1 and 2 port addresses
                     107   ; *********************************************************************************************/
                     108   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     109   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     110   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     111   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     112   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     113   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     114   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     115   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     116   ; /*********************************************************************************************************************************
                     117   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     118   ; (( it's a limitation of the compiler
                     119   ; (( YOU HAVE BEEN WARNED
                     120   ; *********************************************************************************************************************************/
                     121   ; unsigned int i, x, y, z, PortA_Count;
                     122   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count;
                     123   ; unsigned int IRQ1, IRQ2, IRQ3, IRQ4;
                     124   ; unsigned int IRQ4_COUNT;
                     125   ; /*******************************************************************************************
                     126   ; ** Function Prototypes
                     127   ; *******************************************************************************************/
                     128   ; void Wait1ms(void);
                     129   ; void Wait3ms(void);
                     130   ; void Init_LCD(void) ;
                     131   ; void LCDOutchar(int c);
                     132   ; void LCDOutMess(char *theMessage);
                     133   ; void LCDClearln(void);
                     134   ; void LCDline1Message(char *theMessage);
                     135   ; void LCDline2Message(char *theMessage);
                     136   ; int sprintf(char *out, const char *format, ...) ;
                     137   ; void InitI2C(void);
                     138   ; unsigned char I2C_ReadADCChannel(unsigned char adc_channel, unsigned char * adc_val);
                     139   ; /*****************************************************************************************
                     140   ; **	Interrupt service routine for Timers
                     141   ; **
                     142   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     143   ; **  out which timer is producing the interrupt
                     144   ; **
                     145   ; *****************************************************************************************/
                     146   ; void Timer_ISR()
                     147   ; {
                     148   _Timer_ISR:
                     149   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
0800003E  1039 0040  150          move.b    4194354,D0
08000042  0032      
08000044  0C00 0001  151          cmp.b     #1,D0
08000048  6612       152          bne.s     Timer_ISR_1
                     153   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800004A  13FC 0003  154          move.b    #3,4194354
0800004E  0040 0032 
                     155   ; IRQ1 = 1;
08000052  23FC 0000  156          move.l    #1,_IRQ1.L
08000056  0001 0800 
0800005A  12A6      
                     157   Timer_ISR_1:
                     158   ; }
                     159   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
0800005C  1039 0040  160          move.b    4194358,D0
08000060  0036      
08000062  0C00 0001  161          cmp.b     #1,D0
08000066  6618       162          bne.s     Timer_ISR_3
                     163   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000068  13FC 0003  164          move.b    #3,4194358
0800006C  0040 0036 
                     165   ; IRQ2 = 1;
08000070  23FC 0000  166          move.l    #1,_IRQ2.L
08000074  0001 0800 
08000078  12AA      
                     167   ; IRQ4_COUNT++;
0800007A  52B9 0800  168          addq.l    #1,_IRQ4_COUNT.L
0800007E  12B6      
                     169   Timer_ISR_3:
                     170   ; }
                     171   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
08000080  1039 0040  172          move.b    4194362,D0
08000084  003A      
08000086  0C00 0001  173          cmp.b     #1,D0
0800008A  6612       174          bne.s     Timer_ISR_5
                     175   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800008C  13FC 0003  176          move.b    #3,4194362
08000090  0040 003A 
                     177   ; IRQ3 = 1;
08000094  23FC 0000  178          move.l    #1,_IRQ3.L
08000098  0001 0800 
0800009C  12AE      
                     179   Timer_ISR_5:
                     180   ; }
                     181   ; if(IRQ4_COUNT % 10 == 0)
0800009E  2F39 0800  182          move.l    _IRQ4_COUNT.L,-(A7)
080000A2  12B6      
080000A4  4878 000A  183          pea       10
080000A8  4EB9 0800  184          jsr       ULDIV
080000AC  0674      
080000AE  202F 0004  185          move.l    4(A7),D0
080000B2  504F       186          addq.w    #8,A7
080000B4  4A80       187          tst.l     D0
080000B6  660A       188          bne.s     Timer_ISR_7
                     189   ; IRQ4 = 1;
080000B8  23FC 0000  190          move.l    #1,_IRQ4.L
080000BC  0001 0800 
080000C0  12B2      
                     191   Timer_ISR_7:
080000C2  4E75       192          rts
                     193   ; }
                     194   ; /*****************************************************************************************
                     195   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     196   ; **  Add your code here to poll Status register and clear interrupt
                     197   ; *****************************************************************************************/
                     198   ; void ACIA_ISR()
                     199   ; {}
                     200   _ACIA_ISR:
080000C4  4E75       201          rts
                     202   ; /***************************************************************************************
                     203   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     204   ; **  Add your code here to poll Status register and clear interrupt
                     205   ; *****************************************************************************************/
                     206   ; void PIA_ISR()
                     207   ; {}
                     208   _PIA_ISR:
080000C6  4E75       209          rts
                     210   ; /***********************************************************************************
                     211   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     212   ; ************************************************************************************/
                     213   ; void Key2PressISR()
                     214   ; {}
                     215   _Key2PressISR:
080000C8  4E75       216          rts
                     217   ; /***********************************************************************************
                     218   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     219   ; ************************************************************************************/
                     220   ; void Key1PressISR()
                     221   ; {}
                     222   _Key1PressISR:
080000CA  4E75       223          rts
                     224   ; /************************************************************************************
                     225   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     226   ; ************************************************************************************/
                     227   ; void Wait1ms(void)
                     228   ; {
                     229   _Wait1ms:
080000CC  2F02       230          move.l    D2,-(A7)
                     231   ; int  i ;
                     232   ; for(i = 0; i < 1000; i ++)
080000CE  4282       233          clr.l     D2
                     234   Wait1ms_1:
080000D0  0C82 0000  235          cmp.l     #1000,D2
080000D4  03E8      
080000D6  6C04       236          bge.s     Wait1ms_3
080000D8  5282       237          addq.l    #1,D2
080000DA  60F4       238          bra       Wait1ms_1
                     239   Wait1ms_3:
080000DC  241F       240          move.l    (A7)+,D2
080000DE  4E75       241          rts
                     242   ; ;
                     243   ; }
                     244   ; /************************************************************************************
                     245   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     246   ; **************************************************************************************/
                     247   ; void Wait3ms(void)
                     248   ; {
                     249   _Wait3ms:
080000E0  2F02       250          move.l    D2,-(A7)
                     251   ; int i ;
                     252   ; for(i = 0; i < 3; i++)
080000E2  4282       253          clr.l     D2
                     254   Wait3ms_1:
080000E4  0C82 0000  255          cmp.l     #3,D2
080000E8  0003      
080000EA  6C0A       256          bge.s     Wait3ms_3
                     257   ; Wait1ms() ;
080000EC  4EB9 0800  258          jsr       _Wait1ms
080000F0  00CC      
080000F2  5282       259          addq.l    #1,D2
080000F4  60EE       260          bra       Wait3ms_1
                     261   Wait3ms_3:
080000F6  241F       262          move.l    (A7)+,D2
080000F8  4E75       263          rts
                     264   ; }
                     265   ; /*********************************************************************************************
                     266   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     267   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     268   ; *********************************************************************************************/
                     269   ; void Init_LCD(void)
                     270   ; {
                     271   _Init_LCD:
                     272   ; LCDcommand = 0x0c ;
080000FA  13FC 000C  273          move.b    #12,4194336
080000FE  0040 0020 
                     274   ; Wait3ms() ;
08000102  4EB9 0800  275          jsr       _Wait3ms
08000106  00E0      
                     276   ; LCDcommand = 0x38 ;
08000108  13FC 0038  277          move.b    #56,4194336
0800010C  0040 0020 
                     278   ; Wait3ms() ;
08000110  4EB9 0800  279          jsr       _Wait3ms
08000114  00E0      
08000116  4E75       280          rts
                     281   ; }
                     282   ; /*********************************************************************************************
                     283   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     284   ; *********************************************************************************************/
                     285   ; void Init_RS232(void)
                     286   ; {
                     287   _Init_RS232:
                     288   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
08000118  13FC 0015  289          move.b    #21,4194368
0800011C  0040 0040 
                     290   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000120  13FC 0001  291          move.b    #1,4194372
08000124  0040 0044 
08000128  4E75       292          rts
                     293   ; }
                     294   ; /*********************************************************************************************************
                     295   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     296   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     297   ; **  to allow the board to communicate with HyperTerminal Program
                     298   ; **
                     299   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     300   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     301   ; **  call _putch() also
                     302   ; *********************************************************************************************************/
                     303   ; int _putch( int c)
                     304   ; {
                     305   __putch:
0800012A  4E56 0000  306          link      A6,#0
                     307   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     308   _putch_1:
0800012E  1039 0040  309          move.b    4194368,D0
08000132  0040      
08000134  C03C 0002  310          and.b     #2,D0
08000138  0C00 0002  311          cmp.b     #2,D0
0800013C  6702       312          beq.s     _putch_3
0800013E  60EE       313          bra       _putch_1
                     314   _putch_3:
                     315   ; ;
                     316   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000140  202E 0008  317          move.l    8(A6),D0
08000144  C0BC 0000  318          and.l     #127,D0
08000148  007F      
0800014A  13C0 0040  319          move.b    D0,4194370
0800014E  0042      
                     320   ; return c ;                                              // putchar() expects the character to be returned
08000150  202E 0008  321          move.l    8(A6),D0
08000154  4E5E       322          unlk      A6
08000156  4E75       323          rts
                     324   ; }
                     325   ; /*********************************************************************************************************
                     326   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     327   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     328   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     329   ; **
                     330   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     331   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     332   ; **  call _getch() also
                     333   ; *********************************************************************************************************/
                     334   ; int _getch( void )
                     335   ; {
                     336   __getch:
08000158  4E56 FFFC  337          link      A6,#-4
                     338   ; char c ;
                     339   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     340   _getch_1:
0800015C  1039 0040  341          move.b    4194368,D0
08000160  0040      
08000162  C03C 0001  342          and.b     #1,D0
08000166  0C00 0001  343          cmp.b     #1,D0
0800016A  6702       344          beq.s     _getch_3
0800016C  60EE       345          bra       _getch_1
                     346   _getch_3:
                     347   ; ;
                     348   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
0800016E  1039 0040  349          move.b    4194370,D0
08000172  0042      
08000174  C0BC 0000  350          and.l     #255,D0
08000178  00FF      
0800017A  C0BC 0000  351          and.l     #127,D0
0800017E  007F      
08000180  4E5E       352          unlk      A6
08000182  4E75       353          rts
                     354   ; }
                     355   ; /******************************************************************************
                     356   ; **  Subroutine to output a single character to the 2 row LCD display
                     357   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     358   ; **  current cursor position
                     359   ; *******************************************************************************/
                     360   ; void LCDOutchar(int c)
                     361   ; {
                     362   _LCDOutchar:
08000184  4E56 0000  363          link      A6,#0
                     364   ; LCDdata = (char)(c);
08000188  202E 0008  365          move.l    8(A6),D0
0800018C  13C0 0040  366          move.b    D0,4194338
08000190  0022      
                     367   ; Wait1ms() ;
08000192  4EB9 0800  368          jsr       _Wait1ms
08000196  00CC      
08000198  4E5E       369          unlk      A6
0800019A  4E75       370          rts
                     371   ; }
                     372   ; /**********************************************************************************
                     373   ; *subroutine to output a message at the current cursor position of the LCD display
                     374   ; ************************************************************************************/
                     375   ; void LCDOutMessage(char *theMessage)
                     376   ; {
                     377   _LCDOutMessage:
0800019C  4E56 FFFC  378          link      A6,#-4
                     379   ; char c ;
                     380   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     381   LCDOutMessage_1:
080001A0  206E 0008  382          move.l    8(A6),A0
080001A4  52AE 0008  383          addq.l    #1,8(A6)
080001A8  1D50 FFFF  384          move.b    (A0),-1(A6)
080001AC  1010       385          move.b    (A0),D0
080001AE  6714       386          beq.s     LCDOutMessage_3
                     387   ; LCDOutchar(c) ;
080001B0  122E FFFF  388          move.b    -1(A6),D1
080001B4  4881       389          ext.w     D1
080001B6  48C1       390          ext.l     D1
080001B8  2F01       391          move.l    D1,-(A7)
080001BA  4EB9 0800  392          jsr       _LCDOutchar
080001BE  0184      
080001C0  584F       393          addq.w    #4,A7
080001C2  60DC       394          bra       LCDOutMessage_1
                     395   LCDOutMessage_3:
080001C4  4E5E       396          unlk      A6
080001C6  4E75       397          rts
                     398   ; }
                     399   ; /******************************************************************************
                     400   ; *subroutine to clear the line by issuing 24 space characters
                     401   ; *******************************************************************************/
                     402   ; void LCDClearln(void)
                     403   ; {
                     404   _LCDClearln:
080001C8  2F02       405          move.l    D2,-(A7)
                     406   ; int i ;
                     407   ; for(i = 0; i < 24; i ++)
080001CA  4282       408          clr.l     D2
                     409   LCDClearln_1:
080001CC  0C82 0000  410          cmp.l     #24,D2
080001D0  0018      
080001D2  6C10       411          bge.s     LCDClearln_3
                     412   ; LCDOutchar(' ') ;       // write a space char to the LCD display
080001D4  4878 0020  413          pea       32
080001D8  4EB9 0800  414          jsr       _LCDOutchar
080001DC  0184      
080001DE  584F       415          addq.w    #4,A7
080001E0  5282       416          addq.l    #1,D2
080001E2  60E8       417          bra       LCDClearln_1
                     418   LCDClearln_3:
080001E4  241F       419          move.l    (A7)+,D2
080001E6  4E75       420          rts
                     421   ; }
                     422   ; /******************************************************************************
                     423   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     424   ; *******************************************************************************/
                     425   ; void LCDLine1Message(char *theMessage)
                     426   ; {
                     427   _LCDLine1Message:
080001E8  4E56 0000  428          link      A6,#0
                     429   ; LCDcommand = 0x80 ;
080001EC  13FC 0080  430          move.b    #128,4194336
080001F0  0040 0020 
                     431   ; Wait3ms();
080001F4  4EB9 0800  432          jsr       _Wait3ms
080001F8  00E0      
                     433   ; LCDClearln() ;
080001FA  4EB9 0800  434          jsr       _LCDClearln
080001FE  01C8      
                     435   ; LCDcommand = 0x80 ;
08000200  13FC 0080  436          move.b    #128,4194336
08000204  0040 0020 
                     437   ; Wait3ms() ;
08000208  4EB9 0800  438          jsr       _Wait3ms
0800020C  00E0      
                     439   ; LCDOutMessage(theMessage) ;
0800020E  2F2E 0008  440          move.l    8(A6),-(A7)
08000212  4EB9 0800  441          jsr       _LCDOutMessage
08000216  019C      
08000218  584F       442          addq.w    #4,A7
0800021A  4E5E       443          unlk      A6
0800021C  4E75       444          rts
                     445   ; }
                     446   ; /******************************************************************************
                     447   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     448   ; *******************************************************************************/
                     449   ; void LCDLine2Message(char *theMessage)
                     450   ; {
                     451   _LCDLine2Message:
0800021E  4E56 0000  452          link      A6,#0
                     453   ; LCDcommand = 0xC0 ;
08000222  13FC 00C0  454          move.b    #192,4194336
08000226  0040 0020 
                     455   ; Wait3ms();
0800022A  4EB9 0800  456          jsr       _Wait3ms
0800022E  00E0      
                     457   ; LCDClearln() ;
08000230  4EB9 0800  458          jsr       _LCDClearln
08000234  01C8      
                     459   ; LCDcommand = 0xC0 ;
08000236  13FC 00C0  460          move.b    #192,4194336
0800023A  0040 0020 
                     461   ; Wait3ms() ;
0800023E  4EB9 0800  462          jsr       _Wait3ms
08000242  00E0      
                     463   ; LCDOutMessage(theMessage) ;
08000244  2F2E 0008  464          move.l    8(A6),-(A7)
08000248  4EB9 0800  465          jsr       _LCDOutMessage
0800024C  019C      
0800024E  584F       466          addq.w    #4,A7
08000250  4E5E       467          unlk      A6
08000252  4E75       468          rts
                     469   ; }
                     470   ; /*********************************************************************************************************************************
                     471   ; **  IMPORTANT FUNCTION
                     472   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                     473   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                     474   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                     475   ; **  Calling this function allows you to deal with Interrupts for example
                     476   ; ***********************************************************************************************************************************/
                     477   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     478   ; {
                     479   _InstallExceptionHandler:
08000254  4E56 FFFC  480          link      A6,#-4
                     481   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
08000258  2D7C 0B00  482          move.l    #184549376,-4(A6)
0800025C  0000 FFFC 
                     483   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000260  206E FFFC  484          move.l    -4(A6),A0
08000264  202E 000C  485          move.l    12(A6),D0
08000268  E588       486          lsl.l     #2,D0
0800026A  21AE 0008  487          move.l    8(A6),0(A0,D0.L)
0800026E  0800      
08000270  4E5E       488          unlk      A6
08000272  4E75       489          rts
                     490   ; }
                     491   ; /******************************************************************************************************************************
                     492   ; * Start of user program
                     493   ; ******************************************************************************************************************************/
                     494   ; void main()
                     495   ; {
                     496   _main:
08000274  4E56 FF50  497          link      A6,#-176
08000278  48E7 003C  498          movem.l   A2/A3/A4/A5,-(A7)
0800027C  45F9 0800  499          lea       _printf.L,A2
08000280  0752      
08000282  47F9 0800  500          lea       _InstallExceptionHandler.L,A3
08000286  0254      
08000288  49F9 0800  501          lea       _I2C_ReadADCChannel.L,A4
0800028C  05AA      
0800028E  4BF9 0800  502          lea       _IRQ4.L,A5
08000292  12B2      
                     503   ; unsigned int row, i=0, count=0, counter1=1;
08000294  42AE FF54  504          clr.l     -172(A6)
08000298  42AE FF58  505          clr.l     -168(A6)
0800029C  2D7C 0000  506          move.l    #1,-164(A6)
080002A0  0001 FF5C 
                     507   ; char c, text[150] ;
                     508   ; unsigned char adc_reading = 0xAAU;
080002A4  1D7C 00AA  509          move.b    #170,-8(A6)
080002A8  FFF8      
                     510   ; unsigned char light_reading = 0x0;
080002AA  422E FFF9  511          clr.b     -7(A6)
                     512   ; unsigned char therm_reading = 0x0;
080002AE  422E FFFA  513          clr.b     -6(A6)
                     514   ; unsigned char zero = 0x0;
080002B2  422E FFFB  515          clr.b     -5(A6)
                     516   ; int PassFailFlag = 1 ;
080002B6  2D7C 0000  517          move.l    #1,-4(A6)
080002BA  0001 FFFC 
                     518   ; i = x = y = z = PortA_Count =0;
080002BE  42B9 0800  519          clr.l     _PortA_Count.L
080002C2  129A      
080002C4  42B9 0800  520          clr.l     _z.L
080002C8  1296      
080002CA  42B9 0800  521          clr.l     _y.L
080002CE  1292      
080002D0  42B9 0800  522          clr.l     _x.L
080002D4  128E      
080002D6  42AE FF54  523          clr.l     -172(A6)
                     524   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
080002DA  4239 0800  525          clr.b     _Timer4Count.L
080002DE  12A4      
080002E0  4239 0800  526          clr.b     _Timer3Count.L
080002E4  12A2      
080002E6  4239 0800  527          clr.b     _Timer2Count.L
080002EA  12A0      
080002EC  4239 0800  528          clr.b     _Timer1Count.L
080002F0  129E      
                     529   ; IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ4_COUNT = 0;
080002F2  42B9 0800  530          clr.l     _IRQ4_COUNT.L
080002F6  12B6      
080002F8  4295       531          clr.l     (A5)
080002FA  42B9 0800  532          clr.l     _IRQ3.L
080002FE  12AE      
08000300  42B9 0800  533          clr.l     _IRQ2.L
08000304  12AA      
08000306  42B9 0800  534          clr.l     _IRQ1.L
0800030A  12A6      
                     535   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
0800030C  4878 0019  536          pea       25
08000310  4879 0800  537          pea       _PIA_ISR.L
08000314  00C6      
08000316  4E93       538          jsr       (A3)
08000318  504F       539          addq.w    #8,A7
                     540   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
0800031A  4878 001A  541          pea       26
0800031E  4879 0800  542          pea       _ACIA_ISR.L
08000322  00C4      
08000324  4E93       543          jsr       (A3)
08000326  504F       544          addq.w    #8,A7
                     545   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
08000328  4878 001B  546          pea       27
0800032C  4879 0800  547          pea       _Timer_ISR.L
08000330  003E      
08000332  4E93       548          jsr       (A3)
08000334  504F       549          addq.w    #8,A7
                     550   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
08000336  4878 001C  551          pea       28
0800033A  4879 0800  552          pea       _Key2PressISR.L
0800033E  00C8      
08000340  4E93       553          jsr       (A3)
08000342  504F       554          addq.w    #8,A7
                     555   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
08000344  4878 001D  556          pea       29
08000348  4879 0800  557          pea       _Key1PressISR.L
0800034C  00CA      
0800034E  4E93       558          jsr       (A3)
08000350  504F       559          addq.w    #8,A7
                     560   ; Timer1Data = 0x27;		// program time delay into timers 1-4
08000352  13FC 0027  561          move.b    #39,4194352
08000356  0040 0030 
                     562   ; Timer2Data = 0x3A;
0800035A  13FC 003A  563          move.b    #58,4194356
0800035E  0040 0034 
                     564   ; Timer3Data = 0xC3;
08000362  13FC 00C3  565          move.b    #195,4194360
08000366  0040 0038 
                     566   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
0800036A  13FC 0003  567          move.b    #3,4194354
0800036E  0040 0032 
                     568   ; Timer2Control = 3;
08000372  13FC 0003  569          move.b    #3,4194358
08000376  0040 0036 
                     570   ; Timer3Control = 3;
0800037A  13FC 0003  571          move.b    #3,4194362
0800037E  0040 003A 
                     572   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
08000382  4EB9 0800  573          jsr       _Init_LCD
08000386  00FA      
                     574   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
08000388  4EB9 0800  575          jsr       _Init_RS232
0800038C  0118      
                     576   ; InitI2C();
0800038E  4EB9 0800  577          jsr       _InitI2C
08000392  044E      
                     578   ; while(1)
                     579   main_1:
                     580   ; {
                     581   ; if(IRQ1)
08000394  4AB9 0800  582          tst.l     _IRQ1.L
08000398  12A6      
0800039A  671E       583          beq.s     main_4
                     584   ; {
                     585   ; IRQ1 = 0;
0800039C  42B9 0800  586          clr.l     _IRQ1.L
080003A0  12A6      
                     587   ; //CanBus0_Transmit();
                     588   ; printf("\nSlider switchs: %02X\n", PortA);
080003A2  1239 0040  589          move.b    4194304,D1
080003A6  0000      
080003A8  C2BC 0000  590          and.l     #255,D1
080003AC  00FF      
080003AE  2F01       591          move.l    D1,-(A7)
080003B0  4879 0800  592          pea       @m68kus~1_1.L
080003B4  10D8      
080003B6  4E92       593          jsr       (A2)
080003B8  504F       594          addq.w    #8,A7
                     595   main_4:
                     596   ; }
                     597   ; if(IRQ2)
080003BA  4AB9 0800  598          tst.l     _IRQ2.L
080003BE  12AA      
080003C0  6728       599          beq.s     main_6
                     600   ; {
                     601   ; IRQ2 = 0;
080003C2  42B9 0800  602          clr.l     _IRQ2.L
080003C6  12AA      
                     603   ; I2C_ReadADCChannel(1, &adc_reading);
080003C8  486E FFF8  604          pea       -8(A6)
080003CC  4878 0001  605          pea       1
080003D0  4E94       606          jsr       (A4)
080003D2  504F       607          addq.w    #8,A7
                     608   ; //CanBus0_Transmit();
                     609   ; printf("\nADC reading: %d\n", adc_reading);
080003D4  122E FFF8  610          move.b    -8(A6),D1
080003D8  C2BC 0000  611          and.l     #255,D1
080003DC  00FF      
080003DE  2F01       612          move.l    D1,-(A7)
080003E0  4879 0800  613          pea       @m68kus~1_2.L
080003E4  10F0      
080003E6  4E92       614          jsr       (A2)
080003E8  504F       615          addq.w    #8,A7
                     616   main_6:
                     617   ; }
                     618   ; if(IRQ3)
080003EA  4AB9 0800  619          tst.l     _IRQ3.L
080003EE  12AE      
080003F0  6728       620          beq.s     main_8
                     621   ; {
                     622   ; IRQ3 = 0;
080003F2  42B9 0800  623          clr.l     _IRQ3.L
080003F6  12AE      
                     624   ; I2C_ReadADCChannel(2, &light_reading);
080003F8  486E FFF9  625          pea       -7(A6)
080003FC  4878 0002  626          pea       2
08000400  4E94       627          jsr       (A4)
08000402  504F       628          addq.w    #8,A7
                     629   ; //CanBus0_Transmit();
                     630   ; printf("\nlight sensor reading: %d\n", light_reading);
08000404  122E FFF9  631          move.b    -7(A6),D1
08000408  C2BC 0000  632          and.l     #255,D1
0800040C  00FF      
0800040E  2F01       633          move.l    D1,-(A7)
08000410  4879 0800  634          pea       @m68kus~1_3.L
08000414  1102      
08000416  4E92       635          jsr       (A2)
08000418  504F       636          addq.w    #8,A7
                     637   main_8:
                     638   ; }
                     639   ; if(IRQ4)
0800041A  4A95       640          tst.l     (A5)
0800041C  6722       641          beq.s     main_10
                     642   ; {
                     643   ; IRQ4 = 0;
0800041E  4295       644          clr.l     (A5)
                     645   ; I2C_ReadADCChannel(0, &therm_reading);
08000420  486E FFFA  646          pea       -6(A6)
08000424  42A7       647          clr.l     -(A7)
08000426  4E94       648          jsr       (A4)
08000428  504F       649          addq.w    #8,A7
                     650   ; //CanBus0_Transmit();
                     651   ; printf("\nThermister reading: %d\n", therm_reading);
0800042A  122E FFFA  652          move.b    -6(A6),D1
0800042E  C2BC 0000  653          and.l     #255,D1
08000432  00FF      
08000434  2F01       654          move.l    D1,-(A7)
08000436  4879 0800  655          pea       @m68kus~1_4.L
0800043A  111E      
0800043C  4E92       656          jsr       (A2)
0800043E  504F       657          addq.w    #8,A7
                     658   main_10:
                     659   ; }
                     660   ; printf("\rReceiving...");
08000440  4879 0800  661          pea       @m68kus~1_5.L
08000444  1138      
08000446  4E92       662          jsr       (A2)
08000448  584F       663          addq.w    #4,A7
0800044A  6000 FF48  664          bra       main_1
                     665   ; }
                     666   ; // programs should NOT exit as there is nothing to Exit TO !!!!!!
                     667   ; // There is no OS - just press the reset button to end program and call debug
                     668   ; }
                     669   ; C:\M68KV6.0 - 800BY480\ASSIGNMENT6\PARTB_ISR_PROJ\DAC_ADC_MAIN.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     670   ; #include <stdio.h>
                     671   ; #include <string.h>
                     672   ; #include <ctype.h>
                     673   ; #define TRUE 1
                     674   ; #define FALSE 0
                     675   ; #define SUCCESS 1
                     676   ; #define FAILURE 0
                     677   ; #define ACK 1
                     678   ; #define NO_ACK 0
                     679   ; #define ADC_DAC_DEVICE_ADDR       0x48 // A2, A1, A0 all tied to GND
                     680   ; /*********************************************************************************************
                     681   ; **	RS232 port addresses
                     682   ; *********************************************************************************************/
                     683   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     684   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     685   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     686   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     687   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     688   ; /*************************************************************
                     689   ; ** I2C Controller registers
                     690   ; **************************************************************/
                     691   ; #define I2C_PSC_LOW         (*(volatile unsigned char *)(0x00408000))
                     692   ; #define I2C_PSC_HIGH        (*(volatile unsigned char *)(0x00408002))
                     693   ; #define I2C_CONTROL         (*(volatile unsigned char *)(0x00408004))
                     694   ; #define I2C_TX_RX           (*(volatile unsigned char *)(0x00408006))
                     695   ; #define I2C_CMD_STATUS      (*(volatile unsigned char *)(0x00408008))
                     696   ; void InitI2C(void)
                     697   ; {
                     698   _InitI2C:
                     699   ; // Prescaler for 100 Khz I2C clock
                     700   ; // = (25 MHz) / (5 * 100 KHz)  - 1 = 0x0031
                     701   ; I2C_PSC_LOW = 0x31U;
0800044E  13FC 0031  702          move.b    #49,4227072
08000452  0040 8000 
                     703   ; I2C_PSC_HIGH = 0x00U;
08000456  4239 0040  704          clr.b     4227074
0800045A  8002      
                     705   ; // Enable I2C core, disable interrupt generation
                     706   ; I2C_CONTROL = 0x80U;
0800045C  13FC 0080  707          move.b    #128,4227076
08000460  0040 8004 
08000464  4E75       708          rts
                     709   ; }
                     710   ; void I2C_SetStartBitCommand(unsigned char* cmd_buf)
                     711   ; {
                     712   _I2C_SetStartBitCommand:
08000466  4E56 0000  713          link      A6,#0
                     714   ; *cmd_buf |= (0x01U << 7);
0800046A  206E 0008  715          move.l    8(A6),A0
0800046E  0010 0080  716          or.b      #128,(A0)
08000472  4E5E       717          unlk      A6
08000474  4E75       718          rts
                     719   ; }
                     720   ; void I2C_SetStopBitCommand(unsigned char* cmd_buf)
                     721   ; {
                     722   _I2C_SetStopBitCommand:
08000476  4E56 0000  723          link      A6,#0
                     724   ; *cmd_buf |= (0x01U << 6);
0800047A  206E 0008  725          move.l    8(A6),A0
0800047E  0010 0040  726          or.b      #64,(A0)
08000482  4E5E       727          unlk      A6
08000484  4E75       728          rts
                     729   ; }
                     730   ; void I2C_SetReadBitCommand(unsigned char* cmd_buf)
                     731   ; {
                     732   _I2C_SetReadBitCommand:
08000486  4E56 0000  733          link      A6,#0
                     734   ; *cmd_buf |= (0x01U << 5);
0800048A  206E 0008  735          move.l    8(A6),A0
0800048E  0010 0020  736          or.b      #32,(A0)
08000492  4E5E       737          unlk      A6
08000494  4E75       738          rts
                     739   ; }
                     740   ; void I2C_SetWriteBitCommand(unsigned char* cmd_buf)
                     741   ; {
                     742   _I2C_SetWriteBitCommand:
08000496  4E56 0000  743          link      A6,#0
                     744   ; *cmd_buf |= (0x01U << 4);
0800049A  206E 0008  745          move.l    8(A6),A0
0800049E  0010 0010  746          or.b      #16,(A0)
080004A2  4E5E       747          unlk      A6
080004A4  4E75       748          rts
                     749   ; }
                     750   ; void I2C_SetAckBitCommand(unsigned char* cmd_buf)
                     751   ; {
                     752   _I2C_SetAckBitCommand:
080004A6  4E56 0000  753          link      A6,#0
                     754   ; *cmd_buf |= (0x01U << 3);
080004AA  206E 0008  755          move.l    8(A6),A0
080004AE  0010 0008  756          or.b      #8,(A0)
080004B2  4E5E       757          unlk      A6
080004B4  4E75       758          rts
                     759   ; }
                     760   ; void I2C_PerformCommand(unsigned char cmd)
                     761   ; {
                     762   _I2C_PerformCommand:
080004B6  4E56 0000  763          link      A6,#0
                     764   ; I2C_CMD_STATUS = cmd;
080004BA  13EE 000B  765          move.b    11(A6),4227080
080004BE  0040 8008 
080004C2  4E5E       766          unlk      A6
080004C4  4E75       767          rts
                     768   ; }
                     769   ; void I2C_WaitForTransmissionComplete(void)
                     770   ; {
                     771   _I2C_WaitForTransmissionComplete:
                     772   ; // Wait For transfer in progress TIP to be complete
                     773   ; while(I2C_CMD_STATUS & 0x02U);
                     774   I2C_WaitForTransmissionComplete_1:
080004C6  1039 0040  775          move.b    4227080,D0
080004CA  8008      
080004CC  C03C 0002  776          and.b     #2,D0
080004D0  6702       777          beq.s     I2C_WaitForTransmissionComplete_3
080004D2  60F2       778          bra       I2C_WaitForTransmissionComplete_1
                     779   I2C_WaitForTransmissionComplete_3:
080004D4  4E75       780          rts
                     781   ; }
                     782   ; unsigned char DidDeviceACK(void)
                     783   ; {
                     784   _DidDeviceACK:
                     785   ; return (I2C_CMD_STATUS & 0x80U) ? NO_ACK : ACK;
080004D6  1039 0040  786          move.b    4227080,D0
080004DA  8008      
080004DC  C03C 0080  787          and.b     #128,D0
080004E0  6704       788          beq.s     DidDeviceACK_1
080004E2  4200       789          clr.b     D0
080004E4  6002       790          bra.s     DidDeviceACK_2
                     791   DidDeviceACK_1:
080004E6  7001       792          moveq     #1,D0
                     793   DidDeviceACK_2:
080004E8  4E75       794          rts
                     795   ; }
                     796   ; unsigned char I2C_WriteByte(unsigned char data, unsigned char with_start_bit, unsigned char with_stop_bit)
                     797   ; {
                     798   _I2C_WriteByte:
080004EA  4E56 FFFC  799          link      A6,#-4
080004EE  2F0A       800          move.l    A2,-(A7)
080004F0  45EE FFFF  801          lea       -1(A6),A2
                     802   ; unsigned char cmd_buf = 0x00U;
080004F4  4212       803          clr.b     (A2)
                     804   ; I2C_TX_RX = data;  // Place data to transmit in transmit register
080004F6  13EE 000B  805          move.b    11(A6),4227078
080004FA  0040 8006 
                     806   ; if (with_start_bit)
080004FE  4A2E 000F  807          tst.b     15(A6)
08000502  670A       808          beq.s     I2C_WriteByte_1
                     809   ; {
                     810   ; I2C_SetStartBitCommand(&cmd_buf);       // Set START Bit in command register
08000504  2F0A       811          move.l    A2,-(A7)
08000506  4EB9 0800  812          jsr       _I2C_SetStartBitCommand
0800050A  0466      
0800050C  584F       813          addq.w    #4,A7
                     814   I2C_WriteByte_1:
                     815   ; }
                     816   ; if (with_stop_bit)
0800050E  4A2E 0013  817          tst.b     19(A6)
08000512  670A       818          beq.s     I2C_WriteByte_3
                     819   ; {
                     820   ; I2C_SetStopBitCommand(&cmd_buf);        // Set STOP Bit in command register
08000514  2F0A       821          move.l    A2,-(A7)
08000516  4EB9 0800  822          jsr       _I2C_SetStopBitCommand
0800051A  0476      
0800051C  584F       823          addq.w    #4,A7
                     824   I2C_WriteByte_3:
                     825   ; }
                     826   ; I2C_SetWriteBitCommand(&cmd_buf);           // Set Write bit in command register
0800051E  2F0A       827          move.l    A2,-(A7)
08000520  4EB9 0800  828          jsr       _I2C_SetWriteBitCommand
08000524  0496      
08000526  584F       829          addq.w    #4,A7
                     830   ; I2C_PerformCommand(cmd_buf);                // Perform the write command 
08000528  1212       831          move.b    (A2),D1
0800052A  C2BC 0000  832          and.l     #255,D1
0800052E  00FF      
08000530  2F01       833          move.l    D1,-(A7)
08000532  4EB9 0800  834          jsr       _I2C_PerformCommand
08000536  04B6      
08000538  584F       835          addq.w    #4,A7
                     836   ; I2C_WaitForTransmissionComplete();          // Wait for I2C transmission to complete
0800053A  4EB9 0800  837          jsr       _I2C_WaitForTransmissionComplete
0800053E  04C6      
                     838   ; return DidDeviceACK();             
08000540  4EB9 0800  839          jsr       _DidDeviceACK
08000544  04D6      
08000546  245F       840          move.l    (A7)+,A2
08000548  4E5E       841          unlk      A6
0800054A  4E75       842          rts
                     843   ; }
                     844   ; void I2C_ReadByte(unsigned int with_nack, unsigned char with_stop_bit, unsigned char* byte_read)
                     845   ; {
                     846   _I2C_ReadByte:
0800054C  4E56 FFFC  847          link      A6,#-4
08000550  2F0A       848          move.l    A2,-(A7)
08000552  45EE FFFF  849          lea       -1(A6),A2
                     850   ; unsigned char cmd_buf = 0x00U;
08000556  4212       851          clr.b     (A2)
                     852   ; if (with_nack)
08000558  4AAE 0008  853          tst.l     8(A6)
0800055C  670A       854          beq.s     I2C_ReadByte_1
                     855   ; {
                     856   ; I2C_SetAckBitCommand(&cmd_buf); // NOTE: Send NACK after reception of data by setting ACK = ‘1’ 
0800055E  2F0A       857          move.l    A2,-(A7)
08000560  4EB9 0800  858          jsr       _I2C_SetAckBitCommand
08000564  04A6      
08000566  584F       859          addq.w    #4,A7
                     860   I2C_ReadByte_1:
                     861   ; }
                     862   ; if (with_stop_bit)
08000568  4A2E 000F  863          tst.b     15(A6)
0800056C  670A       864          beq.s     I2C_ReadByte_3
                     865   ; {
                     866   ; I2C_SetStopBitCommand(&cmd_buf); 
0800056E  2F0A       867          move.l    A2,-(A7)
08000570  4EB9 0800  868          jsr       _I2C_SetStopBitCommand
08000574  0476      
08000576  584F       869          addq.w    #4,A7
                     870   I2C_ReadByte_3:
                     871   ; }
                     872   ; I2C_SetReadBitCommand(&cmd_buf);
08000578  2F0A       873          move.l    A2,-(A7)
0800057A  4EB9 0800  874          jsr       _I2C_SetReadBitCommand
0800057E  0486      
08000580  584F       875          addq.w    #4,A7
                     876   ; I2C_PerformCommand(cmd_buf);        // Perform read command     
08000582  1212       877          move.b    (A2),D1
08000584  C2BC 0000  878          and.l     #255,D1
08000588  00FF      
0800058A  2F01       879          move.l    D1,-(A7)
0800058C  4EB9 0800  880          jsr       _I2C_PerformCommand
08000590  04B6      
08000592  584F       881          addq.w    #4,A7
                     882   ; I2C_WaitForTransmissionComplete();  
08000594  4EB9 0800  883          jsr       _I2C_WaitForTransmissionComplete
08000598  04C6      
                     884   ; *byte_read = I2C_TX_RX;     // Read valid data from RX register
0800059A  206E 0010  885          move.l    16(A6),A0
0800059E  10B9 0040  886          move.b    4227078,(A0)
080005A2  8006      
080005A4  245F       887          move.l    (A7)+,A2
080005A6  4E5E       888          unlk      A6
080005A8  4E75       889          rts
                     890   ; }
                     891   ; unsigned char I2C_ReadADCChannel(unsigned char adc_channel, unsigned char * adc_val)
                     892   ; {
                     893   _I2C_ReadADCChannel:
080005AA  4E56 FFFC  894          link      A6,#-4
080005AE  48E7 3820  895          movem.l   D2/D3/D4/A2,-(A7)
080005B2  45F9 0800  896          lea       _I2C_WriteByte.L,A2
080005B6  04EA      
                     897   ; // Prepend R/~W bit to device address.
                     898   ; unsigned char address_byte_write = ADC_DAC_DEVICE_ADDR << 1;  // Prepend ~W bit to device address.
080005B8  183C 0090  899          move.b    #144,D4
                     900   ; unsigned char address_byte_read = address_byte_write | 0x01U; // Prepend R bit to device address.
080005BC  1004       901          move.b    D4,D0
080005BE  803C 0001  902          or.b      #1,D0
080005C2  1D40 FFFF  903          move.b    D0,-1(A6)
                     904   ; unsigned char control_byte = 0x00U; 
080005C6  4203       905          clr.b     D3
                     906   ; unsigned char err = NO_ACK;
080005C8  4202       907          clr.b     D2
                     908   ; if(adc_channel > 3)
080005CA  102E 000B  909          move.b    11(A6),D0
080005CE  0C00 0003  910          cmp.b     #3,D0
080005D2  6310       911          bls.s     I2C_ReadADCChannel_1
                     912   ; {
                     913   ; printf("\r\nMust select ADC channel between 0 and 3");
080005D4  4879 0800  914          pea       @dac_ad~1_1.L
080005D8  1146      
080005DA  4EB9 0800  915          jsr       _printf
080005DE  0752      
080005E0  584F       916          addq.w    #4,A7
                     917   ; while(1);
                     918   I2C_ReadADCChannel_3:
080005E2  60FE       919          bra       I2C_ReadADCChannel_3
                     920   I2C_ReadADCChannel_1:
                     921   ; }
                     922   ; else
                     923   ; {
                     924   ; control_byte = adc_channel; // Read single-ended ADC channel w/o auto increment, analog output disabled
080005E4  162E 000B  925          move.b    11(A6),D3
                     926   ; }
                     927   ; // Write to control register first
                     928   ; if (err == I2C_WriteByte(address_byte_write, TRUE, FALSE)) return err; // With start bit
080005E8  42A7       929          clr.l     -(A7)
080005EA  4878 0001  930          pea       1
080005EE  C8BC 0000  931          and.l     #255,D4
080005F2  00FF      
080005F4  2F04       932          move.l    D4,-(A7)
080005F6  4E92       933          jsr       (A2)
080005F8  DEFC 000C  934          add.w     #12,A7
080005FC  B400       935          cmp.b     D0,D2
080005FE  6606       936          bne.s     I2C_ReadADCChannel_6
08000600  1002       937          move.b    D2,D0
08000602  6000 0068  938          bra       I2C_ReadADCChannel_8
                     939   I2C_ReadADCChannel_6:
                     940   ; if (err == I2C_WriteByte(control_byte, FALSE, FALSE)) return err;
08000606  42A7       941          clr.l     -(A7)
08000608  42A7       942          clr.l     -(A7)
0800060A  C6BC 0000  943          and.l     #255,D3
0800060E  00FF      
08000610  2F03       944          move.l    D3,-(A7)
08000612  4E92       945          jsr       (A2)
08000614  DEFC 000C  946          add.w     #12,A7
08000618  B400       947          cmp.b     D0,D2
0800061A  6606       948          bne.s     I2C_ReadADCChannel_9
0800061C  1002       949          move.b    D2,D0
0800061E  6000 004C  950          bra       I2C_ReadADCChannel_8
                     951   I2C_ReadADCChannel_9:
                     952   ; // Now request read of ADC conversion
                     953   ; if (err == I2C_WriteByte(address_byte_read, TRUE, FALSE)) return err; // With repeated start condition
08000622  42A7       954          clr.l     -(A7)
08000624  4878 0001  955          pea       1
08000628  122E FFFF  956          move.b    -1(A6),D1
0800062C  C2BC 0000  957          and.l     #255,D1
08000630  00FF      
08000632  2F01       958          move.l    D1,-(A7)
08000634  4E92       959          jsr       (A2)
08000636  DEFC 000C  960          add.w     #12,A7
0800063A  B400       961          cmp.b     D0,D2
0800063C  6604       962          bne.s     I2C_ReadADCChannel_11
0800063E  1002       963          move.b    D2,D0
08000640  602A       964          bra.s     I2C_ReadADCChannel_8
                     965   I2C_ReadADCChannel_11:
                     966   ; // Read ADC conversion 
                     967   ; I2C_ReadByte(FALSE, FALSE, adc_val); // Ignore previously converted byte
08000642  2F2E 000C  968          move.l    12(A6),-(A7)
08000646  42A7       969          clr.l     -(A7)
08000648  42A7       970          clr.l     -(A7)
0800064A  4EB9 0800  971          jsr       _I2C_ReadByte
0800064E  054C      
08000650  DEFC 000C  972          add.w     #12,A7
                     973   ; I2C_ReadByte(TRUE, TRUE, adc_val);   // With NACK and STOP condition
08000654  2F2E 000C  974          move.l    12(A6),-(A7)
08000658  4878 0001  975          pea       1
0800065C  4878 0001  976          pea       1
08000660  4EB9 0800  977          jsr       _I2C_ReadByte
08000664  054C      
08000666  DEFC 000C  978          add.w     #12,A7
                     979   ; return SUCCESS;
0800066A  7001       980          moveq     #1,D0
                     981   I2C_ReadADCChannel_8:
0800066C  4CDF 041C  982          movem.l   (A7)+,D2/D3/D4/A2
08000670  4E5E       983          unlk      A6
08000672  4E75       984          rts
                     985   ; }
                     986   ULDIV:
08000674  4E56 0000  987          link    A6,#0
08000678  48E7 C000  988          movem.l D0/D1,-(A7)
0800067C  222E 0008  989          move.l  8(A6),D1
08000680  202E 000C  990          move.l  12(A6),D0
08000684  6036       991          bra.s   ldiv_3
                     992   LDIV:
08000686  4E56 0000  993          link    A6,#0
0800068A  48E7 C000  994          movem.l D0/D1,-(A7)
0800068E  222E 0008  995          move.l  8(A6),D1
08000692  202E 000C  996          move.l  12(A6),D0
08000696  4A80       997          tst.l   D0
08000698  6A0E       998          bpl.s   ldiv_1
0800069A  4480       999          neg.l   D0
0800069C  4A81      1000          tst.l   D1
0800069E  6A14      1001          bpl.s   ldiv_2
080006A0  4481      1002          neg.l   D1
080006A2  612A      1003          bsr.s   dodiv
080006A4  4481      1004          neg.l   D1
080006A6  6016      1005          bra.s   ldiv_4
                    1006   ldiv_1:
080006A8  4A81      1007          tst.l   D1
080006AA  6A10      1008          bpl.s   ldiv_3
080006AC  4481      1009          neg.l   D1
080006AE  611E      1010          bsr.s   dodiv
080006B0  4480      1011          neg.l   D0
080006B2  600A      1012          bra.s   ldiv_4
                    1013   ldiv_2:
080006B4  6118      1014          bsr.s   dodiv
080006B6  4480      1015          neg.l   D0
080006B8  4481      1016          neg.l   D1
080006BA  6002      1017          bra.s   ldiv_4
                    1018   ldiv_3:
080006BC  6110      1019          bsr.s   dodiv
                    1020   ldiv_4:
080006BE  2D40 0008 1021          move.l  D0,8(A6)
080006C2  2D41 000C 1022          move.l  D1,12(A6)
080006C6  4CDF 0003 1023          movem.l (A7)+,D0/D1
080006CA  4E5E      1024          unlk    A6
080006CC  4E75      1025          rts
                    1026   dodiv:
080006CE  0C81 0000 1027          cmpi.l  #$FFFF,D1
080006D2  FFFF      
080006D4  6236      1028          bhi.s   dodiv_2
080006D6  0C80 0000 1029          cmpi.l  #$FFFF,D0
080006DA  FFFF      
080006DC  6210      1030          bhi.s   dodiv_1
080006DE  80C1      1031          divu    D1,D0
080006E0  2200      1032          move.l  D0,D1
080006E2  4241      1033          clr.w   D1
080006E4  4841      1034          swap    D1
080006E6  0280 0000 1035          andi.l  #$FFFF,D0
080006EA  FFFF      
080006EC  4E75      1036          rts
                    1037   dodiv_1:
080006EE  48A7 A000 1038          movem.w D0/D2,-(A7)
080006F2  4240      1039          clr.w   D0
080006F4  4840      1040          swap    D0
080006F6  80C1      1041          divu    D1,D0
080006F8  3400      1042          move.w  D0,D2
080006FA  301F      1043          move.w  (A7)+,D0
080006FC  80C1      1044          divu    D1,D0
080006FE  4840      1045          swap    D0
08000700  4281      1046          clr.l   D1
08000702  3200      1047          move.w  D0,D1
08000704  3002      1048          move.w  D2,D0
08000706  4840      1049          swap    D0
08000708  341F      1050          move.w  (A7)+,D2
0800070A  4E75      1051          rts
                    1052   dodiv_2:
0800070C  48E7 3800 1053          movem.l D2/D3/D4,-(A7)
08000710  2401      1054          move.l  D1,D2
08000712  4242      1055          clr.w   D2
08000714  4842      1056          swap    D2
08000716  5282      1057          addq.l  #1,D2
08000718  2600      1058          move.l  D0,D3
0800071A  2801      1059          move.l  D1,D4
0800071C  2202      1060          move.l  D2,D1
0800071E  61CE      1061          bsr.s   dodiv_1
08000720  2204      1062          move.l  D4,D1
08000722  82C2      1063          divu    D2,D1
08000724  80C1      1064          divu    D1,D0
08000726  0280 0000 1065          andi.l  #$FFFF,D0
0800072A  FFFF      
                    1066   dodiv_3:
0800072C  2204      1067          move.l  D4,D1
0800072E  2404      1068          move.l  D4,D2
08000730  4842      1069          swap    D2
08000732  C2C0      1070          mulu    D0,D1
08000734  C4C0      1071          mulu    D0,D2
08000736  4842      1072          swap    D2
08000738  D282      1073          add.l   D2,D1
0800073A  9283      1074          sub.l   D3,D1
0800073C  620A      1075          bhi.s   dodiv_4
0800073E  4481      1076          neg.l   D1
08000740  B881      1077          cmp.l   D1,D4
08000742  6208      1078          bhi.s   dodiv_5
08000744  5280      1079          addq.l  #1,D0
08000746  60E4      1080          bra.s   dodiv_3
                    1081   dodiv_4:
08000748  5380      1082          subq.l  #1,D0
0800074A  60E0      1083          bra.s   dodiv_3
                    1084   dodiv_5:
0800074C  4CDF 001C 1085          movem.l (A7)+,D2/D3/D4
08000750  4E75      1086          rts
                    1087   _printf:
08000752  4E56 FFFC 1088          link      A6,#-4
08000756  2F02      1089          move.l    D2,-(A7)
08000758  41EE 0008 1090          lea       8(A6),A0
0800075C  5848      1091          addq.w    #4,A0
0800075E  2408      1092          move.l    A0,D2
08000760  2F02      1093          move.l    D2,-(A7)
08000762  2F2E 0008 1094          move.l    8(A6),-(A7)
08000766  42A7      1095          clr.l     -(A7)
08000768  4EB9 0800 1096          jsr       _doprint
0800076C  082A      
0800076E  DEFC 000C 1097          add.w     #12,A7
08000772  2D40 FFFC 1098          move.l    D0,-4(A6)
08000776  4282      1099          clr.l     D2
08000778  202E FFFC 1100          move.l    -4(A6),D0
0800077C  241F      1101          move.l    (A7)+,D2
0800077E  4E5E      1102          unlk      A6
08000780  4E75      1103          rts
                    1104   @doprint_copy:
08000782  4E56 0000 1105          link      A6,#0
08000786  206E 0008 1106          move.l    8(A6),A0
0800078A  4A90      1107          tst.l     (A0)
0800078C  6710      1108          beq.s     @doprint_copy_1
0800078E  202E 000C 1109          move.l    12(A6),D0
08000792  206E 0008 1110          move.l    8(A6),A0
08000796  2250      1111          move.l    (A0),A1
08000798  5290      1112          addq.l    #1,(A0)
0800079A  1280      1113          move.b    D0,(A1)
0800079C  600C      1114          bra.s     @doprint_copy_2
                    1115   @doprint_copy_1:
0800079E  2F2E 000C 1116          move.l    12(A6),-(A7)
080007A2  4EB9 0800 1117          jsr       _putch
080007A6  107C      
080007A8  584F      1118          addq.w    #4,A7
                    1119   @doprint_copy_2:
080007AA  4E5E      1120          unlk      A6
080007AC  4E75      1121          rts
                    1122   @doprint_getval:
080007AE  4E56 0000 1123          link      A6,#0
080007B2  48E7 3000 1124          movem.l   D2/D3,-(A7)
080007B6  262E 0008 1125          move.l    8(A6),D3
080007BA  4282      1126          clr.l     D2
080007BC  2043      1127          move.l    D3,A0
080007BE  2050      1128          move.l    (A0),A0
080007C0  1010      1129          move.b    (A0),D0
080007C2  0C00 002A 1130          cmp.b     #42,D0
080007C6  6612      1131          bne.s     @doprint_getval_1
080007C8  206E 000C 1132          move.l    12(A6),A0
080007CC  2250      1133          move.l    (A0),A1
080007CE  5890      1134          addq.l    #4,(A0)
080007D0  2411      1135          move.l    (A1),D2
080007D2  2043      1136          move.l    D3,A0
080007D4  5290      1137          addq.l    #1,(A0)
080007D6  6000 0048 1138          bra       @doprint_getval_5
                    1139   @doprint_getval_1:
080007DA  7001      1140          moveq     #1,D0
080007DC  2043      1141          move.l    D3,A0
080007DE  2050      1142          move.l    (A0),A0
080007E0  1210      1143          move.b    (A0),D1
080007E2  4881      1144          ext.w     D1
080007E4  48C1      1145          ext.l     D1
080007E6  D081      1146          add.l     D1,D0
080007E8  41F9 0800 1147          lea       __ctype.L,A0
080007EC  117C      
080007EE  1030 0800 1148          move.b    0(A0,D0.L),D0
080007F2  C03C 0004 1149          and.b     #4,D0
080007F6  6728      1150          beq.s     @doprint_getval_5
080007F8  2F02      1151          move.l    D2,-(A7)
080007FA  4878 000A 1152          pea       10
080007FE  4EB9 0800 1153          jsr       LMUL
08000802  0FDC      
08000804  2017      1154          move.l    (A7),D0
08000806  504F      1155          addq.w    #8,A7
08000808  2043      1156          move.l    D3,A0
0800080A  2250      1157          move.l    (A0),A1
0800080C  5290      1158          addq.l    #1,(A0)
0800080E  1211      1159          move.b    (A1),D1
08000810  4881      1160          ext.w     D1
08000812  48C1      1161          ext.l     D1
08000814  D081      1162          add.l     D1,D0
08000816  0480 0000 1163          sub.l     #48,D0
0800081A  0030      
0800081C  2400      1164          move.l    D0,D2
0800081E  60BA      1165          bra       @doprint_getval_1
                    1166   @doprint_getval_5:
08000820  2002      1167          move.l    D2,D0
08000822  4CDF 000C 1168          movem.l   (A7)+,D2/D3
08000826  4E5E      1169          unlk      A6
08000828  4E75      1170          rts
                    1171   _doprint:
0800082A  4E56 FFCC 1172          link      A6,#-52
0800082E  48E7 3F3C 1173          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
08000832  45EE 0008 1174          lea       8(A6),A2
08000836  47F9 0800 1175          lea       @doprint_copy.L,A3
0800083A  0782      
0800083C  49F9 0800 1176          lea       _ultoa.L,A4
08000840  0F64      
08000842  4286      1177          clr.l     D6
                    1178   doprint_1:
08000844  206E 000C 1179          move.l    12(A6),A0
08000848  4A10      1180          tst.b     (A0)
0800084A  6700 05F0 1181          beq       doprint_3
0800084E  206E 000C 1182          move.l    12(A6),A0
08000852  1010      1183          move.b    (A0),D0
08000854  0C00 0025 1184          cmp.b     #37,D0
08000858  671C      1185          beq.s     doprint_4
0800085A  206E 000C 1186          move.l    12(A6),A0
0800085E  52AE 000C 1187          addq.l    #1,12(A6)
08000862  1210      1188          move.b    (A0),D1
08000864  4881      1189          ext.w     D1
08000866  48C1      1190          ext.l     D1
08000868  2F01      1191          move.l    D1,-(A7)
0800086A  2F0A      1192          move.l    A2,-(A7)
0800086C  4E93      1193          jsr       (A3)
0800086E  504F      1194          addq.w    #8,A7
08000870  5286      1195          addq.l    #1,D6
08000872  6000 05C4 1196          bra       doprint_2
                    1197   doprint_4:
08000876  52AE 000C 1198          addq.l    #1,12(A6)
0800087A  422E FFD3 1199          clr.b     -45(A6)
0800087E  422E FFD2 1200          clr.b     -46(A6)
08000882  422E FFD0 1201          clr.b     -48(A6)
08000886  422E FFCF 1202          clr.b     -49(A6)
0800088A  422E FFCE 1203          clr.b     -50(A6)
0800088E  422E FFCD 1204          clr.b     -51(A6)
08000892  42AE FFFC 1205          clr.l     -4(A6)
08000896  7AFF      1206          moveq     #-1,D5
08000898  41EE FFDC 1207          lea       -36(A6),A0
0800089C  2608      1208          move.l    A0,D3
0800089E  2408      1209          move.l    A0,D2
                    1210   doprint_6:
080008A0  206E 000C 1211          move.l    12(A6),A0
080008A4  1010      1212          move.b    (A0),D0
080008A6  4880      1213          ext.w     D0
080008A8  48C0      1214          ext.l     D0
080008AA  0C80 0000 1215          cmp.l     #43,D0
080008AE  002B      
080008B0  6730      1216          beq.s     doprint_12
080008B2  6E18      1217          bgt.s     doprint_15
080008B4  0C80 0000 1218          cmp.l     #35,D0
080008B8  0023      
080008BA  6700 003E 1219          beq       doprint_14
080008BE  6E00 0046 1220          bgt       doprint_9
080008C2  0C80 0000 1221          cmp.l     #32,D0
080008C6  0020      
080008C8  6724      1222          beq.s     doprint_13
080008CA  603A      1223          bra.s     doprint_9
                    1224   doprint_15:
080008CC  0C80 0000 1225          cmp.l     #45,D0
080008D0  002D      
080008D2  6702      1226          beq.s     doprint_11
080008D4  6030      1227          bra.s     doprint_9
                    1228   doprint_11:
080008D6  1D7C 0001 1229          move.b    #1,-51(A6)
080008DA  FFCD      
080008DC  52AE 000C 1230          addq.l    #1,12(A6)
080008E0  6026      1231          bra.s     doprint_7
                    1232   doprint_12:
080008E2  1D7C 0001 1233          move.b    #1,-50(A6)
080008E6  FFCE      
080008E8  52AE 000C 1234          addq.l    #1,12(A6)
080008EC  601A      1235          bra.s     doprint_7
                    1236   doprint_13:
080008EE  1D7C 0001 1237          move.b    #1,-49(A6)
080008F2  FFCF      
080008F4  52AE 000C 1238          addq.l    #1,12(A6)
080008F8  600E      1239          bra.s     doprint_7
                    1240   doprint_14:
080008FA  1D7C 0001 1241          move.b    #1,-48(A6)
080008FE  FFD0      
08000900  52AE 000C 1242          addq.l    #1,12(A6)
08000904  6002      1243          bra.s     doprint_7
                    1244   doprint_9:
08000906  6002      1245          bra.s     doprint_8
                    1246   doprint_7:
08000908  6096      1247          bra       doprint_6
                    1248   doprint_8:
0800090A  206E 000C 1249          move.l    12(A6),A0
0800090E  1010      1250          move.b    (A0),D0
08000910  0C00 0030 1251          cmp.b     #48,D0
08000914  660A      1252          bne.s     doprint_16
08000916  52AE 000C 1253          addq.l    #1,12(A6)
0800091A  1D7C 0001 1254          move.b    #1,-46(A6)
0800091E  FFD2      
                    1255   doprint_16:
08000920  486E 0010 1256          pea       16(A6)
08000924  486E 000C 1257          pea       12(A6)
08000928  4EB9 0800 1258          jsr       @doprint_getval
0800092C  07AE      
0800092E  504F      1259          addq.w    #8,A7
08000930  2A40      1260          move.l    D0,A5
08000932  206E 000C 1261          move.l    12(A6),A0
08000936  1010      1262          move.b    (A0),D0
08000938  0C00 002E 1263          cmp.b     #46,D0
0800093C  6616      1264          bne.s     doprint_18
0800093E  52AE 000C 1265          addq.l    #1,12(A6)
08000942  486E 0010 1266          pea       16(A6)
08000946  486E 000C 1267          pea       12(A6)
0800094A  4EB9 0800 1268          jsr       @doprint_getval
0800094E  07AE      
08000950  504F      1269          addq.w    #8,A7
08000952  2A00      1270          move.l    D0,D5
                    1271   doprint_18:
08000954  206E 000C 1272          move.l    12(A6),A0
08000958  1010      1273          move.b    (A0),D0
0800095A  0C00 006C 1274          cmp.b     #108,D0
0800095E  660A      1275          bne.s     doprint_20
08000960  52AE 000C 1276          addq.l    #1,12(A6)
08000964  1D7C 0001 1277          move.b    #1,-45(A6)
08000968  FFD3      
                    1278   doprint_20:
0800096A  206E 000C 1279          move.l    12(A6),A0
0800096E  1010      1280          move.b    (A0),D0
08000970  4880      1281          ext.w     D0
08000972  48C0      1282          ext.l     D0
08000974  0C80 0000 1283          cmp.l     #111,D0
08000978  006F      
0800097A  6700 00D8 1284          beq       doprint_27
0800097E  6E34      1285          bgt.s     doprint_33
08000980  0C80 0000 1286          cmp.l     #100,D0
08000984  0064      
08000986  6700 0054 1287          beq       doprint_24
0800098A  6E1C      1288          bgt.s     doprint_34
0800098C  0C80 0000 1289          cmp.l     #99,D0
08000990  0063      
08000992  6700 0130 1290          beq       doprint_30
08000996  6E00 0174 1291          bgt       doprint_22
0800099A  0C80 0000 1292          cmp.l     #88,D0
0800099E  0058      
080009A0  6700 00EA 1293          beq       doprint_28
080009A4  6000 0166 1294          bra       doprint_22
                    1295   doprint_34:
080009A8  0C80 0000 1296          cmp.l     #105,D0
080009AC  0069      
080009AE  672C      1297          beq.s     doprint_24
080009B0  6000 015A 1298          bra       doprint_22
                    1299   doprint_33:
080009B4  0C80 0000 1300          cmp.l     #117,D0
080009B8  0075      
080009BA  6700 0060 1301          beq       doprint_26
080009BE  6E0E      1302          bgt.s     doprint_35
080009C0  0C80 0000 1303          cmp.l     #115,D0
080009C4  0073      
080009C6  6700 0124 1304          beq       doprint_31
080009CA  6000 0140 1305          bra       doprint_22
                    1306   doprint_35:
080009CE  0C80 0000 1307          cmp.l     #120,D0
080009D2  0078      
080009D4  6700 00B6 1308          beq       doprint_28
080009D8  6000 0132 1309          bra       doprint_22
                    1310   doprint_24:
080009DC  4A2E FFD3 1311          tst.b     -45(A6)
080009E0  671C      1312          beq.s     doprint_36
080009E2  4878 000A 1313          pea       10
080009E6  2F03      1314          move.l    D3,-(A7)
080009E8  206E 0010 1315          move.l    16(A6),A0
080009EC  58AE 0010 1316          addq.l    #4,16(A6)
080009F0  2F10      1317          move.l    (A0),-(A7)
080009F2  4EB9 0800 1318          jsr       _ltoa
080009F6  0EDC      
080009F8  DEFC 000C 1319          add.w     #12,A7
080009FC  601A      1320          bra.s     doprint_37
                    1321   doprint_36:
080009FE  4878 000A 1322          pea       10
08000A02  2F03      1323          move.l    D3,-(A7)
08000A04  206E 0010 1324          move.l    16(A6),A0
08000A08  58AE 0010 1325          addq.l    #4,16(A6)
08000A0C  2F10      1326          move.l    (A0),-(A7)
08000A0E  4EB9 0800 1327          jsr       _ltoa
08000A12  0EDC      
08000A14  DEFC 000C 1328          add.w     #12,A7
                    1329   doprint_37:
08000A18  6000 0100 1330          bra       doprint_23
                    1331   doprint_26:
08000A1C  4A2E FFD3 1332          tst.b     -45(A6)
08000A20  6718      1333          beq.s     doprint_38
08000A22  4878 000A 1334          pea       10
08000A26  2F03      1335          move.l    D3,-(A7)
08000A28  206E 0010 1336          move.l    16(A6),A0
08000A2C  58AE 0010 1337          addq.l    #4,16(A6)
08000A30  2F10      1338          move.l    (A0),-(A7)
08000A32  4E94      1339          jsr       (A4)
08000A34  DEFC 000C 1340          add.w     #12,A7
08000A38  6016      1341          bra.s     doprint_39
                    1342   doprint_38:
08000A3A  4878 000A 1343          pea       10
08000A3E  2F03      1344          move.l    D3,-(A7)
08000A40  206E 0010 1345          move.l    16(A6),A0
08000A44  58AE 0010 1346          addq.l    #4,16(A6)
08000A48  2F10      1347          move.l    (A0),-(A7)
08000A4A  4E94      1348          jsr       (A4)
08000A4C  DEFC 000C 1349          add.w     #12,A7
                    1350   doprint_39:
08000A50  6000 00C8 1351          bra       doprint_23
                    1352   doprint_27:
08000A54  4A2E FFD3 1353          tst.b     -45(A6)
08000A58  6718      1354          beq.s     doprint_40
08000A5A  4878 0008 1355          pea       8
08000A5E  2F03      1356          move.l    D3,-(A7)
08000A60  206E 0010 1357          move.l    16(A6),A0
08000A64  58AE 0010 1358          addq.l    #4,16(A6)
08000A68  2F10      1359          move.l    (A0),-(A7)
08000A6A  4E94      1360          jsr       (A4)
08000A6C  DEFC 000C 1361          add.w     #12,A7
08000A70  6016      1362          bra.s     doprint_41
                    1363   doprint_40:
08000A72  4878 0008 1364          pea       8
08000A76  2F03      1365          move.l    D3,-(A7)
08000A78  206E 0010 1366          move.l    16(A6),A0
08000A7C  58AE 0010 1367          addq.l    #4,16(A6)
08000A80  2F10      1368          move.l    (A0),-(A7)
08000A82  4E94      1369          jsr       (A4)
08000A84  DEFC 000C 1370          add.w     #12,A7
                    1371   doprint_41:
08000A88  6000 0090 1372          bra       doprint_23
                    1373   doprint_28:
08000A8C  4A2E FFD3 1374          tst.b     -45(A6)
08000A90  6718      1375          beq.s     doprint_42
08000A92  4878 0010 1376          pea       16
08000A96  2F03      1377          move.l    D3,-(A7)
08000A98  206E 0010 1378          move.l    16(A6),A0
08000A9C  58AE 0010 1379          addq.l    #4,16(A6)
08000AA0  2F10      1380          move.l    (A0),-(A7)
08000AA2  4E94      1381          jsr       (A4)
08000AA4  DEFC 000C 1382          add.w     #12,A7
08000AA8  6016      1383          bra.s     doprint_43
                    1384   doprint_42:
08000AAA  4878 0010 1385          pea       16
08000AAE  2F03      1386          move.l    D3,-(A7)
08000AB0  206E 0010 1387          move.l    16(A6),A0
08000AB4  58AE 0010 1388          addq.l    #4,16(A6)
08000AB8  2F10      1389          move.l    (A0),-(A7)
08000ABA  4E94      1390          jsr       (A4)
08000ABC  DEFC 000C 1391          add.w     #12,A7
                    1392   doprint_43:
08000AC0  6000 0058 1393          bra       doprint_23
                    1394   doprint_30:
08000AC4  206E 0010 1395          move.l    16(A6),A0
08000AC8  58AE 0010 1396          addq.l    #4,16(A6)
08000ACC  2010      1397          move.l    (A0),D0
08000ACE  2042      1398          move.l    D2,A0
08000AD0  5282      1399          addq.l    #1,D2
08000AD2  1080      1400          move.b    D0,(A0)
08000AD4  2042      1401          move.l    D2,A0
08000AD6  4210      1402          clr.b     (A0)
08000AD8  200D      1403          move.l    A5,D0
08000ADA  6704      1404          beq.s     doprint_44
08000ADC  200D      1405          move.l    A5,D0
08000ADE  6006      1406          bra.s     doprint_45
                    1407   doprint_44:
08000AE0  7001      1408          moveq     #1,D0
08000AE2  4880      1409          ext.w     D0
08000AE4  48C0      1410          ext.l     D0
                    1411   doprint_45:
08000AE6  2A00      1412          move.l    D0,D5
08000AE8  6000 0030 1413          bra       doprint_23
                    1414   doprint_31:
08000AEC  206E 0010 1415          move.l    16(A6),A0
08000AF0  58AE 0010 1416          addq.l    #4,16(A6)
08000AF4  2610      1417          move.l    (A0),D3
08000AF6  0C85 FFFF 1418          cmp.l     #-1,D5
08000AFA  FFFF      
08000AFC  660C      1419          bne.s     doprint_46
08000AFE  2F03      1420          move.l    D3,-(A7)
08000B00  4EB9 0800 1421          jsr       _strlen
08000B04  106A      
08000B06  584F      1422          addq.w    #4,A7
08000B08  2A00      1423          move.l    D0,D5
                    1424   doprint_46:
08000B0A  600E      1425          bra.s     doprint_23
                    1426   doprint_22:
08000B0C  206E 000C 1427          move.l    12(A6),A0
08000B10  2242      1428          move.l    D2,A1
08000B12  5282      1429          addq.l    #1,D2
08000B14  1290      1430          move.b    (A0),(A1)
08000B16  2042      1431          move.l    D2,A0
08000B18  4210      1432          clr.b     (A0)
                    1433   doprint_23:
08000B1A  2F03      1434          move.l    D3,-(A7)
08000B1C  4EB9 0800 1435          jsr       _strlen
08000B20  106A      
08000B22  584F      1436          addq.w    #4,A7
08000B24  1800      1437          move.b    D0,D4
08000B26  206E 000C 1438          move.l    12(A6),A0
08000B2A  1010      1439          move.b    (A0),D0
08000B2C  0C00 0073 1440          cmp.b     #115,D0
08000B30  661C      1441          bne.s     doprint_48
08000B32  0C85 0000 1442          cmp.l     #0,D5
08000B36  0000      
08000B38  6D14      1443          blt.s     doprint_48
08000B3A  4884      1444          ext.w     D4
08000B3C  48C4      1445          ext.l     D4
08000B3E  B885      1446          cmp.l     D5,D4
08000B40  6F04      1447          ble.s     doprint_50
08000B42  2005      1448          move.l    D5,D0
08000B44  6006      1449          bra.s     doprint_51
                    1450   doprint_50:
08000B46  1004      1451          move.b    D4,D0
08000B48  4880      1452          ext.w     D0
08000B4A  48C0      1453          ext.l     D0
                    1454   doprint_51:
08000B4C  1800      1455          move.b    D0,D4
                    1456   doprint_48:
08000B4E  206E 000C 1457          move.l    12(A6),A0
08000B52  1010      1458          move.b    (A0),D0
08000B54  0C00 0058 1459          cmp.b     #88,D0
08000B58  6600 0028 1460          bne       doprint_56
08000B5C  41EE FFDC 1461          lea       -36(A6),A0
08000B60  2408      1462          move.l    A0,D2
                    1463   doprint_54:
08000B62  2042      1464          move.l    D2,A0
08000B64  4A10      1465          tst.b     (A0)
08000B66  671A      1466          beq.s     doprint_56
08000B68  2042      1467          move.l    D2,A0
08000B6A  1210      1468          move.b    (A0),D1
08000B6C  4881      1469          ext.w     D1
08000B6E  48C1      1470          ext.l     D1
08000B70  2F01      1471          move.l    D1,-(A7)
08000B72  4EB9 0800 1472          jsr       _toupper
08000B76  10AC      
08000B78  584F      1473          addq.w    #4,A7
08000B7A  2042      1474          move.l    D2,A0
08000B7C  1080      1475          move.b    D0,(A0)
08000B7E  5282      1476          addq.l    #1,D2
08000B80  60E0      1477          bra       doprint_54
                    1478   doprint_56:
08000B82  7E00      1479          moveq     #0,D7
08000B84  41EE FFD4 1480          lea       -44(A6),A0
08000B88  2408      1481          move.l    A0,D2
08000B8A  206E 000C 1482          move.l    12(A6),A0
08000B8E  1010      1483          move.b    (A0),D0
08000B90  0C00 0064 1484          cmp.b     #100,D0
08000B94  670E      1485          beq.s     doprint_59
08000B96  206E 000C 1486          move.l    12(A6),A0
08000B9A  1010      1487          move.b    (A0),D0
08000B9C  0C00 0069 1488          cmp.b     #105,D0
08000BA0  6600 0068 1489          bne       doprint_65
                    1490   doprint_59:
08000BA4  102E FFCE 1491          move.b    -50(A6),D0
08000BA8  4880      1492          ext.w     D0
08000BAA  48C0      1493          ext.l     D0
08000BAC  4A80      1494          tst.l     D0
08000BAE  660C      1495          bne.s     doprint_62
08000BB0  2043      1496          move.l    D3,A0
08000BB2  1010      1497          move.b    (A0),D0
08000BB4  0C00 002D 1498          cmp.b     #45,D0
08000BB8  6600 0028 1499          bne       doprint_60
                    1500   doprint_62:
08000BBC  2043      1501          move.l    D3,A0
08000BBE  1010      1502          move.b    (A0),D0
08000BC0  0C00 002D 1503          cmp.b     #45,D0
08000BC4  660E      1504          bne.s     doprint_63
08000BC6  2043      1505          move.l    D3,A0
08000BC8  5283      1506          addq.l    #1,D3
08000BCA  2242      1507          move.l    D2,A1
08000BCC  5282      1508          addq.l    #1,D2
08000BCE  1290      1509          move.b    (A0),(A1)
08000BD0  5304      1510          subq.b    #1,D4
08000BD2  6008      1511          bra.s     doprint_64
                    1512   doprint_63:
08000BD4  2042      1513          move.l    D2,A0
08000BD6  5282      1514          addq.l    #1,D2
08000BD8  10BC 002B 1515          move.b    #43,(A0)
                    1516   doprint_64:
08000BDC  5287      1517          addq.l    #1,D7
08000BDE  6000 002A 1518          bra       doprint_65
                    1519   doprint_60:
08000BE2  4A2E FFCF 1520          tst.b     -49(A6)
08000BE6  6722      1521          beq.s     doprint_65
08000BE8  2043      1522          move.l    D3,A0
08000BEA  1010      1523          move.b    (A0),D0
08000BEC  0C00 002D 1524          cmp.b     #45,D0
08000BF0  660E      1525          bne.s     doprint_67
08000BF2  2043      1526          move.l    D3,A0
08000BF4  5283      1527          addq.l    #1,D3
08000BF6  2242      1528          move.l    D2,A1
08000BF8  5282      1529          addq.l    #1,D2
08000BFA  1290      1530          move.b    (A0),(A1)
08000BFC  5304      1531          subq.b    #1,D4
08000BFE  6008      1532          bra.s     doprint_68
                    1533   doprint_67:
08000C00  2042      1534          move.l    D2,A0
08000C02  5282      1535          addq.l    #1,D2
08000C04  10BC 0020 1536          move.b    #32,(A0)
                    1537   doprint_68:
08000C08  5287      1538          addq.l    #1,D7
                    1539   doprint_65:
08000C0A  4A2E FFD0 1540          tst.b     -48(A6)
08000C0E  6700 005A 1541          beq       doprint_77
08000C12  206E 000C 1542          move.l    12(A6),A0
08000C16  1010      1543          move.b    (A0),D0
08000C18  4880      1544          ext.w     D0
08000C1A  48C0      1545          ext.l     D0
08000C1C  0C80 0000 1546          cmp.l     #111,D0
08000C20  006F      
08000C22  671A      1547          beq.s     doprint_73
08000C24  6E0C      1548          bgt.s     doprint_76
08000C26  0C80 0000 1549          cmp.l     #88,D0
08000C2A  0058      
08000C2C  6710      1550          beq.s     doprint_73
08000C2E  6000 003A 1551          bra       doprint_77
                    1552   doprint_76:
08000C32  0C80 0000 1553          cmp.l     #120,D0
08000C36  0078      
08000C38  6704      1554          beq.s     doprint_73
08000C3A  6000 002E 1555          bra       doprint_77
                    1556   doprint_73:
08000C3E  2042      1557          move.l    D2,A0
08000C40  5282      1558          addq.l    #1,D2
08000C42  10BC 0030 1559          move.b    #48,(A0)
08000C46  5287      1560          addq.l    #1,D7
08000C48  206E 000C 1561          move.l    12(A6),A0
08000C4C  1010      1562          move.b    (A0),D0
08000C4E  0C00 0078 1563          cmp.b     #120,D0
08000C52  670C      1564          beq.s     doprint_79
08000C54  206E 000C 1565          move.l    12(A6),A0
08000C58  1010      1566          move.b    (A0),D0
08000C5A  0C00 0058 1567          cmp.b     #88,D0
08000C5E  660A      1568          bne.s     doprint_77
                    1569   doprint_79:
08000C60  2042      1570          move.l    D2,A0
08000C62  5282      1571          addq.l    #1,D2
08000C64  10BC 0078 1572          move.b    #120,(A0)
08000C68  5287      1573          addq.l    #1,D7
                    1574   doprint_77:
08000C6A  2042      1575          move.l    D2,A0
08000C6C  4210      1576          clr.b     (A0)
08000C6E  206E 000C 1577          move.l    12(A6),A0
08000C72  1010      1578          move.b    (A0),D0
08000C74  4880      1579          ext.w     D0
08000C76  48C0      1580          ext.l     D0
08000C78  0C80 0000 1581          cmp.l     #105,D0
08000C7C  0069      
08000C7E  6700 0076 1582          beq       doprint_82
08000C82  6E42      1583          bgt.s     doprint_93
08000C84  0C80 0000 1584          cmp.l     #99,D0
08000C88  0063      
08000C8A  6700 0084 1585          beq       doprint_96
08000C8E  6E1C      1586          bgt.s     doprint_94
08000C90  0C80 0000 1587          cmp.l     #88,D0
08000C94  0058      
08000C96  6700 005E 1588          beq       doprint_82
08000C9A  6E00 0184 1589          bgt       doprint_80
08000C9E  0C80 0000 1590          cmp.l     #69,D0
08000CA2  0045      
08000CA4  6700 0050 1591          beq       doprint_82
08000CA8  6000 0176 1592          bra       doprint_80
                    1593   doprint_94:
08000CAC  0C80 0000 1594          cmp.l     #101,D0
08000CB0  0065      
08000CB2  6700 0042 1595          beq       doprint_82
08000CB6  6E00 0168 1596          bgt       doprint_80
08000CBA  0C80 0000 1597          cmp.l     #100,D0
08000CBE  0064      
08000CC0  6734      1598          beq.s     doprint_82
08000CC2  6000 015C 1599          bra       doprint_80
                    1600   doprint_93:
08000CC6  0C80 0000 1601          cmp.l     #117,D0
08000CCA  0075      
08000CCC  6728      1602          beq.s     doprint_82
08000CCE  6E1A      1603          bgt.s     doprint_95
08000CD0  0C80 0000 1604          cmp.l     #115,D0
08000CD4  0073      
08000CD6  6700 0038 1605          beq       doprint_96
08000CDA  6E00 0144 1606          bgt       doprint_80
08000CDE  0C80 0000 1607          cmp.l     #111,D0
08000CE2  006F      
08000CE4  6710      1608          beq.s     doprint_82
08000CE6  6000 0138 1609          bra       doprint_80
                    1610   doprint_95:
08000CEA  0C80 0000 1611          cmp.l     #120,D0
08000CEE  0078      
08000CF0  6704      1612          beq.s     doprint_82
08000CF2  6000 012C 1613          bra       doprint_80
                    1614   doprint_82:
08000CF6  4A2E FFD2 1615          tst.b     -46(A6)
08000CFA  6714      1616          beq.s     doprint_96
08000CFC  4A2E FFCD 1617          tst.b     -51(A6)
08000D00  660E      1618          bne.s     doprint_96
08000D02  200D      1619          move.l    A5,D0
08000D04  9087      1620          sub.l     D7,D0
08000D06  4884      1621          ext.w     D4
08000D08  48C4      1622          ext.l     D4
08000D0A  9084      1623          sub.l     D4,D0
08000D0C  2D40 FFFC 1624          move.l    D0,-4(A6)
                    1625   doprint_96:
08000D10  202E FFFC 1626          move.l    -4(A6),D0
08000D14  0C80 0000 1627          cmp.l     #0,D0
08000D18  0000      
08000D1A  6C04      1628          bge.s     doprint_98
08000D1C  42AE FFFC 1629          clr.l     -4(A6)
                    1630   doprint_98:
08000D20  4A2E FFCD 1631          tst.b     -51(A6)
08000D24  6600 0030 1632          bne       doprint_104
08000D28  1004      1633          move.b    D4,D0
08000D2A  4880      1634          ext.w     D0
08000D2C  48C0      1635          ext.l     D0
08000D2E  D0AE FFFC 1636          add.l     -4(A6),D0
08000D32  D087      1637          add.l     D7,D0
08000D34  1D40 FFD1 1638          move.b    D0,-47(A6)
                    1639   doprint_102:
08000D38  102E FFD1 1640          move.b    -47(A6),D0
08000D3C  4880      1641          ext.w     D0
08000D3E  48C0      1642          ext.l     D0
08000D40  220D      1643          move.l    A5,D1
08000D42  534D      1644          subq.w    #1,A5
08000D44  B081      1645          cmp.l     D1,D0
08000D46  6C0E      1646          bge.s     doprint_104
08000D48  4878 0020 1647          pea       32
08000D4C  2F0A      1648          move.l    A2,-(A7)
08000D4E  4E93      1649          jsr       (A3)
08000D50  504F      1650          addq.w    #8,A7
08000D52  5286      1651          addq.l    #1,D6
08000D54  60E2      1652          bra       doprint_102
                    1653   doprint_104:
08000D56  41EE FFD4 1654          lea       -44(A6),A0
08000D5A  2408      1655          move.l    A0,D2
                    1656   doprint_105:
08000D5C  2042      1657          move.l    D2,A0
08000D5E  4A10      1658          tst.b     (A0)
08000D60  6716      1659          beq.s     doprint_107
08000D62  2042      1660          move.l    D2,A0
08000D64  5282      1661          addq.l    #1,D2
08000D66  1210      1662          move.b    (A0),D1
08000D68  4881      1663          ext.w     D1
08000D6A  48C1      1664          ext.l     D1
08000D6C  2F01      1665          move.l    D1,-(A7)
08000D6E  2F0A      1666          move.l    A2,-(A7)
08000D70  4E93      1667          jsr       (A3)
08000D72  504F      1668          addq.w    #8,A7
08000D74  5286      1669          addq.l    #1,D6
08000D76  60E4      1670          bra       doprint_105
                    1671   doprint_107:
08000D78  202E FFFC 1672          move.l    -4(A6),D0
08000D7C  1D40 FFD1 1673          move.b    D0,-47(A6)
                    1674   doprint_108:
08000D80  102E FFD1 1675          move.b    -47(A6),D0
08000D84  532E FFD1 1676          subq.b    #1,-47(A6)
08000D88  4A00      1677          tst.b     D0
08000D8A  670E      1678          beq.s     doprint_110
08000D8C  4878 0030 1679          pea       48
08000D90  2F0A      1680          move.l    A2,-(A7)
08000D92  4E93      1681          jsr       (A3)
08000D94  504F      1682          addq.w    #8,A7
08000D96  5286      1683          addq.l    #1,D6
08000D98  60E6      1684          bra       doprint_108
                    1685   doprint_110:
08000D9A  2043      1686          move.l    D3,A0
08000D9C  4A10      1687          tst.b     (A0)
08000D9E  6700 0048 1688          beq       doprint_113
08000DA2  206E 000C 1689          move.l    12(A6),A0
08000DA6  1010      1690          move.b    (A0),D0
08000DA8  4880      1691          ext.w     D0
08000DAA  48C0      1692          ext.l     D0
08000DAC  0C80 0000 1693          cmp.l     #115,D0
08000DB0  0073      
08000DB2  670C      1694          beq.s     doprint_116
08000DB4  6E18      1695          bgt.s     doprint_119
08000DB6  0C80 0000 1696          cmp.l     #99,D0
08000DBA  0063      
08000DBC  6702      1697          beq.s     doprint_116
08000DBE  600E      1698          bra.s     doprint_119
                    1699   doprint_116:
08000DC0  2005      1700          move.l    D5,D0
08000DC2  5385      1701          subq.l    #1,D5
08000DC4  0C80 0000 1702          cmp.l     #0,D0
08000DC8  0000      
08000DCA  6E02      1703          bgt.s     doprint_119
08000DCC  6016      1704          bra.s     doprint_115
                    1705   doprint_119:
08000DCE  2043      1706          move.l    D3,A0
08000DD0  5283      1707          addq.l    #1,D3
08000DD2  1210      1708          move.b    (A0),D1
08000DD4  4881      1709          ext.w     D1
08000DD6  48C1      1710          ext.l     D1
08000DD8  2F01      1711          move.l    D1,-(A7)
08000DDA  2F0A      1712          move.l    A2,-(A7)
08000DDC  4E93      1713          jsr       (A3)
08000DDE  504F      1714          addq.w    #8,A7
08000DE0  5286      1715          addq.l    #1,D6
08000DE2  6002      1716          bra.s     doprint_112
                    1717   doprint_115:
08000DE4  6002      1718          bra.s     doprint_113
                    1719   doprint_112:
08000DE6  60B2      1720          bra       doprint_110
                    1721   doprint_113:
08000DE8  4A2E FFCD 1722          tst.b     -51(A6)
08000DEC  6700 0030 1723          beq       doprint_125
08000DF0  1004      1724          move.b    D4,D0
08000DF2  4880      1725          ext.w     D0
08000DF4  48C0      1726          ext.l     D0
08000DF6  D0AE FFFC 1727          add.l     -4(A6),D0
08000DFA  D087      1728          add.l     D7,D0
08000DFC  1D40 FFD1 1729          move.b    D0,-47(A6)
                    1730   doprint_123:
08000E00  102E FFD1 1731          move.b    -47(A6),D0
08000E04  4880      1732          ext.w     D0
08000E06  48C0      1733          ext.l     D0
08000E08  220D      1734          move.l    A5,D1
08000E0A  534D      1735          subq.w    #1,A5
08000E0C  B081      1736          cmp.l     D1,D0
08000E0E  6C0E      1737          bge.s     doprint_125
08000E10  4878 0020 1738          pea       32
08000E14  2F0A      1739          move.l    A2,-(A7)
08000E16  4E93      1740          jsr       (A3)
08000E18  504F      1741          addq.w    #8,A7
08000E1A  5386      1742          subq.l    #1,D6
08000E1C  60E2      1743          bra       doprint_123
                    1744   doprint_125:
08000E1E  6014      1745          bra.s     doprint_81
                    1746   doprint_80:
08000E20  206E 000C 1747          move.l    12(A6),A0
08000E24  1210      1748          move.b    (A0),D1
08000E26  4881      1749          ext.w     D1
08000E28  48C1      1750          ext.l     D1
08000E2A  2F01      1751          move.l    D1,-(A7)
08000E2C  2F0A      1752          move.l    A2,-(A7)
08000E2E  4E93      1753          jsr       (A3)
08000E30  504F      1754          addq.w    #8,A7
08000E32  5286      1755          addq.l    #1,D6
                    1756   doprint_81:
08000E34  52AE 000C 1757          addq.l    #1,12(A6)
                    1758   doprint_2:
08000E38  6000 FA0A 1759          bra       doprint_1
                    1760   doprint_3:
08000E3C  4A92      1761          tst.l     (A2)
08000E3E  6710      1762          beq.s     doprint_126
08000E40  4201      1763          clr.b     D1
08000E42  C2BC 0000 1764          and.l     #255,D1
08000E46  00FF      
08000E48  2F01      1765          move.l    D1,-(A7)
08000E4A  2F0A      1766          move.l    A2,-(A7)
08000E4C  4E93      1767          jsr       (A3)
08000E4E  504F      1768          addq.w    #8,A7
                    1769   doprint_126:
08000E50  2006      1770          move.l    D6,D0
08000E52  4CDF 3CFC 1771          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000E56  4E5E      1772          unlk      A6
08000E58  4E75      1773          rts
                    1774   @itoa_convert:
08000E5A  4E56 0000 1775          link      A6,#0
08000E5E  48E7 3C00 1776          movem.l   D2/D3/D4/D5,-(A7)
08000E62  242E 0008 1777          move.l    8(A6),D2
08000E66  262E 0010 1778          move.l    16(A6),D3
08000E6A  2A2E 000C 1779          move.l    12(A6),D5
08000E6E  2F05      1780          move.l    D5,-(A7)
08000E70  2F03      1781          move.l    D3,-(A7)
08000E72  4EB9 0800 1782          jsr       ULDIV
08000E76  0674      
08000E78  202F 0004 1783          move.l    4(A7),D0
08000E7C  504F      1784          addq.w    #8,A7
08000E7E  2800      1785          move.l    D0,D4
08000E80  BA83      1786          cmp.l     D3,D5
08000E82  6520      1787          blo.s     @itoa_convert_1
08000E84  2F03      1788          move.l    D3,-(A7)
08000E86  2F05      1789          move.l    D5,-(A7)
08000E88  2F03      1790          move.l    D3,-(A7)
08000E8A  4EB9 0800 1791          jsr       ULDIV
08000E8E  0674      
08000E90  2217      1792          move.l    (A7),D1
08000E92  504F      1793          addq.w    #8,A7
08000E94  2F01      1794          move.l    D1,-(A7)
08000E96  2F02      1795          move.l    D2,-(A7)
08000E98  4EB9 0800 1796          jsr       @itoa_convert
08000E9C  0E5A      
08000E9E  DEFC 000C 1797          add.w     #12,A7
08000EA2  2400      1798          move.l    D0,D2
                    1799   @itoa_convert_1:
08000EA4  0C84 0000 1800          cmp.l     #9,D4
08000EA8  0009      
08000EAA  6E0E      1801          bgt.s     @itoa_convert_3
08000EAC  2004      1802          move.l    D4,D0
08000EAE  7230      1803          moveq     #48,D1
08000EB0  C2BC 0000 1804          and.l     #255,D1
08000EB4  00FF      
08000EB6  D081      1805          add.l     D1,D0
08000EB8  6012      1806          bra.s     @itoa_convert_4
                    1807   @itoa_convert_3:
08000EBA  2004      1808          move.l    D4,D0
08000EBC  7261      1809          moveq     #97,D1
08000EBE  C2BC 0000 1810          and.l     #255,D1
08000EC2  00FF      
08000EC4  D081      1811          add.l     D1,D0
08000EC6  0480 0000 1812          sub.l     #10,D0
08000ECA  000A      
                    1813   @itoa_convert_4:
08000ECC  2042      1814          move.l    D2,A0
08000ECE  1080      1815          move.b    D0,(A0)
08000ED0  2002      1816          move.l    D2,D0
08000ED2  5280      1817          addq.l    #1,D0
08000ED4  4CDF 003C 1818          movem.l   (A7)+,D2/D3/D4/D5
08000ED8  4E5E      1819          unlk      A6
08000EDA  4E75      1820          rts
                    1821   _ltoa:
08000EDC  4E56 0000 1822          link      A6,#0
08000EE0  48E7 3C00 1823          movem.l   D2/D3/D4/D5,-(A7)
08000EE4  242E 0008 1824          move.l    8(A6),D2
08000EE8  262E 000C 1825          move.l    12(A6),D3
08000EEC  2A2E 0010 1826          move.l    16(A6),D5
08000EF0  2803      1827          move.l    D3,D4
08000EF2  0C85 0000 1828          cmp.l     #2,D5
08000EF6  0002      
08000EF8  6D08      1829          blt.s     ltoa_3
08000EFA  0C85 0000 1830          cmp.l     #36,D5
08000EFE  0024      
08000F00  6F06      1831          ble.s     ltoa_1
                    1832   ltoa_3:
08000F02  2003      1833          move.l    D3,D0
08000F04  6000 0056 1834          bra       ltoa_4
                    1835   ltoa_1:
08000F08  0C85 0000 1836          cmp.l     #10,D5
08000F0C  000A      
08000F0E  6600 0034 1837          bne       ltoa_5
08000F12  0C82 0000 1838          cmp.l     #0,D2
08000F16  0000      
08000F18  6C2A      1839          bge.s     ltoa_5
08000F1A  2002      1840          move.l    D2,D0
08000F1C  4480      1841          neg.l     D0
08000F1E  2400      1842          move.l    D0,D2
08000F20  0C82 0000 1843          cmp.l     #0,D2
08000F24  0000      
08000F26  6C14      1844          bge.s     ltoa_7
08000F28  4879 0800 1845          pea       @itoa_1.L
08000F2C  1170      
08000F2E  2F03      1846          move.l    D3,-(A7)
08000F30  4EB9 0800 1847          jsr       _strcpy
08000F34  10C8      
08000F36  504F      1848          addq.w    #8,A7
08000F38  2003      1849          move.l    D3,D0
08000F3A  6020      1850          bra.s     ltoa_4
                    1851   ltoa_7:
08000F3C  2044      1852          move.l    D4,A0
08000F3E  5284      1853          addq.l    #1,D4
08000F40  10BC 002D 1854          move.b    #45,(A0)
                    1855   ltoa_5:
08000F44  2F05      1856          move.l    D5,-(A7)
08000F46  2F02      1857          move.l    D2,-(A7)
08000F48  2F04      1858          move.l    D4,-(A7)
08000F4A  4EB9 0800 1859          jsr       @itoa_convert
08000F4E  0E5A      
08000F50  DEFC 000C 1860          add.w     #12,A7
08000F54  2800      1861          move.l    D0,D4
08000F56  2044      1862          move.l    D4,A0
08000F58  4210      1863          clr.b     (A0)
08000F5A  2003      1864          move.l    D3,D0
                    1865   ltoa_4:
08000F5C  4CDF 003C 1866          movem.l   (A7)+,D2/D3/D4/D5
08000F60  4E5E      1867          unlk      A6
08000F62  4E75      1868          rts
                    1869   _ultoa:
08000F64  4E56 0000 1870          link      A6,#0
08000F68  48E7 3800 1871          movem.l   D2/D3/D4,-(A7)
08000F6C  262E 0010 1872          move.l    16(A6),D3
08000F70  282E 000C 1873          move.l    12(A6),D4
08000F74  2404      1874          move.l    D4,D2
08000F76  0C83 0000 1875          cmp.l     #2,D3
08000F7A  0002      
08000F7C  6D08      1876          blt.s     ultoa_3
08000F7E  0C83 0000 1877          cmp.l     #36,D3
08000F82  0024      
08000F84  6F04      1878          ble.s     ultoa_1
                    1879   ultoa_3:
08000F86  2004      1880          move.l    D4,D0
08000F88  601A      1881          bra.s     ultoa_4
                    1882   ultoa_1:
08000F8A  2F03      1883          move.l    D3,-(A7)
08000F8C  2F2E 0008 1884          move.l    8(A6),-(A7)
08000F90  2F02      1885          move.l    D2,-(A7)
08000F92  4EB9 0800 1886          jsr       @itoa_convert
08000F96  0E5A      
08000F98  DEFC 000C 1887          add.w     #12,A7
08000F9C  2400      1888          move.l    D0,D2
08000F9E  2042      1889          move.l    D2,A0
08000FA0  4210      1890          clr.b     (A0)
08000FA2  2004      1891          move.l    D4,D0
                    1892   ultoa_4:
08000FA4  4CDF 001C 1893          movem.l   (A7)+,D2/D3/D4
08000FA8  4E5E      1894          unlk      A6
08000FAA  4E75      1895          rts
                    1896   _itoa:
08000FAC  4E56 0000 1897          link      A6,#0
08000FB0  2F2E 0010 1898          move.l    16(A6),-(A7)
08000FB4  2F2E 000C 1899          move.l    12(A6),-(A7)
08000FB8  2F2E 0008 1900          move.l    8(A6),-(A7)
08000FBC  4EB9 0800 1901          jsr       _ltoa
08000FC0  0EDC      
08000FC2  DEFC 000C 1902          add.w     #12,A7
08000FC6  4E5E      1903          unlk      A6
08000FC8  4E75      1904          rts
                    1905   ULMUL:
08000FCA  4E56 0000 1906          link    A6,#0
08000FCE  48E7 C000 1907          movem.l D0/D1,-(A7)
08000FD2  222E 0008 1908          move.l  8(A6),D1
08000FD6  202E 000C 1909          move.l  12(A6),D0
08000FDA  602C      1910          bra.s   lmul_3
                    1911   LMUL:
08000FDC  4E56 0000 1912          link    A6,#0
08000FE0  48E7 C000 1913          movem.l D0/D1,-(A7)
08000FE4  222E 0008 1914          move.l  8(A6),D1
08000FE8  202E 000C 1915          move.l  12(A6),D0
08000FEC  4A80      1916          tst.l   D0
08000FEE  6A0A      1917          bpl.s   lmul_1
08000FF0  4480      1918          neg.l   D0
08000FF2  4A81      1919          tst.l   D1
08000FF4  6A0A      1920          bpl.s   lmul_2
08000FF6  4481      1921          neg.l   D1
08000FF8  600E      1922          bra.s   lmul_3
                    1923   lmul_1:
08000FFA  4A81      1924          tst.l   D1
08000FFC  6A0A      1925          bpl.s   lmul_3
08000FFE  4481      1926          neg.l   D1
                    1927   lmul_2:
08001000  6114      1928          bsr.s   domul
08001002  4481      1929          neg.l   D1
08001004  4080      1930          negx.l  D0
08001006  6002      1931          bra.s   lmul_4
                    1932   lmul_3:
08001008  610C      1933          bsr.s   domul
                    1934   lmul_4:
0800100A  2D41 0008 1935          move.l  D1,8(A6)
0800100E  4CDF 0003 1936          movem.l (A7)+,D0/D1
08001012  4E5E      1937          unlk    A6
08001014  4E75      1938          rts
                    1939   domul:
08001016  0C81 0000 1940          cmpi.l  #$FFFF,D1
0800101A  FFFF      
0800101C  620C      1941          bhi.s   domul_1
0800101E  0C80 0000 1942          cmpi.l  #$FFFF,D0
08001022  FFFF      
08001024  620E      1943          bhi.s   domul_2
08001026  C2C0      1944          mulu    D0,D1
08001028  4E75      1945          rts
                    1946   domul_1:
0800102A  0C80 0000 1947          cmpi.l  #$FFFF,D0
0800102E  FFFF      
08001030  6218      1948          bhi.s   domul_4
08001032  6002      1949          bra.s   domul_3
                    1950   domul_2
08001034  C141      1951          exg     D0,D1
                    1952   domul_3:
08001036  2F02      1953          move.l  D2,-(A7)
08001038  2401      1954          move.l  D1,D2
0800103A  4842      1955          swap    D2
0800103C  C2C0      1956          mulu    D0,D1
0800103E  C4C0      1957          mulu    D0,D2
08001040  4842      1958          swap    D2
08001042  4242      1959          clr.w   D2
08001044  D282      1960          add.l   D2,D1
08001046  241F      1961          move.l  (A7)+,D2
08001048  4E75      1962          rts
                    1963   domul_4:
0800104A  48E7 3000 1964          movem.l D2/D3,-(A7)
0800104E  2401      1965          move.l  D1,D2
08001050  2601      1966          move.l  D1,D3
08001052  C2C0      1967          mulu    D0,D1
08001054  4842      1968          swap    D2
08001056  C4C0      1969          mulu    D0,D2
08001058  4840      1970          swap    D0
0800105A  C6C0      1971          mulu    D0,D3
0800105C  D483      1972          add.l   D3,D2
0800105E  4842      1973          swap    D2
08001060  4242      1974          clr.w   D2
08001062  D282      1975          add.l   D2,D1
08001064  4CDF 000C 1976          movem.l (A7)+,D2/D3
08001068  4E75      1977          rts
                    1978   _strlen:
0800106A  206F 0004 1979          move.l    (4,A7),A0
0800106E  2248      1980          move.l    A0,A1
                    1981   strlen_1:
08001070  4A19      1982          tst.b     (A1)+
08001072  66FC      1983          bne       strlen_1
08001074  2009      1984          move.l    A1,D0
08001076  9088      1985          sub.l     A0,D0
08001078  5380      1986          subq.l    #1,D0
0800107A  4E75      1987          rts
                    1988   _putch:
0800107C  4E56 0000 1989          link      A6,#0
08001080  2F02      1990          move.l    D2,-(A7)
08001082  242E 0008 1991          move.l    8(A6),D2
08001086  0C82 0000 1992          cmp.l     #10,D2
0800108A  000A      
0800108C  660C      1993          bne.s     putch_1
0800108E  4878 000D 1994          pea       13
08001092  4EB9 0800 1995          jsr       __putch
08001096  012A      
08001098  584F      1996          addq.w    #4,A7
                    1997   putch_1:
0800109A  2F02      1998          move.l    D2,-(A7)
0800109C  4EB9 0800 1999          jsr       __putch
080010A0  012A      
080010A2  584F      2000          addq.w    #4,A7
080010A4  2002      2001          move.l    D2,D0
080010A6  241F      2002          move.l    (A7)+,D2
080010A8  4E5E      2003          unlk      A6
080010AA  4E75      2004          rts
                    2005   _toupper:
080010AC  202F 0004 2006          move.l    4(A7),D0
080010B0  0C80 0000 2007          cmp.l     #'a',D0
080010B4  0061      
080010B6  6D0E      2008          blt.s     toupper_1
080010B8  0C80 0000 2009          cmp.l     #'z',D0
080010BC  007A      
080010BE  6E06      2010          bgt.s     toupper_1
080010C0  0480 0000 2011          sub.l     #$20,D0
080010C4  0020      
                    2012   toupper_1:
080010C6  4E75      2013          rts
                    2014   _strcpy:
080010C8  206F 0004 2015          move.l    (4,A7),A0
080010CC  226F 0008 2016          move.l    (8,A7),A1
080010D0  2008      2017          move.l    A0,D0
                    2018   strcpy_1:
080010D2  10D9      2019          move.b    (A1)+,(A0)+
080010D4  66FC      2020          bne.s     strcpy_1
080010D6  4E75      2021          rts
                    2022          section   const
080010D8            2023                   align
                    2024   
                    2025   
                    2026   @m68kus~1_1:
080010D8  0A53 6C69 2027          dc.b      10,83,108,105,100,101,114,32,115,119,105,116
080010DC  6465 7220 
080010E0  7377 6974 
080010E4  6368 733A 2028          dc.b      99,104,115,58,32,37,48,50,88,10,0
080010E8  2025 3032 
080010EC  580A 00   
                    2029   @m68kus~1_2:
080010F0  0A41 4443 2030          dc.b      10,65,68,67,32,114,101,97,100,105,110,103,58
080010F4  2072 6561 
080010F8  6469 6E67 
080010FC  3A        
080010FD  2025 640A 2031          dc.b      32,37,100,10,0
08001101  00        
                    2032   @m68kus~1_3:
08001102  0A6C 6967 2033          dc.b      10,108,105,103,104,116,32,115,101,110,115,111
08001106  6874 2073 
0800110A  656E 736F 
0800110E  7220 7265 2034          dc.b      114,32,114,101,97,100,105,110,103,58,32,37,100
08001112  6164 696E 
08001116  673A 2025 
0800111A  64        
0800111B  0A00      2035          dc.b      10,0
                    2036   @m68kus~1_4:
0800111E  0A54 6865 2037          dc.b      10,84,104,101,114,109,105,115,116,101,114,32
08001122  726D 6973 
08001126  7465 7220 
0800112A  7265 6164 2038          dc.b      114,101,97,100,105,110,103,58,32,37,100,10,0
0800112E  696E 673A 
08001132  2025 640A 
08001136  00        
                    2039   @m68kus~1_5:
08001138  0D52 6563 2040          dc.b      13,82,101,99,101,105,118,105,110,103,46,46,46
0800113C  6569 7669 
08001140  6E67 2E2E 
08001144  2E        
08001145  00        2041          dc.b      0
                    2042   @dac_ad~1_1:
08001146  0D0A 4D75 2043          dc.b      13,10,77,117,115,116,32,115,101,108,101,99,116
0800114A  7374 2073 
0800114E  656C 6563 
08001152  74        
08001153  2041 4443 2044          dc.b      32,65,68,67,32,99,104,97,110,110,101,108,32
08001157  2063 6861 
0800115B  6E6E 656C 
0800115F  20        
08001160  6265 7477 2045          dc.b      98,101,116,119,101,101,110,32,48,32,97,110,100
08001164  6565 6E20 
08001168  3020 616E 
0800116C  64        
0800116D  2033 00   2046          dc.b      32,51,0
                    2047   @itoa_1:
08001170  2D32 3134 2048          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
08001174  3734 3833 
08001178  3634 3800 
                    2049   __ctype:
0800117C  0040 4040 2050          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
08001180  4040 4040 
08001184  4040 5050 
08001188  5050 50   
0800118B  4040 4040 2051          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
0800118F  4040 4040 
08001193  4040 4040 
08001197  4040 40   
0800119A  4040 40D0 2052          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
0800119E  A0A0 A0A0 
080011A2  A0A0 A0A0 
080011A6  A0A0 A0A0 2053          dc.b      160,160,160,160,160,160,160,140,140,140,140
080011AA  A0A0 A08C 
080011AE  8C8C 8C   
080011B1  8C8C 8C8C 2054          dc.b      140,140,140,140,140,140,160,160,160,160,160
080011B5  8C8C A0A0 
080011B9  A0A0 A0   
080011BC  A0A0 8A8A 2055          dc.b      160,160,138,138,138,138,138,138,130,130,130
080011C0  8A8A 8A8A 
080011C4  8282 82   
080011C7  8282 8282 2056          dc.b      130,130,130,130,130,130,130,130,130,130,130
080011CB  8282 8282 
080011CF  8282 82   
080011D2  8282 8282 2057          dc.b      130,130,130,130,130,130,160,160,160,160,160
080011D6  8282 A0A0 
080011DA  A0A0 A0   
080011DD  A089 8989 2058          dc.b      160,137,137,137,137,137,137,129,129,129,129
080011E1  8989 8981 
080011E5  8181 81   
080011E8  8181 8181 2059          dc.b      129,129,129,129,129,129,129,129,129,129,129
080011EC  8181 8181 
080011F0  8181 81   
080011F3  8181 8181 2060          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
080011F7  81A0 A0A0 
080011FB  A040 0000 
080011FF  00        
08001200  0000 0000 2061          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001204  0000 0000 
08001208  0000 0000 
0800120C  0000 0000 
08001210  0000 0000 
08001214  0000      
08001216  0000 0000 2062          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800121A  0000 0000 
0800121E  0000 0000 
08001222  0000 0000 
08001226  0000 0000 
0800122A  0000      
0800122C  0000 0000 2063          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001230  0000 0000 
08001234  0000 0000 
08001238  0000 0000 
0800123C  0000 0000 
08001240  0000      
08001242  0000 0000 2064          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001246  0000 0000 
0800124A  0000 0000 
0800124E  0000 0000 
08001252  0000 0000 
08001256  0000      
08001258  0000 0000 2065          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800125C  0000 0000 
08001260  0000 0000 
08001264  0000 0000 
08001268  0000 0000 
0800126C  0000      
0800126E  0000 0000 2066          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001272  0000 0000 
08001276  0000 0000 
0800127A  0000 00   
                    2067          section   data
0800127E            2068                   align
                    2069   
                    2070   *********************************************************************************************************************************************************
                    2071   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    2072   ********************************************************************************************************************************************************
                    2073   
          0800 127E 2074   DataStart       equ       *
0800127E            2075   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
08001282            2076   __allocp:       ds.l      1                    start of free memory block list
08001286            2077   __heap:         ds.l      1                    begin of free memory
                    2078   
                    2079   
                    2080          section   bss
0800128A            2081                   align
                    2082   
          0800 128A 2083   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 000C 2084   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    2085   
                    2086   *********************************************************************************************************
                    2087   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    2088   *********************************************************************************************************
          0800 128A 2089   BssStart       equ       *
                    2090   
                    2091   _i:
0800128A            2092          ds.b      4
                    2093   _x:
0800128E            2094          ds.b      4
                    2095   _y:
08001292            2096          ds.b      4
                    2097   _z:
08001296            2098          ds.b      4
                    2099   _PortA_Count:
0800129A            2100          ds.b      4
                    2101   _Timer1Count:
0800129E            2102          ds.b      1
                    2103   _Timer2Count:
080012A0            2104          ds.b      1
                    2105   _Timer3Count:
080012A2            2106          ds.b      1
                    2107   _Timer4Count:
080012A4            2108          ds.b      1
                    2109   _IRQ1:
080012A6            2110          ds.b      4
                    2111   _IRQ2:
080012AA            2112          ds.b      4
                    2113   _IRQ3:
080012AE            2114          ds.b      4
                    2115   _IRQ4:
080012B2            2116          ds.b      4
                    2117   _IRQ4_COUNT:
080012B6            2118          ds.b      4
                    2119          section   heap
080012BA            2120                  align
                    2121   
          0800 12BA 2122   BssEnd         equ       *
          0000 0030 2123   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    2124   
                    2125   *********************************************************************************************************
                    2126   * Section for Heap
                    2127   *********************************************************************************************************
                    2128   
          0800 12BA 2129   heap           equ       *
080012BA            2130                  align
          0800 0000

Assembly errors: 0
