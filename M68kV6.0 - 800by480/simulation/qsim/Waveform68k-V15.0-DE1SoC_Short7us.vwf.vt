// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2020 11:50:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MC68K
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MC68K_vlg_sample_tst(
	Can0_RX,
	Can1_RX,
	CLOCK_50,
	DRAM_DQ,
	IRQ2_L,
	IRQ4_L,
	miso_i,
	Reset_L,
	RS232_RxData,
	SCL,
	SDA,
	SW,
	TraceRequest_L,
	sampler_tx
);
input  Can0_RX;
input  Can1_RX;
input  CLOCK_50;
input [15:0] DRAM_DQ;
input  IRQ2_L;
input  IRQ4_L;
input  miso_i;
input  Reset_L;
input  RS232_RxData;
input  SCL;
input  SDA;
input [9:0] SW;
input  TraceRequest_L;
output sampler_tx;

reg sample;
time current_time;
always @(Can0_RX or Can1_RX or CLOCK_50 or DRAM_DQ or IRQ2_L or IRQ4_L or miso_i or Reset_L or RS232_RxData or SCL or SDA or SW or TraceRequest_L)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MC68K_vlg_check_tst (
	AddressBus,
	AS_L,
	BG_L,
	Can0_TX,
	Can1_TX,
	CanBusSelect_H,
	CPUClock,
	DataBusIn,
	DataBusOut,
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_LDQM,
	DRAM_RAS_N,
	DRAM_UDQM,
	DRAM_WE_N,
	DramDtack_L,
	DramRamSelect_H,
	Dtack_L,
	GraphicsSelect_L,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	IOSelect_H,
	LCD_Contrast_DE1,
	LCD_Data,
	LCD_E,
	LCD_RS,
	LCD_RW,
	LDS_L,
	LEDR,
	mosi_o,
	RamSelect_H,
	ResetOut,
	RomSelect_H,
	RS232_TxData,
	RW,
	sck_o,
	SCL,
	SDA,
	SSN_O,
	UDS_L,
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC_N,
	VGA_VS,
	sampler_rx
);
input [31:0] AddressBus;
input  AS_L;
input  BG_L;
input  Can0_TX;
input  Can1_TX;
input  CanBusSelect_H;
input  CPUClock;
input [15:0] DataBusIn;
input [15:0] DataBusOut;
input [12:0] DRAM_ADDR;
input [1:0] DRAM_BA;
input  DRAM_CAS_N;
input  DRAM_CKE;
input  DRAM_CLK;
input  DRAM_CS_N;
input [15:0] DRAM_DQ;
input  DRAM_LDQM;
input  DRAM_RAS_N;
input  DRAM_UDQM;
input  DRAM_WE_N;
input  DramDtack_L;
input  DramRamSelect_H;
input  Dtack_L;
input  GraphicsSelect_L;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input  IOSelect_H;
input  LCD_Contrast_DE1;
input [7:0] LCD_Data;
input  LCD_E;
input  LCD_RS;
input  LCD_RW;
input  LDS_L;
input [9:0] LEDR;
input  mosi_o;
input  RamSelect_H;
input  ResetOut;
input  RomSelect_H;
input  RS232_TxData;
input  RW;
input  sck_o;
input  SCL;
input  SDA;
input [0:0] SSN_O;
input  UDS_L;
input [7:0] VGA_B;
input  VGA_BLANK_N;
input  VGA_CLK;
input [7:0] VGA_G;
input  VGA_HS;
input [7:0] VGA_R;
input  VGA_SYNC_N;
input  VGA_VS;
input sampler_rx;

reg [31:0] AddressBus_expected;
reg  AS_L_expected;
reg  BG_L_expected;
reg  Can0_TX_expected;
reg  Can1_TX_expected;
reg  CanBusSelect_H_expected;
reg  CPUClock_expected;
reg [15:0] DataBusIn_expected;
reg [15:0] DataBusOut_expected;
reg [12:0] DRAM_ADDR_expected;
reg [1:0] DRAM_BA_expected;
reg  DRAM_CAS_N_expected;
reg  DRAM_CKE_expected;
reg  DRAM_CLK_expected;
reg  DRAM_CS_N_expected;
reg [15:0] DRAM_DQ_expected;
reg  DRAM_LDQM_expected;
reg  DRAM_RAS_N_expected;
reg  DRAM_UDQM_expected;
reg  DRAM_WE_N_expected;
reg  DramDtack_L_expected;
reg  DramRamSelect_H_expected;
reg  Dtack_L_expected;
reg  GraphicsSelect_L_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg  IOSelect_H_expected;
reg  LCD_Contrast_DE1_expected;
reg [7:0] LCD_Data_expected;
reg  LCD_E_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg  LDS_L_expected;
reg [9:0] LEDR_expected;
reg  mosi_o_expected;
reg  RamSelect_H_expected;
reg  ResetOut_expected;
reg  RomSelect_H_expected;
reg  RS232_TxData_expected;
reg  RW_expected;
reg  sck_o_expected;
reg  SCL_expected;
reg  SDA_expected;
reg [0:0] SSN_O_expected;
reg  UDS_L_expected;
reg [7:0] VGA_B_expected;
reg  VGA_BLANK_N_expected;
reg  VGA_CLK_expected;
reg [7:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [7:0] VGA_R_expected;
reg  VGA_SYNC_N_expected;
reg  VGA_VS_expected;

reg [31:0] AddressBus_prev;
reg  AS_L_prev;
reg  BG_L_prev;
reg  Can0_TX_prev;
reg  Can1_TX_prev;
reg  CanBusSelect_H_prev;
reg  CPUClock_prev;
reg [15:0] DataBusIn_prev;
reg [15:0] DataBusOut_prev;
reg [12:0] DRAM_ADDR_prev;
reg [1:0] DRAM_BA_prev;
reg  DRAM_CAS_N_prev;
reg  DRAM_CKE_prev;
reg  DRAM_CLK_prev;
reg  DRAM_CS_N_prev;
reg [15:0] DRAM_DQ_prev;
reg  DRAM_LDQM_prev;
reg  DRAM_RAS_N_prev;
reg  DRAM_UDQM_prev;
reg  DRAM_WE_N_prev;
reg  DramDtack_L_prev;
reg  DramRamSelect_H_prev;
reg  Dtack_L_prev;
reg  GraphicsSelect_L_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg  IOSelect_H_prev;
reg  LCD_Contrast_DE1_prev;
reg [7:0] LCD_Data_prev;
reg  LCD_E_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg  LDS_L_prev;
reg [9:0] LEDR_prev;
reg  mosi_o_prev;
reg  RamSelect_H_prev;
reg  ResetOut_prev;
reg  RomSelect_H_prev;
reg  RS232_TxData_prev;
reg  RW_prev;
reg  sck_o_prev;
reg  SCL_prev;
reg  SDA_prev;
reg [0:0] SSN_O_prev;
reg  UDS_L_prev;
reg [7:0] VGA_B_prev;
reg  VGA_BLANK_N_prev;
reg  VGA_CLK_prev;
reg [7:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [7:0] VGA_R_prev;
reg  VGA_SYNC_N_prev;
reg  VGA_VS_prev;

reg [31:0] AddressBus_expected_prev;
reg  AS_L_expected_prev;
reg  CPUClock_expected_prev;
reg [15:0] DataBusIn_expected_prev;
reg [15:0] DataBusOut_expected_prev;
reg [12:0] DRAM_ADDR_expected_prev;
reg [1:0] DRAM_BA_expected_prev;
reg  DRAM_CAS_N_expected_prev;
reg  DRAM_CKE_expected_prev;
reg  DRAM_CLK_expected_prev;
reg  DRAM_CS_N_expected_prev;
reg  DRAM_LDQM_expected_prev;
reg  DRAM_RAS_N_expected_prev;
reg  DRAM_UDQM_expected_prev;
reg  DRAM_WE_N_expected_prev;
reg  DramDtack_L_expected_prev;
reg  Dtack_L_expected_prev;
reg  LDS_L_expected_prev;
reg  ResetOut_expected_prev;
reg  RW_expected_prev;
reg  UDS_L_expected_prev;

reg [31:0] last_AddressBus_exp;
reg  last_AS_L_exp;
reg  last_CPUClock_exp;
reg [15:0] last_DataBusIn_exp;
reg [15:0] last_DataBusOut_exp;
reg [12:0] last_DRAM_ADDR_exp;
reg [1:0] last_DRAM_BA_exp;
reg  last_DRAM_CAS_N_exp;
reg  last_DRAM_CKE_exp;
reg  last_DRAM_CLK_exp;
reg  last_DRAM_CS_N_exp;
reg  last_DRAM_LDQM_exp;
reg  last_DRAM_RAS_N_exp;
reg  last_DRAM_UDQM_exp;
reg  last_DRAM_WE_N_exp;
reg  last_DramDtack_L_exp;
reg  last_Dtack_L_exp;
reg  last_LDS_L_exp;
reg  last_ResetOut_exp;
reg  last_RW_exp;
reg  last_UDS_L_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:57] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 57'b1;
end

// update real /o prevs

always @(trigger)
begin
	AddressBus_prev = AddressBus;
	AS_L_prev = AS_L;
	BG_L_prev = BG_L;
	Can0_TX_prev = Can0_TX;
	Can1_TX_prev = Can1_TX;
	CanBusSelect_H_prev = CanBusSelect_H;
	CPUClock_prev = CPUClock;
	DataBusIn_prev = DataBusIn;
	DataBusOut_prev = DataBusOut;
	DRAM_ADDR_prev = DRAM_ADDR;
	DRAM_BA_prev = DRAM_BA;
	DRAM_CAS_N_prev = DRAM_CAS_N;
	DRAM_CKE_prev = DRAM_CKE;
	DRAM_CLK_prev = DRAM_CLK;
	DRAM_CS_N_prev = DRAM_CS_N;
	DRAM_DQ_prev = DRAM_DQ;
	DRAM_LDQM_prev = DRAM_LDQM;
	DRAM_RAS_N_prev = DRAM_RAS_N;
	DRAM_UDQM_prev = DRAM_UDQM;
	DRAM_WE_N_prev = DRAM_WE_N;
	DramDtack_L_prev = DramDtack_L;
	DramRamSelect_H_prev = DramRamSelect_H;
	Dtack_L_prev = Dtack_L;
	GraphicsSelect_L_prev = GraphicsSelect_L;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	IOSelect_H_prev = IOSelect_H;
	LCD_Contrast_DE1_prev = LCD_Contrast_DE1;
	LCD_Data_prev = LCD_Data;
	LCD_E_prev = LCD_E;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	LDS_L_prev = LDS_L;
	LEDR_prev = LEDR;
	mosi_o_prev = mosi_o;
	RamSelect_H_prev = RamSelect_H;
	ResetOut_prev = ResetOut;
	RomSelect_H_prev = RomSelect_H;
	RS232_TxData_prev = RS232_TxData;
	RW_prev = RW;
	sck_o_prev = sck_o;
	SCL_prev = SCL;
	SDA_prev = SDA;
	SSN_O_prev = SSN_O;
	UDS_L_prev = UDS_L;
	VGA_B_prev = VGA_B;
	VGA_BLANK_N_prev = VGA_BLANK_N;
	VGA_CLK_prev = VGA_CLK;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	VGA_R_prev = VGA_R;
	VGA_SYNC_N_prev = VGA_SYNC_N;
	VGA_VS_prev = VGA_VS;
end

// update expected /o prevs

always @(trigger)
begin
	AddressBus_expected_prev = AddressBus_expected;
	AS_L_expected_prev = AS_L_expected;
	CPUClock_expected_prev = CPUClock_expected;
	DataBusIn_expected_prev = DataBusIn_expected;
	DataBusOut_expected_prev = DataBusOut_expected;
	DRAM_ADDR_expected_prev = DRAM_ADDR_expected;
	DRAM_BA_expected_prev = DRAM_BA_expected;
	DRAM_CAS_N_expected_prev = DRAM_CAS_N_expected;
	DRAM_CKE_expected_prev = DRAM_CKE_expected;
	DRAM_CLK_expected_prev = DRAM_CLK_expected;
	DRAM_CS_N_expected_prev = DRAM_CS_N_expected;
	DRAM_LDQM_expected_prev = DRAM_LDQM_expected;
	DRAM_RAS_N_expected_prev = DRAM_RAS_N_expected;
	DRAM_UDQM_expected_prev = DRAM_UDQM_expected;
	DRAM_WE_N_expected_prev = DRAM_WE_N_expected;
	DramDtack_L_expected_prev = DramDtack_L_expected;
	Dtack_L_expected_prev = Dtack_L_expected;
	LDS_L_expected_prev = LDS_L_expected;
	ResetOut_expected_prev = ResetOut_expected;
	RW_expected_prev = RW_expected;
	UDS_L_expected_prev = UDS_L_expected;
end



// expected ResetOut
initial
begin
	ResetOut_expected = 1'b0;
end 

// expected CPUClock
initial
begin
	CPUClock_expected = 1'b0;
end 
// expected AddressBus[ 31 ]
initial
begin
	AddressBus_expected[31] = 1'b0;
end 
// expected AddressBus[ 30 ]
initial
begin
	AddressBus_expected[30] = 1'b0;
end 
// expected AddressBus[ 29 ]
initial
begin
	AddressBus_expected[29] = 1'b0;
end 
// expected AddressBus[ 28 ]
initial
begin
	AddressBus_expected[28] = 1'b0;
end 
// expected AddressBus[ 27 ]
initial
begin
	AddressBus_expected[27] = 1'b0;
end 
// expected AddressBus[ 26 ]
initial
begin
	AddressBus_expected[26] = 1'b0;
end 
// expected AddressBus[ 25 ]
initial
begin
	AddressBus_expected[25] = 1'b0;
end 
// expected AddressBus[ 24 ]
initial
begin
	AddressBus_expected[24] = 1'b0;
end 
// expected AddressBus[ 23 ]
initial
begin
	AddressBus_expected[23] = 1'b0;
end 
// expected AddressBus[ 22 ]
initial
begin
	AddressBus_expected[22] = 1'b0;
end 
// expected AddressBus[ 21 ]
initial
begin
	AddressBus_expected[21] = 1'b0;
end 
// expected AddressBus[ 20 ]
initial
begin
	AddressBus_expected[20] = 1'b0;
end 
// expected AddressBus[ 19 ]
initial
begin
	AddressBus_expected[19] = 1'b0;
end 
// expected AddressBus[ 18 ]
initial
begin
	AddressBus_expected[18] = 1'b0;
end 
// expected AddressBus[ 17 ]
initial
begin
	AddressBus_expected[17] = 1'b0;
end 
// expected AddressBus[ 16 ]
initial
begin
	AddressBus_expected[16] = 1'b0;
end 
// expected AddressBus[ 15 ]
initial
begin
	AddressBus_expected[15] = 1'b0;
end 
// expected AddressBus[ 14 ]
initial
begin
	AddressBus_expected[14] = 1'b0;
end 
// expected AddressBus[ 13 ]
initial
begin
	AddressBus_expected[13] = 1'b0;
end 
// expected AddressBus[ 12 ]
initial
begin
	AddressBus_expected[12] = 1'b0;
end 
// expected AddressBus[ 11 ]
initial
begin
	AddressBus_expected[11] = 1'b0;
end 
// expected AddressBus[ 10 ]
initial
begin
	AddressBus_expected[10] = 1'b0;
end 
// expected AddressBus[ 9 ]
initial
begin
	AddressBus_expected[9] = 1'b0;
end 
// expected AddressBus[ 8 ]
initial
begin
	AddressBus_expected[8] = 1'b0;
end 
// expected AddressBus[ 7 ]
initial
begin
	AddressBus_expected[7] = 1'b0;
end 
// expected AddressBus[ 6 ]
initial
begin
	AddressBus_expected[6] = 1'b0;
end 
// expected AddressBus[ 5 ]
initial
begin
	AddressBus_expected[5] = 1'b0;
end 
// expected AddressBus[ 4 ]
initial
begin
	AddressBus_expected[4] = 1'b0;
end 
// expected AddressBus[ 3 ]
initial
begin
	AddressBus_expected[3] = 1'b0;
end 
// expected AddressBus[ 2 ]
initial
begin
	AddressBus_expected[2] = 1'b0;
end 
// expected AddressBus[ 1 ]
initial
begin
	AddressBus_expected[1] = 1'b0;
end 
// expected AddressBus[ 0 ]
initial
begin
	AddressBus_expected[0] = 1'b0;
end 
// expected DataBusIn[ 15 ]
initial
begin
	DataBusIn_expected[15] = 1'b0;
end 
// expected DataBusIn[ 14 ]
initial
begin
	DataBusIn_expected[14] = 1'b0;
end 
// expected DataBusIn[ 13 ]
initial
begin
	DataBusIn_expected[13] = 1'b0;
end 
// expected DataBusIn[ 12 ]
initial
begin
	DataBusIn_expected[12] = 1'b0;
end 
// expected DataBusIn[ 11 ]
initial
begin
	DataBusIn_expected[11] = 1'b0;
end 
// expected DataBusIn[ 10 ]
initial
begin
	DataBusIn_expected[10] = 1'b0;
end 
// expected DataBusIn[ 9 ]
initial
begin
	DataBusIn_expected[9] = 1'b0;
end 
// expected DataBusIn[ 8 ]
initial
begin
	DataBusIn_expected[8] = 1'b0;
end 
// expected DataBusIn[ 7 ]
initial
begin
	DataBusIn_expected[7] = 1'b0;
end 
// expected DataBusIn[ 6 ]
initial
begin
	DataBusIn_expected[6] = 1'b0;
end 
// expected DataBusIn[ 5 ]
initial
begin
	DataBusIn_expected[5] = 1'b0;
end 
// expected DataBusIn[ 4 ]
initial
begin
	DataBusIn_expected[4] = 1'b0;
end 
// expected DataBusIn[ 3 ]
initial
begin
	DataBusIn_expected[3] = 1'b0;
end 
// expected DataBusIn[ 2 ]
initial
begin
	DataBusIn_expected[2] = 1'b0;
end 
// expected DataBusIn[ 1 ]
initial
begin
	DataBusIn_expected[1] = 1'b0;
end 
// expected DataBusIn[ 0 ]
initial
begin
	DataBusIn_expected[0] = 1'b0;
end 
// expected DataBusOut[ 15 ]
initial
begin
	DataBusOut_expected[15] = 1'bX;
end 
// expected DataBusOut[ 14 ]
initial
begin
	DataBusOut_expected[14] = 1'bX;
end 
// expected DataBusOut[ 13 ]
initial
begin
	DataBusOut_expected[13] = 1'bX;
end 
// expected DataBusOut[ 12 ]
initial
begin
	DataBusOut_expected[12] = 1'bX;
end 
// expected DataBusOut[ 11 ]
initial
begin
	DataBusOut_expected[11] = 1'bX;
end 
// expected DataBusOut[ 10 ]
initial
begin
	DataBusOut_expected[10] = 1'bX;
end 
// expected DataBusOut[ 9 ]
initial
begin
	DataBusOut_expected[9] = 1'bX;
end 
// expected DataBusOut[ 8 ]
initial
begin
	DataBusOut_expected[8] = 1'bX;
end 
// expected DataBusOut[ 7 ]
initial
begin
	DataBusOut_expected[7] = 1'bX;
end 
// expected DataBusOut[ 6 ]
initial
begin
	DataBusOut_expected[6] = 1'bX;
end 
// expected DataBusOut[ 5 ]
initial
begin
	DataBusOut_expected[5] = 1'bX;
end 
// expected DataBusOut[ 4 ]
initial
begin
	DataBusOut_expected[4] = 1'bX;
end 
// expected DataBusOut[ 3 ]
initial
begin
	DataBusOut_expected[3] = 1'bX;
end 
// expected DataBusOut[ 2 ]
initial
begin
	DataBusOut_expected[2] = 1'bX;
end 
// expected DataBusOut[ 1 ]
initial
begin
	DataBusOut_expected[1] = 1'bX;
end 
// expected DataBusOut[ 0 ]
initial
begin
	DataBusOut_expected[0] = 1'bX;
end 

// expected AS_L
initial
begin
	AS_L_expected = 1'b0;
end 

// expected LDS_L
initial
begin
	LDS_L_expected = 1'b0;
end 

// expected UDS_L
initial
begin
	UDS_L_expected = 1'b0;
end 

// expected RW
initial
begin
	RW_expected = 1'bX;
end 

// expected Dtack_L
initial
begin
	Dtack_L_expected = 1'b0;
end 

// expected DRAM_CLK
initial
begin
	DRAM_CLK_expected = 1'b0;
end 
// expected DRAM_ADDR[ 12 ]
initial
begin
	DRAM_ADDR_expected[12] = 1'b0;
end 
// expected DRAM_ADDR[ 11 ]
initial
begin
	DRAM_ADDR_expected[11] = 1'b0;
end 
// expected DRAM_ADDR[ 10 ]
initial
begin
	DRAM_ADDR_expected[10] = 1'b0;
end 
// expected DRAM_ADDR[ 9 ]
initial
begin
	DRAM_ADDR_expected[9] = 1'b0;
end 
// expected DRAM_ADDR[ 8 ]
initial
begin
	DRAM_ADDR_expected[8] = 1'b0;
end 
// expected DRAM_ADDR[ 7 ]
initial
begin
	DRAM_ADDR_expected[7] = 1'b0;
end 
// expected DRAM_ADDR[ 6 ]
initial
begin
	DRAM_ADDR_expected[6] = 1'b0;
end 
// expected DRAM_ADDR[ 5 ]
initial
begin
	DRAM_ADDR_expected[5] = 1'b0;
end 
// expected DRAM_ADDR[ 4 ]
initial
begin
	DRAM_ADDR_expected[4] = 1'b0;
end 
// expected DRAM_ADDR[ 3 ]
initial
begin
	DRAM_ADDR_expected[3] = 1'b0;
end 
// expected DRAM_ADDR[ 2 ]
initial
begin
	DRAM_ADDR_expected[2] = 1'b0;
end 
// expected DRAM_ADDR[ 1 ]
initial
begin
	DRAM_ADDR_expected[1] = 1'b0;
end 
// expected DRAM_ADDR[ 0 ]
initial
begin
	DRAM_ADDR_expected[0] = 1'b0;
end 
// expected DRAM_BA[ 1 ]
initial
begin
	DRAM_BA_expected[1] = 1'b0;
end 
// expected DRAM_BA[ 0 ]
initial
begin
	DRAM_BA_expected[0] = 1'b0;
end 

// expected DRAM_WE_N
initial
begin
	DRAM_WE_N_expected = 1'b0;
end 

// expected DRAM_RAS_N
initial
begin
	DRAM_RAS_N_expected = 1'b0;
end 

// expected DRAM_CAS_N
initial
begin
	DRAM_CAS_N_expected = 1'bX;
end 

// expected DRAM_CS_N
initial
begin
	DRAM_CS_N_expected = 1'b0;
end 

// expected DRAM_CKE
initial
begin
	DRAM_CKE_expected = 1'b0;
end 

// expected DRAM_LDQM
initial
begin
	DRAM_LDQM_expected = 1'b0;
end 

// expected DRAM_UDQM
initial
begin
	DRAM_UDQM_expected = 1'b0;
end 

// expected DramDtack_L
initial
begin
	DramDtack_L_expected = 1'b0;
end 
// generate trigger
always @(AddressBus_expected or AddressBus or AS_L_expected or AS_L or BG_L_expected or BG_L or Can0_TX_expected or Can0_TX or Can1_TX_expected or Can1_TX or CanBusSelect_H_expected or CanBusSelect_H or CPUClock_expected or CPUClock or DataBusIn_expected or DataBusIn or DataBusOut_expected or DataBusOut or DRAM_ADDR_expected or DRAM_ADDR or DRAM_BA_expected or DRAM_BA or DRAM_CAS_N_expected or DRAM_CAS_N or DRAM_CKE_expected or DRAM_CKE or DRAM_CLK_expected or DRAM_CLK or DRAM_CS_N_expected or DRAM_CS_N or DRAM_DQ_expected or DRAM_DQ or DRAM_LDQM_expected or DRAM_LDQM or DRAM_RAS_N_expected or DRAM_RAS_N or DRAM_UDQM_expected or DRAM_UDQM or DRAM_WE_N_expected or DRAM_WE_N or DramDtack_L_expected or DramDtack_L or DramRamSelect_H_expected or DramRamSelect_H or Dtack_L_expected or Dtack_L or GraphicsSelect_L_expected or GraphicsSelect_L or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or IOSelect_H_expected or IOSelect_H or LCD_Contrast_DE1_expected or LCD_Contrast_DE1 or LCD_Data_expected or LCD_Data or LCD_E_expected or LCD_E or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or LDS_L_expected or LDS_L or LEDR_expected or LEDR or mosi_o_expected or mosi_o or RamSelect_H_expected or RamSelect_H or ResetOut_expected or ResetOut or RomSelect_H_expected or RomSelect_H or RS232_TxData_expected or RS232_TxData or RW_expected or RW or sck_o_expected or sck_o or SCL_expected or SCL or SDA_expected or SDA or SSN_O_expected or SSN_O or UDS_L_expected or UDS_L or VGA_B_expected or VGA_B or VGA_BLANK_N_expected or VGA_BLANK_N or VGA_CLK_expected or VGA_CLK or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or VGA_R_expected or VGA_R or VGA_SYNC_N_expected or VGA_SYNC_N or VGA_VS_expected or VGA_VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AddressBus = %b | expected AS_L = %b | expected BG_L = %b | expected Can0_TX = %b | expected Can1_TX = %b | expected CanBusSelect_H = %b | expected CPUClock = %b | expected DataBusIn = %b | expected DataBusOut = %b | expected DRAM_ADDR = %b | expected DRAM_BA = %b | expected DRAM_CAS_N = %b | expected DRAM_CKE = %b | expected DRAM_CLK = %b | expected DRAM_CS_N = %b | expected DRAM_DQ = %b | expected DRAM_LDQM = %b | expected DRAM_RAS_N = %b | expected DRAM_UDQM = %b | expected DRAM_WE_N = %b | expected DramDtack_L = %b | expected DramRamSelect_H = %b | expected Dtack_L = %b | expected GraphicsSelect_L = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected IOSelect_H = %b | expected LCD_Contrast_DE1 = %b | expected LCD_Data = %b | expected LCD_E = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected LDS_L = %b | expected LEDR = %b | expected mosi_o = %b | expected RamSelect_H = %b | expected ResetOut = %b | expected RomSelect_H = %b | expected RS232_TxData = %b | expected RW = %b | expected sck_o = %b | expected SCL = %b | expected SDA = %b | expected SSN_O = %b | expected UDS_L = %b | expected VGA_B = %b | expected VGA_BLANK_N = %b | expected VGA_CLK = %b | expected VGA_G = %b | expected VGA_HS = %b | expected VGA_R = %b | expected VGA_SYNC_N = %b | expected VGA_VS = %b | ",AddressBus_expected_prev,AS_L_expected_prev,BG_L_expected_prev,Can0_TX_expected_prev,Can1_TX_expected_prev,CanBusSelect_H_expected_prev,CPUClock_expected_prev,DataBusIn_expected_prev,DataBusOut_expected_prev,DRAM_ADDR_expected_prev,DRAM_BA_expected_prev,DRAM_CAS_N_expected_prev,DRAM_CKE_expected_prev,DRAM_CLK_expected_prev,DRAM_CS_N_expected_prev,DRAM_DQ_expected_prev,DRAM_LDQM_expected_prev,DRAM_RAS_N_expected_prev,DRAM_UDQM_expected_prev,DRAM_WE_N_expected_prev,DramDtack_L_expected_prev,DramRamSelect_H_expected_prev,Dtack_L_expected_prev,GraphicsSelect_L_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,IOSelect_H_expected_prev,LCD_Contrast_DE1_expected_prev,LCD_Data_expected_prev,LCD_E_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,LDS_L_expected_prev,LEDR_expected_prev,mosi_o_expected_prev,RamSelect_H_expected_prev,ResetOut_expected_prev,RomSelect_H_expected_prev,RS232_TxData_expected_prev,RW_expected_prev,sck_o_expected_prev,SCL_expected_prev,SDA_expected_prev,SSN_O_expected_prev,UDS_L_expected_prev,VGA_B_expected_prev,VGA_BLANK_N_expected_prev,VGA_CLK_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,VGA_R_expected_prev,VGA_SYNC_N_expected_prev,VGA_VS_expected_prev);
	$display("| real AddressBus = %b | real AS_L = %b | real BG_L = %b | real Can0_TX = %b | real Can1_TX = %b | real CanBusSelect_H = %b | real CPUClock = %b | real DataBusIn = %b | real DataBusOut = %b | real DRAM_ADDR = %b | real DRAM_BA = %b | real DRAM_CAS_N = %b | real DRAM_CKE = %b | real DRAM_CLK = %b | real DRAM_CS_N = %b | real DRAM_DQ = %b | real DRAM_LDQM = %b | real DRAM_RAS_N = %b | real DRAM_UDQM = %b | real DRAM_WE_N = %b | real DramDtack_L = %b | real DramRamSelect_H = %b | real Dtack_L = %b | real GraphicsSelect_L = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real IOSelect_H = %b | real LCD_Contrast_DE1 = %b | real LCD_Data = %b | real LCD_E = %b | real LCD_RS = %b | real LCD_RW = %b | real LDS_L = %b | real LEDR = %b | real mosi_o = %b | real RamSelect_H = %b | real ResetOut = %b | real RomSelect_H = %b | real RS232_TxData = %b | real RW = %b | real sck_o = %b | real SCL = %b | real SDA = %b | real SSN_O = %b | real UDS_L = %b | real VGA_B = %b | real VGA_BLANK_N = %b | real VGA_CLK = %b | real VGA_G = %b | real VGA_HS = %b | real VGA_R = %b | real VGA_SYNC_N = %b | real VGA_VS = %b | ",AddressBus_prev,AS_L_prev,BG_L_prev,Can0_TX_prev,Can1_TX_prev,CanBusSelect_H_prev,CPUClock_prev,DataBusIn_prev,DataBusOut_prev,DRAM_ADDR_prev,DRAM_BA_prev,DRAM_CAS_N_prev,DRAM_CKE_prev,DRAM_CLK_prev,DRAM_CS_N_prev,DRAM_DQ_prev,DRAM_LDQM_prev,DRAM_RAS_N_prev,DRAM_UDQM_prev,DRAM_WE_N_prev,DramDtack_L_prev,DramRamSelect_H_prev,Dtack_L_prev,GraphicsSelect_L_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,IOSelect_H_prev,LCD_Contrast_DE1_prev,LCD_Data_prev,LCD_E_prev,LCD_RS_prev,LCD_RW_prev,LDS_L_prev,LEDR_prev,mosi_o_prev,RamSelect_H_prev,ResetOut_prev,RomSelect_H_prev,RS232_TxData_prev,RW_prev,sck_o_prev,SCL_prev,SDA_prev,SSN_O_prev,UDS_L_prev,VGA_B_prev,VGA_BLANK_N_prev,VGA_CLK_prev,VGA_G_prev,VGA_HS_prev,VGA_R_prev,VGA_SYNC_N_prev,VGA_VS_prev);
`endif
	if (
		( AddressBus_expected_prev[0] !== 1'bx ) && ( AddressBus_prev[0] !== AddressBus_expected_prev[0] )
		&& ((AddressBus_expected_prev[0] !== last_AddressBus_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[0] = AddressBus_expected_prev[0];
	end
	if (
		( AddressBus_expected_prev[1] !== 1'bx ) && ( AddressBus_prev[1] !== AddressBus_expected_prev[1] )
		&& ((AddressBus_expected_prev[1] !== last_AddressBus_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[1] = AddressBus_expected_prev[1];
	end
	if (
		( AddressBus_expected_prev[2] !== 1'bx ) && ( AddressBus_prev[2] !== AddressBus_expected_prev[2] )
		&& ((AddressBus_expected_prev[2] !== last_AddressBus_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[2] = AddressBus_expected_prev[2];
	end
	if (
		( AddressBus_expected_prev[3] !== 1'bx ) && ( AddressBus_prev[3] !== AddressBus_expected_prev[3] )
		&& ((AddressBus_expected_prev[3] !== last_AddressBus_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[3] = AddressBus_expected_prev[3];
	end
	if (
		( AddressBus_expected_prev[4] !== 1'bx ) && ( AddressBus_prev[4] !== AddressBus_expected_prev[4] )
		&& ((AddressBus_expected_prev[4] !== last_AddressBus_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[4] = AddressBus_expected_prev[4];
	end
	if (
		( AddressBus_expected_prev[5] !== 1'bx ) && ( AddressBus_prev[5] !== AddressBus_expected_prev[5] )
		&& ((AddressBus_expected_prev[5] !== last_AddressBus_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[5] = AddressBus_expected_prev[5];
	end
	if (
		( AddressBus_expected_prev[6] !== 1'bx ) && ( AddressBus_prev[6] !== AddressBus_expected_prev[6] )
		&& ((AddressBus_expected_prev[6] !== last_AddressBus_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[6] = AddressBus_expected_prev[6];
	end
	if (
		( AddressBus_expected_prev[7] !== 1'bx ) && ( AddressBus_prev[7] !== AddressBus_expected_prev[7] )
		&& ((AddressBus_expected_prev[7] !== last_AddressBus_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[7] = AddressBus_expected_prev[7];
	end
	if (
		( AddressBus_expected_prev[8] !== 1'bx ) && ( AddressBus_prev[8] !== AddressBus_expected_prev[8] )
		&& ((AddressBus_expected_prev[8] !== last_AddressBus_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[8] = AddressBus_expected_prev[8];
	end
	if (
		( AddressBus_expected_prev[9] !== 1'bx ) && ( AddressBus_prev[9] !== AddressBus_expected_prev[9] )
		&& ((AddressBus_expected_prev[9] !== last_AddressBus_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[9] = AddressBus_expected_prev[9];
	end
	if (
		( AddressBus_expected_prev[10] !== 1'bx ) && ( AddressBus_prev[10] !== AddressBus_expected_prev[10] )
		&& ((AddressBus_expected_prev[10] !== last_AddressBus_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[10] = AddressBus_expected_prev[10];
	end
	if (
		( AddressBus_expected_prev[11] !== 1'bx ) && ( AddressBus_prev[11] !== AddressBus_expected_prev[11] )
		&& ((AddressBus_expected_prev[11] !== last_AddressBus_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[11] = AddressBus_expected_prev[11];
	end
	if (
		( AddressBus_expected_prev[12] !== 1'bx ) && ( AddressBus_prev[12] !== AddressBus_expected_prev[12] )
		&& ((AddressBus_expected_prev[12] !== last_AddressBus_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[12] = AddressBus_expected_prev[12];
	end
	if (
		( AddressBus_expected_prev[13] !== 1'bx ) && ( AddressBus_prev[13] !== AddressBus_expected_prev[13] )
		&& ((AddressBus_expected_prev[13] !== last_AddressBus_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[13] = AddressBus_expected_prev[13];
	end
	if (
		( AddressBus_expected_prev[14] !== 1'bx ) && ( AddressBus_prev[14] !== AddressBus_expected_prev[14] )
		&& ((AddressBus_expected_prev[14] !== last_AddressBus_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[14] = AddressBus_expected_prev[14];
	end
	if (
		( AddressBus_expected_prev[15] !== 1'bx ) && ( AddressBus_prev[15] !== AddressBus_expected_prev[15] )
		&& ((AddressBus_expected_prev[15] !== last_AddressBus_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[15] = AddressBus_expected_prev[15];
	end
	if (
		( AddressBus_expected_prev[16] !== 1'bx ) && ( AddressBus_prev[16] !== AddressBus_expected_prev[16] )
		&& ((AddressBus_expected_prev[16] !== last_AddressBus_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[16] = AddressBus_expected_prev[16];
	end
	if (
		( AddressBus_expected_prev[17] !== 1'bx ) && ( AddressBus_prev[17] !== AddressBus_expected_prev[17] )
		&& ((AddressBus_expected_prev[17] !== last_AddressBus_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[17] = AddressBus_expected_prev[17];
	end
	if (
		( AddressBus_expected_prev[18] !== 1'bx ) && ( AddressBus_prev[18] !== AddressBus_expected_prev[18] )
		&& ((AddressBus_expected_prev[18] !== last_AddressBus_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[18] = AddressBus_expected_prev[18];
	end
	if (
		( AddressBus_expected_prev[19] !== 1'bx ) && ( AddressBus_prev[19] !== AddressBus_expected_prev[19] )
		&& ((AddressBus_expected_prev[19] !== last_AddressBus_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[19] = AddressBus_expected_prev[19];
	end
	if (
		( AddressBus_expected_prev[20] !== 1'bx ) && ( AddressBus_prev[20] !== AddressBus_expected_prev[20] )
		&& ((AddressBus_expected_prev[20] !== last_AddressBus_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[20] = AddressBus_expected_prev[20];
	end
	if (
		( AddressBus_expected_prev[21] !== 1'bx ) && ( AddressBus_prev[21] !== AddressBus_expected_prev[21] )
		&& ((AddressBus_expected_prev[21] !== last_AddressBus_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[21] = AddressBus_expected_prev[21];
	end
	if (
		( AddressBus_expected_prev[22] !== 1'bx ) && ( AddressBus_prev[22] !== AddressBus_expected_prev[22] )
		&& ((AddressBus_expected_prev[22] !== last_AddressBus_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[22] = AddressBus_expected_prev[22];
	end
	if (
		( AddressBus_expected_prev[23] !== 1'bx ) && ( AddressBus_prev[23] !== AddressBus_expected_prev[23] )
		&& ((AddressBus_expected_prev[23] !== last_AddressBus_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[23] = AddressBus_expected_prev[23];
	end
	if (
		( AddressBus_expected_prev[24] !== 1'bx ) && ( AddressBus_prev[24] !== AddressBus_expected_prev[24] )
		&& ((AddressBus_expected_prev[24] !== last_AddressBus_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[24] = AddressBus_expected_prev[24];
	end
	if (
		( AddressBus_expected_prev[25] !== 1'bx ) && ( AddressBus_prev[25] !== AddressBus_expected_prev[25] )
		&& ((AddressBus_expected_prev[25] !== last_AddressBus_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[25] = AddressBus_expected_prev[25];
	end
	if (
		( AddressBus_expected_prev[26] !== 1'bx ) && ( AddressBus_prev[26] !== AddressBus_expected_prev[26] )
		&& ((AddressBus_expected_prev[26] !== last_AddressBus_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[26] = AddressBus_expected_prev[26];
	end
	if (
		( AddressBus_expected_prev[27] !== 1'bx ) && ( AddressBus_prev[27] !== AddressBus_expected_prev[27] )
		&& ((AddressBus_expected_prev[27] !== last_AddressBus_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[27] = AddressBus_expected_prev[27];
	end
	if (
		( AddressBus_expected_prev[28] !== 1'bx ) && ( AddressBus_prev[28] !== AddressBus_expected_prev[28] )
		&& ((AddressBus_expected_prev[28] !== last_AddressBus_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[28] = AddressBus_expected_prev[28];
	end
	if (
		( AddressBus_expected_prev[29] !== 1'bx ) && ( AddressBus_prev[29] !== AddressBus_expected_prev[29] )
		&& ((AddressBus_expected_prev[29] !== last_AddressBus_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[29] = AddressBus_expected_prev[29];
	end
	if (
		( AddressBus_expected_prev[30] !== 1'bx ) && ( AddressBus_prev[30] !== AddressBus_expected_prev[30] )
		&& ((AddressBus_expected_prev[30] !== last_AddressBus_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[30] = AddressBus_expected_prev[30];
	end
	if (
		( AddressBus_expected_prev[31] !== 1'bx ) && ( AddressBus_prev[31] !== AddressBus_expected_prev[31] )
		&& ((AddressBus_expected_prev[31] !== last_AddressBus_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AddressBus[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AddressBus_expected_prev);
		$display ("     Real value = %b", AddressBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AddressBus_exp[31] = AddressBus_expected_prev[31];
	end
	if (
		( AS_L_expected_prev !== 1'bx ) && ( AS_L_prev !== AS_L_expected_prev )
		&& ((AS_L_expected_prev !== last_AS_L_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AS_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AS_L_expected_prev);
		$display ("     Real value = %b", AS_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AS_L_exp = AS_L_expected_prev;
	end
	if (
		( CPUClock_expected_prev !== 1'bx ) && ( CPUClock_prev !== CPUClock_expected_prev )
		&& ((CPUClock_expected_prev !== last_CPUClock_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPUClock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPUClock_expected_prev);
		$display ("     Real value = %b", CPUClock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_CPUClock_exp = CPUClock_expected_prev;
	end
	if (
		( DataBusIn_expected_prev[0] !== 1'bx ) && ( DataBusIn_prev[0] !== DataBusIn_expected_prev[0] )
		&& ((DataBusIn_expected_prev[0] !== last_DataBusIn_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[0] = DataBusIn_expected_prev[0];
	end
	if (
		( DataBusIn_expected_prev[1] !== 1'bx ) && ( DataBusIn_prev[1] !== DataBusIn_expected_prev[1] )
		&& ((DataBusIn_expected_prev[1] !== last_DataBusIn_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[1] = DataBusIn_expected_prev[1];
	end
	if (
		( DataBusIn_expected_prev[2] !== 1'bx ) && ( DataBusIn_prev[2] !== DataBusIn_expected_prev[2] )
		&& ((DataBusIn_expected_prev[2] !== last_DataBusIn_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[2] = DataBusIn_expected_prev[2];
	end
	if (
		( DataBusIn_expected_prev[3] !== 1'bx ) && ( DataBusIn_prev[3] !== DataBusIn_expected_prev[3] )
		&& ((DataBusIn_expected_prev[3] !== last_DataBusIn_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[3] = DataBusIn_expected_prev[3];
	end
	if (
		( DataBusIn_expected_prev[4] !== 1'bx ) && ( DataBusIn_prev[4] !== DataBusIn_expected_prev[4] )
		&& ((DataBusIn_expected_prev[4] !== last_DataBusIn_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[4] = DataBusIn_expected_prev[4];
	end
	if (
		( DataBusIn_expected_prev[5] !== 1'bx ) && ( DataBusIn_prev[5] !== DataBusIn_expected_prev[5] )
		&& ((DataBusIn_expected_prev[5] !== last_DataBusIn_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[5] = DataBusIn_expected_prev[5];
	end
	if (
		( DataBusIn_expected_prev[6] !== 1'bx ) && ( DataBusIn_prev[6] !== DataBusIn_expected_prev[6] )
		&& ((DataBusIn_expected_prev[6] !== last_DataBusIn_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[6] = DataBusIn_expected_prev[6];
	end
	if (
		( DataBusIn_expected_prev[7] !== 1'bx ) && ( DataBusIn_prev[7] !== DataBusIn_expected_prev[7] )
		&& ((DataBusIn_expected_prev[7] !== last_DataBusIn_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[7] = DataBusIn_expected_prev[7];
	end
	if (
		( DataBusIn_expected_prev[8] !== 1'bx ) && ( DataBusIn_prev[8] !== DataBusIn_expected_prev[8] )
		&& ((DataBusIn_expected_prev[8] !== last_DataBusIn_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[8] = DataBusIn_expected_prev[8];
	end
	if (
		( DataBusIn_expected_prev[9] !== 1'bx ) && ( DataBusIn_prev[9] !== DataBusIn_expected_prev[9] )
		&& ((DataBusIn_expected_prev[9] !== last_DataBusIn_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[9] = DataBusIn_expected_prev[9];
	end
	if (
		( DataBusIn_expected_prev[10] !== 1'bx ) && ( DataBusIn_prev[10] !== DataBusIn_expected_prev[10] )
		&& ((DataBusIn_expected_prev[10] !== last_DataBusIn_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[10] = DataBusIn_expected_prev[10];
	end
	if (
		( DataBusIn_expected_prev[11] !== 1'bx ) && ( DataBusIn_prev[11] !== DataBusIn_expected_prev[11] )
		&& ((DataBusIn_expected_prev[11] !== last_DataBusIn_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[11] = DataBusIn_expected_prev[11];
	end
	if (
		( DataBusIn_expected_prev[12] !== 1'bx ) && ( DataBusIn_prev[12] !== DataBusIn_expected_prev[12] )
		&& ((DataBusIn_expected_prev[12] !== last_DataBusIn_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[12] = DataBusIn_expected_prev[12];
	end
	if (
		( DataBusIn_expected_prev[13] !== 1'bx ) && ( DataBusIn_prev[13] !== DataBusIn_expected_prev[13] )
		&& ((DataBusIn_expected_prev[13] !== last_DataBusIn_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[13] = DataBusIn_expected_prev[13];
	end
	if (
		( DataBusIn_expected_prev[14] !== 1'bx ) && ( DataBusIn_prev[14] !== DataBusIn_expected_prev[14] )
		&& ((DataBusIn_expected_prev[14] !== last_DataBusIn_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[14] = DataBusIn_expected_prev[14];
	end
	if (
		( DataBusIn_expected_prev[15] !== 1'bx ) && ( DataBusIn_prev[15] !== DataBusIn_expected_prev[15] )
		&& ((DataBusIn_expected_prev[15] !== last_DataBusIn_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusIn[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusIn_expected_prev);
		$display ("     Real value = %b", DataBusIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DataBusIn_exp[15] = DataBusIn_expected_prev[15];
	end
	if (
		( DataBusOut_expected_prev[0] !== 1'bx ) && ( DataBusOut_prev[0] !== DataBusOut_expected_prev[0] )
		&& ((DataBusOut_expected_prev[0] !== last_DataBusOut_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[0] = DataBusOut_expected_prev[0];
	end
	if (
		( DataBusOut_expected_prev[1] !== 1'bx ) && ( DataBusOut_prev[1] !== DataBusOut_expected_prev[1] )
		&& ((DataBusOut_expected_prev[1] !== last_DataBusOut_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[1] = DataBusOut_expected_prev[1];
	end
	if (
		( DataBusOut_expected_prev[2] !== 1'bx ) && ( DataBusOut_prev[2] !== DataBusOut_expected_prev[2] )
		&& ((DataBusOut_expected_prev[2] !== last_DataBusOut_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[2] = DataBusOut_expected_prev[2];
	end
	if (
		( DataBusOut_expected_prev[3] !== 1'bx ) && ( DataBusOut_prev[3] !== DataBusOut_expected_prev[3] )
		&& ((DataBusOut_expected_prev[3] !== last_DataBusOut_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[3] = DataBusOut_expected_prev[3];
	end
	if (
		( DataBusOut_expected_prev[4] !== 1'bx ) && ( DataBusOut_prev[4] !== DataBusOut_expected_prev[4] )
		&& ((DataBusOut_expected_prev[4] !== last_DataBusOut_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[4] = DataBusOut_expected_prev[4];
	end
	if (
		( DataBusOut_expected_prev[5] !== 1'bx ) && ( DataBusOut_prev[5] !== DataBusOut_expected_prev[5] )
		&& ((DataBusOut_expected_prev[5] !== last_DataBusOut_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[5] = DataBusOut_expected_prev[5];
	end
	if (
		( DataBusOut_expected_prev[6] !== 1'bx ) && ( DataBusOut_prev[6] !== DataBusOut_expected_prev[6] )
		&& ((DataBusOut_expected_prev[6] !== last_DataBusOut_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[6] = DataBusOut_expected_prev[6];
	end
	if (
		( DataBusOut_expected_prev[7] !== 1'bx ) && ( DataBusOut_prev[7] !== DataBusOut_expected_prev[7] )
		&& ((DataBusOut_expected_prev[7] !== last_DataBusOut_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[7] = DataBusOut_expected_prev[7];
	end
	if (
		( DataBusOut_expected_prev[8] !== 1'bx ) && ( DataBusOut_prev[8] !== DataBusOut_expected_prev[8] )
		&& ((DataBusOut_expected_prev[8] !== last_DataBusOut_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[8] = DataBusOut_expected_prev[8];
	end
	if (
		( DataBusOut_expected_prev[9] !== 1'bx ) && ( DataBusOut_prev[9] !== DataBusOut_expected_prev[9] )
		&& ((DataBusOut_expected_prev[9] !== last_DataBusOut_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[9] = DataBusOut_expected_prev[9];
	end
	if (
		( DataBusOut_expected_prev[10] !== 1'bx ) && ( DataBusOut_prev[10] !== DataBusOut_expected_prev[10] )
		&& ((DataBusOut_expected_prev[10] !== last_DataBusOut_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[10] = DataBusOut_expected_prev[10];
	end
	if (
		( DataBusOut_expected_prev[11] !== 1'bx ) && ( DataBusOut_prev[11] !== DataBusOut_expected_prev[11] )
		&& ((DataBusOut_expected_prev[11] !== last_DataBusOut_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[11] = DataBusOut_expected_prev[11];
	end
	if (
		( DataBusOut_expected_prev[12] !== 1'bx ) && ( DataBusOut_prev[12] !== DataBusOut_expected_prev[12] )
		&& ((DataBusOut_expected_prev[12] !== last_DataBusOut_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[12] = DataBusOut_expected_prev[12];
	end
	if (
		( DataBusOut_expected_prev[13] !== 1'bx ) && ( DataBusOut_prev[13] !== DataBusOut_expected_prev[13] )
		&& ((DataBusOut_expected_prev[13] !== last_DataBusOut_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[13] = DataBusOut_expected_prev[13];
	end
	if (
		( DataBusOut_expected_prev[14] !== 1'bx ) && ( DataBusOut_prev[14] !== DataBusOut_expected_prev[14] )
		&& ((DataBusOut_expected_prev[14] !== last_DataBusOut_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[14] = DataBusOut_expected_prev[14];
	end
	if (
		( DataBusOut_expected_prev[15] !== 1'bx ) && ( DataBusOut_prev[15] !== DataBusOut_expected_prev[15] )
		&& ((DataBusOut_expected_prev[15] !== last_DataBusOut_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataBusOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataBusOut_expected_prev);
		$display ("     Real value = %b", DataBusOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DataBusOut_exp[15] = DataBusOut_expected_prev[15];
	end
	if (
		( DRAM_ADDR_expected_prev[0] !== 1'bx ) && ( DRAM_ADDR_prev[0] !== DRAM_ADDR_expected_prev[0] )
		&& ((DRAM_ADDR_expected_prev[0] !== last_DRAM_ADDR_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[0] = DRAM_ADDR_expected_prev[0];
	end
	if (
		( DRAM_ADDR_expected_prev[1] !== 1'bx ) && ( DRAM_ADDR_prev[1] !== DRAM_ADDR_expected_prev[1] )
		&& ((DRAM_ADDR_expected_prev[1] !== last_DRAM_ADDR_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[1] = DRAM_ADDR_expected_prev[1];
	end
	if (
		( DRAM_ADDR_expected_prev[2] !== 1'bx ) && ( DRAM_ADDR_prev[2] !== DRAM_ADDR_expected_prev[2] )
		&& ((DRAM_ADDR_expected_prev[2] !== last_DRAM_ADDR_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[2] = DRAM_ADDR_expected_prev[2];
	end
	if (
		( DRAM_ADDR_expected_prev[3] !== 1'bx ) && ( DRAM_ADDR_prev[3] !== DRAM_ADDR_expected_prev[3] )
		&& ((DRAM_ADDR_expected_prev[3] !== last_DRAM_ADDR_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[3] = DRAM_ADDR_expected_prev[3];
	end
	if (
		( DRAM_ADDR_expected_prev[4] !== 1'bx ) && ( DRAM_ADDR_prev[4] !== DRAM_ADDR_expected_prev[4] )
		&& ((DRAM_ADDR_expected_prev[4] !== last_DRAM_ADDR_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[4] = DRAM_ADDR_expected_prev[4];
	end
	if (
		( DRAM_ADDR_expected_prev[5] !== 1'bx ) && ( DRAM_ADDR_prev[5] !== DRAM_ADDR_expected_prev[5] )
		&& ((DRAM_ADDR_expected_prev[5] !== last_DRAM_ADDR_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[5] = DRAM_ADDR_expected_prev[5];
	end
	if (
		( DRAM_ADDR_expected_prev[6] !== 1'bx ) && ( DRAM_ADDR_prev[6] !== DRAM_ADDR_expected_prev[6] )
		&& ((DRAM_ADDR_expected_prev[6] !== last_DRAM_ADDR_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[6] = DRAM_ADDR_expected_prev[6];
	end
	if (
		( DRAM_ADDR_expected_prev[7] !== 1'bx ) && ( DRAM_ADDR_prev[7] !== DRAM_ADDR_expected_prev[7] )
		&& ((DRAM_ADDR_expected_prev[7] !== last_DRAM_ADDR_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[7] = DRAM_ADDR_expected_prev[7];
	end
	if (
		( DRAM_ADDR_expected_prev[8] !== 1'bx ) && ( DRAM_ADDR_prev[8] !== DRAM_ADDR_expected_prev[8] )
		&& ((DRAM_ADDR_expected_prev[8] !== last_DRAM_ADDR_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[8] = DRAM_ADDR_expected_prev[8];
	end
	if (
		( DRAM_ADDR_expected_prev[9] !== 1'bx ) && ( DRAM_ADDR_prev[9] !== DRAM_ADDR_expected_prev[9] )
		&& ((DRAM_ADDR_expected_prev[9] !== last_DRAM_ADDR_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[9] = DRAM_ADDR_expected_prev[9];
	end
	if (
		( DRAM_ADDR_expected_prev[10] !== 1'bx ) && ( DRAM_ADDR_prev[10] !== DRAM_ADDR_expected_prev[10] )
		&& ((DRAM_ADDR_expected_prev[10] !== last_DRAM_ADDR_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[10] = DRAM_ADDR_expected_prev[10];
	end
	if (
		( DRAM_ADDR_expected_prev[11] !== 1'bx ) && ( DRAM_ADDR_prev[11] !== DRAM_ADDR_expected_prev[11] )
		&& ((DRAM_ADDR_expected_prev[11] !== last_DRAM_ADDR_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[11] = DRAM_ADDR_expected_prev[11];
	end
	if (
		( DRAM_ADDR_expected_prev[12] !== 1'bx ) && ( DRAM_ADDR_prev[12] !== DRAM_ADDR_expected_prev[12] )
		&& ((DRAM_ADDR_expected_prev[12] !== last_DRAM_ADDR_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_ADDR_exp[12] = DRAM_ADDR_expected_prev[12];
	end
	if (
		( DRAM_BA_expected_prev[0] !== 1'bx ) && ( DRAM_BA_prev[0] !== DRAM_BA_expected_prev[0] )
		&& ((DRAM_BA_expected_prev[0] !== last_DRAM_BA_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_BA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_BA_expected_prev);
		$display ("     Real value = %b", DRAM_BA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DRAM_BA_exp[0] = DRAM_BA_expected_prev[0];
	end
	if (
		( DRAM_BA_expected_prev[1] !== 1'bx ) && ( DRAM_BA_prev[1] !== DRAM_BA_expected_prev[1] )
		&& ((DRAM_BA_expected_prev[1] !== last_DRAM_BA_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_BA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_BA_expected_prev);
		$display ("     Real value = %b", DRAM_BA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DRAM_BA_exp[1] = DRAM_BA_expected_prev[1];
	end
	if (
		( DRAM_CAS_N_expected_prev !== 1'bx ) && ( DRAM_CAS_N_prev !== DRAM_CAS_N_expected_prev )
		&& ((DRAM_CAS_N_expected_prev !== last_DRAM_CAS_N_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CAS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CAS_N_expected_prev);
		$display ("     Real value = %b", DRAM_CAS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_CAS_N_exp = DRAM_CAS_N_expected_prev;
	end
	if (
		( DRAM_CKE_expected_prev !== 1'bx ) && ( DRAM_CKE_prev !== DRAM_CKE_expected_prev )
		&& ((DRAM_CKE_expected_prev !== last_DRAM_CKE_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CKE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CKE_expected_prev);
		$display ("     Real value = %b", DRAM_CKE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_DRAM_CKE_exp = DRAM_CKE_expected_prev;
	end
	if (
		( DRAM_CLK_expected_prev !== 1'bx ) && ( DRAM_CLK_prev !== DRAM_CLK_expected_prev )
		&& ((DRAM_CLK_expected_prev !== last_DRAM_CLK_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CLK_expected_prev);
		$display ("     Real value = %b", DRAM_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_DRAM_CLK_exp = DRAM_CLK_expected_prev;
	end
	if (
		( DRAM_CS_N_expected_prev !== 1'bx ) && ( DRAM_CS_N_prev !== DRAM_CS_N_expected_prev )
		&& ((DRAM_CS_N_expected_prev !== last_DRAM_CS_N_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CS_N_expected_prev);
		$display ("     Real value = %b", DRAM_CS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DRAM_CS_N_exp = DRAM_CS_N_expected_prev;
	end
	if (
		( DRAM_LDQM_expected_prev !== 1'bx ) && ( DRAM_LDQM_prev !== DRAM_LDQM_expected_prev )
		&& ((DRAM_LDQM_expected_prev !== last_DRAM_LDQM_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_LDQM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_LDQM_expected_prev);
		$display ("     Real value = %b", DRAM_LDQM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_DRAM_LDQM_exp = DRAM_LDQM_expected_prev;
	end
	if (
		( DRAM_RAS_N_expected_prev !== 1'bx ) && ( DRAM_RAS_N_prev !== DRAM_RAS_N_expected_prev )
		&& ((DRAM_RAS_N_expected_prev !== last_DRAM_RAS_N_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_RAS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_RAS_N_expected_prev);
		$display ("     Real value = %b", DRAM_RAS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_DRAM_RAS_N_exp = DRAM_RAS_N_expected_prev;
	end
	if (
		( DRAM_UDQM_expected_prev !== 1'bx ) && ( DRAM_UDQM_prev !== DRAM_UDQM_expected_prev )
		&& ((DRAM_UDQM_expected_prev !== last_DRAM_UDQM_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_UDQM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_UDQM_expected_prev);
		$display ("     Real value = %b", DRAM_UDQM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_DRAM_UDQM_exp = DRAM_UDQM_expected_prev;
	end
	if (
		( DRAM_WE_N_expected_prev !== 1'bx ) && ( DRAM_WE_N_prev !== DRAM_WE_N_expected_prev )
		&& ((DRAM_WE_N_expected_prev !== last_DRAM_WE_N_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_WE_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_WE_N_expected_prev);
		$display ("     Real value = %b", DRAM_WE_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_DRAM_WE_N_exp = DRAM_WE_N_expected_prev;
	end
	if (
		( DramDtack_L_expected_prev !== 1'bx ) && ( DramDtack_L_prev !== DramDtack_L_expected_prev )
		&& ((DramDtack_L_expected_prev !== last_DramDtack_L_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DramDtack_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DramDtack_L_expected_prev);
		$display ("     Real value = %b", DramDtack_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DramDtack_L_exp = DramDtack_L_expected_prev;
	end
	if (
		( Dtack_L_expected_prev !== 1'bx ) && ( Dtack_L_prev !== Dtack_L_expected_prev )
		&& ((Dtack_L_expected_prev !== last_Dtack_L_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dtack_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dtack_L_expected_prev);
		$display ("     Real value = %b", Dtack_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_Dtack_L_exp = Dtack_L_expected_prev;
	end
	if (
		( LDS_L_expected_prev !== 1'bx ) && ( LDS_L_prev !== LDS_L_expected_prev )
		&& ((LDS_L_expected_prev !== last_LDS_L_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDS_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDS_L_expected_prev);
		$display ("     Real value = %b", LDS_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_LDS_L_exp = LDS_L_expected_prev;
	end
	if (
		( ResetOut_expected_prev !== 1'bx ) && ( ResetOut_prev !== ResetOut_expected_prev )
		&& ((ResetOut_expected_prev !== last_ResetOut_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResetOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResetOut_expected_prev);
		$display ("     Real value = %b", ResetOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_ResetOut_exp = ResetOut_expected_prev;
	end
	if (
		( RW_expected_prev !== 1'bx ) && ( RW_prev !== RW_expected_prev )
		&& ((RW_expected_prev !== last_RW_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RW_expected_prev);
		$display ("     Real value = %b", RW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_RW_exp = RW_expected_prev;
	end
	if (
		( UDS_L_expected_prev !== 1'bx ) && ( UDS_L_prev !== UDS_L_expected_prev )
		&& ((UDS_L_expected_prev !== last_UDS_L_exp) ||
			on_first_change[49])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UDS_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UDS_L_expected_prev);
		$display ("     Real value = %b", UDS_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[49] = 1'b0;
		last_UDS_L_exp = UDS_L_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#7000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MC68K_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Can0_RX;
reg Can1_RX;
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg IRQ2_L;
reg IRQ4_L;
reg miso_i;
reg Reset_L;
reg RS232_RxData;
reg treg_SCL;
reg treg_SDA;
reg [9:0] SW;
reg TraceRequest_L;
// wires                                               
wire [31:0] AddressBus;
wire AS_L;
wire BG_L;
wire Can0_TX;
wire Can1_TX;
wire CanBusSelect_H;
wire CPUClock;
wire [15:0] DataBusIn;
wire [15:0] DataBusOut;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire DramDtack_L;
wire DramRamSelect_H;
wire Dtack_L;
wire GraphicsSelect_L;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire IOSelect_H;
wire LCD_Contrast_DE1;
wire [7:0] LCD_Data;
wire LCD_E;
wire LCD_RS;
wire LCD_RW;
wire LDS_L;
wire [9:0] LEDR;
wire mosi_o;
wire RamSelect_H;
wire ResetOut;
wire RomSelect_H;
wire RS232_TxData;
wire RW;
wire sck_o;
wire SCL;
wire SDA;
wire [0:0] SSN_O;
wire UDS_L;
wire [7:0] VGA_B;
wire VGA_BLANK_N;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_HS;
wire [7:0] VGA_R;
wire VGA_SYNC_N;
wire VGA_VS;

wire sampler;                             

// assign statements (if any)                          
assign DRAM_DQ = treg_DRAM_DQ;
assign SCL = treg_SCL;
assign SDA = treg_SDA;
MC68K i1 (
// port map - connection between master ports and signals/registers   
	.AddressBus(AddressBus),
	.AS_L(AS_L),
	.BG_L(BG_L),
	.Can0_RX(Can0_RX),
	.Can0_TX(Can0_TX),
	.Can1_RX(Can1_RX),
	.Can1_TX(Can1_TX),
	.CanBusSelect_H(CanBusSelect_H),
	.CLOCK_50(CLOCK_50),
	.CPUClock(CPUClock),
	.DataBusIn(DataBusIn),
	.DataBusOut(DataBusOut),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.DramDtack_L(DramDtack_L),
	.DramRamSelect_H(DramRamSelect_H),
	.Dtack_L(Dtack_L),
	.GraphicsSelect_L(GraphicsSelect_L),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.IOSelect_H(IOSelect_H),
	.IRQ2_L(IRQ2_L),
	.IRQ4_L(IRQ4_L),
	.LCD_Contrast_DE1(LCD_Contrast_DE1),
	.LCD_Data(LCD_Data),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LDS_L(LDS_L),
	.LEDR(LEDR),
	.miso_i(miso_i),
	.mosi_o(mosi_o),
	.RamSelect_H(RamSelect_H),
	.Reset_L(Reset_L),
	.ResetOut(ResetOut),
	.RomSelect_H(RomSelect_H),
	.RS232_RxData(RS232_RxData),
	.RS232_TxData(RS232_TxData),
	.RW(RW),
	.sck_o(sck_o),
	.SCL(SCL),
	.SDA(SDA),
	.SSN_O(SSN_O),
	.SW(SW),
	.TraceRequest_L(TraceRequest_L),
	.UDS_L(UDS_L),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS)
);

// Reset_L
initial
begin
	Reset_L = 1'b0;
	Reset_L = #90000 1'b1;
end 

// SW[8]
initial
begin
	SW[8] = 1'b0;
end 

// IRQ4_L
initial
begin
	IRQ4_L = 1'b1;
end 

// IRQ2_L
initial
begin
	IRQ2_L = 1'b1;
end 

// TraceRequest_L
initial
begin
	TraceRequest_L = 1'b1;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

MC68K_vlg_sample_tst tb_sample (
	.Can0_RX(Can0_RX),
	.Can1_RX(Can1_RX),
	.CLOCK_50(CLOCK_50),
	.DRAM_DQ(DRAM_DQ),
	.IRQ2_L(IRQ2_L),
	.IRQ4_L(IRQ4_L),
	.miso_i(miso_i),
	.Reset_L(Reset_L),
	.RS232_RxData(RS232_RxData),
	.SCL(SCL),
	.SDA(SDA),
	.SW(SW),
	.TraceRequest_L(TraceRequest_L),
	.sampler_tx(sampler)
);

MC68K_vlg_check_tst tb_out(
	.AddressBus(AddressBus),
	.AS_L(AS_L),
	.BG_L(BG_L),
	.Can0_TX(Can0_TX),
	.Can1_TX(Can1_TX),
	.CanBusSelect_H(CanBusSelect_H),
	.CPUClock(CPUClock),
	.DataBusIn(DataBusIn),
	.DataBusOut(DataBusOut),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.DramDtack_L(DramDtack_L),
	.DramRamSelect_H(DramRamSelect_H),
	.Dtack_L(Dtack_L),
	.GraphicsSelect_L(GraphicsSelect_L),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.IOSelect_H(IOSelect_H),
	.LCD_Contrast_DE1(LCD_Contrast_DE1),
	.LCD_Data(LCD_Data),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LDS_L(LDS_L),
	.LEDR(LEDR),
	.mosi_o(mosi_o),
	.RamSelect_H(RamSelect_H),
	.ResetOut(ResetOut),
	.RomSelect_H(RomSelect_H),
	.RS232_TxData(RS232_TxData),
	.RW(RW),
	.sck_o(sck_o),
	.SCL(SCL),
	.SDA(SDA),
	.SSN_O(SSN_O),
	.UDS_L(UDS_L),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS),
	.sampler_rx(sampler)
);
endmodule

