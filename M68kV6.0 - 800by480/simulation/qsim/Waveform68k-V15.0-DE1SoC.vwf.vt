// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/01/2022 23:27:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MC68K
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MC68K_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Can0_RX;
reg Can1_RX;
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg IRQ2_L;
reg IRQ4_L;
reg miso_i;
reg Reset_L;
reg RS232_RxData;
reg treg_SCL;
reg treg_SDA;
reg [9:0] SW;
reg TraceRequest_L;
// wires                                               
wire [31:0] AddressBus;
wire AS_L;
wire BG_L;
wire Can0_TX;
wire Can1_TX;
wire CanBusSelect_H;
wire CPUClock;
wire [15:0] DataBusIn;
wire [15:0] DataBusOut;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire [4:0] DRAM_STATE;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire DramDtack_L;
wire DramRamSelect_H;
wire Dtack_L;
wire GraphicsSelect_L;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire IOSelect_H;
wire LCD_Contrast_DE1;
wire [7:0] LCD_Data;
wire LCD_E;
wire LCD_RS;
wire LCD_RW;
wire LDS_L;
wire [9:0] LEDR;
wire mosi_o;
wire RamSelect_H;
wire ResetOut;
wire RomSelect_H;
wire RS232_TxData;
wire RW;
wire sck_o;
wire SCL;
wire SDA;
wire [0:0] SSN_O;
wire UDS_L;
wire [7:0] VGA_B;
wire VGA_BLANK_N;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_HS;
wire [7:0] VGA_R;
wire VGA_SYNC_N;
wire VGA_VS;

// assign statements (if any)                          
assign DRAM_DQ = treg_DRAM_DQ;
assign SCL = treg_SCL;
assign SDA = treg_SDA;
MC68K i1 (
// port map - connection between master ports and signals/registers   
	.AddressBus(AddressBus),
	.AS_L(AS_L),
	.BG_L(BG_L),
	.Can0_RX(Can0_RX),
	.Can0_TX(Can0_TX),
	.Can1_RX(Can1_RX),
	.Can1_TX(Can1_TX),
	.CanBusSelect_H(CanBusSelect_H),
	.CLOCK_50(CLOCK_50),
	.CPUClock(CPUClock),
	.DataBusIn(DataBusIn),
	.DataBusOut(DataBusOut),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_STATE(DRAM_STATE),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.DramDtack_L(DramDtack_L),
	.DramRamSelect_H(DramRamSelect_H),
	.Dtack_L(Dtack_L),
	.GraphicsSelect_L(GraphicsSelect_L),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.IOSelect_H(IOSelect_H),
	.IRQ2_L(IRQ2_L),
	.IRQ4_L(IRQ4_L),
	.LCD_Contrast_DE1(LCD_Contrast_DE1),
	.LCD_Data(LCD_Data),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LDS_L(LDS_L),
	.LEDR(LEDR),
	.miso_i(miso_i),
	.mosi_o(mosi_o),
	.RamSelect_H(RamSelect_H),
	.Reset_L(Reset_L),
	.ResetOut(ResetOut),
	.RomSelect_H(RomSelect_H),
	.RS232_RxData(RS232_RxData),
	.RS232_TxData(RS232_TxData),
	.RW(RW),
	.sck_o(sck_o),
	.SCL(SCL),
	.SDA(SDA),
	.SSN_O(SSN_O),
	.SW(SW),
	.TraceRequest_L(TraceRequest_L),
	.UDS_L(UDS_L),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC_N(VGA_SYNC_N),
	.VGA_VS(VGA_VS)
);
initial 
begin 
#25000000 $finish;
end 

// Reset_L
initial
begin
	Reset_L = 1'b0;
	Reset_L = #90000 1'b1;
end 

// SW[8]
initial
begin
	SW[8] = 1'b0;
end 

// IRQ4_L
initial
begin
	IRQ4_L = 1'b1;
end 

// IRQ2_L
initial
begin
	IRQ2_L = 1'b1;
end 

// TraceRequest_L
initial
begin
	TraceRequest_L = 1'b1;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 
endmodule

