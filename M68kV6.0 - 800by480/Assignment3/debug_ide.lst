680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 03 Mar 2022      Time: 19:30:49          Source: C:\M68KV6.0 - 800BY480\ASSIGNMENT3\DEBUG_IDE.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2D58      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  239E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; #define Enable_SPI_CS() SPI_CS = 0xFE
                     478   ; #define Disable_SPI_CS() SPI_CS = 0xFF
                     479   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     480   ; unsigned int i, x, y, z, PortA_Count;
                     481   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     482   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     483   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     484   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     485   ; unsigned int PC, SSP, USP ;
                     486   ; unsigned short int SR;
                     487   ; // Breakpoint variables
                     488   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     489   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     490   ; unsigned int BreakPointSetOrCleared[8] ;
                     491   ; unsigned int InstructionSize ;
                     492   ; // watchpoint variables
                     493   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     494   ; unsigned int WatchPointSetOrCleared[8] ;
                     495   ; char WatchPointString[8][100] ;
                     496   ; char    TempString[100] ;
                     497   ; /*******************************************************************************************
                     498   ; ** Function Prototypes
                     499   ; *******************************************************************************************/
                     500   ; int TestForSPITransmitDataComplete(void);
                     501   ; void SPI_Init(void);
                     502   ; void WaitForSPITransmitComplete(void);
                     503   ; void WaitWriteSPIComplete(void);
                     504   ; int WriteSPIChar(int c);
                     505   ; void WriteSPIData(char *memory_address, int flash_address, int size);
                     506   ; void ReadSPIData(char *memory_address, int flash_address, int size);
                     507   ; void EraseSPIFlashChip(void);
                     508   ; void WriteSPIInstruction(int instruction);
                     509   ; /************************************************************************************
                     510   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     511   ; ************************************************************************************/
                     512   ; void Wait1ms(void)
                     513   ; {
                     514   _Wait1ms:
00000932  2F02       515          move.l    D2,-(A7)
                     516   ; long int  i ;
                     517   ; for(i = 0; i < 1000; i ++)
00000934  4282       518          clr.l     D2
                     519   Wait1ms_1:
00000936  0C82 0000  520          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       521          bge.s     Wait1ms_3
0000093E  5282       522          addq.l    #1,D2
00000940  60F4       523          bra       Wait1ms_1
                     524   Wait1ms_3:
00000942  241F       525          move.l    (A7)+,D2
00000944  4E75       526          rts
                     527   ; ;
                     528   ; }
                     529   ; /************************************************************************************
                     530   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     531   ; **************************************************************************************/
                     532   ; void Wait3ms(void)
                     533   ; {
                     534   _Wait3ms:
00000946  2F02       535          move.l    D2,-(A7)
                     536   ; int i ;
                     537   ; for(i = 0; i < 3; i++)
00000948  4282       538          clr.l     D2
                     539   Wait3ms_1:
0000094A  0C82 0000  540          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       541          bge.s     Wait3ms_3
                     542   ; Wait1ms() ;
00000952  4EB8 0932  543          jsr       _Wait1ms
00000956  5282       544          addq.l    #1,D2
00000958  60F0       545          bra       Wait3ms_1
                     546   Wait3ms_3:
0000095A  241F       547          move.l    (A7)+,D2
0000095C  4E75       548          rts
                     549   ; }
                     550   ; /*********************************************************************************************
                     551   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     552   ; *********************************************************************************************/
                     553   ; void Init_LCD(void)
                     554   ; {
                     555   _Init_LCD:
                     556   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  557          move.b    #12,4194336
00000962  0040 0020 
                     558   ; Wait3ms() ;
00000966  4EB8 0946  559          jsr       _Wait3ms
                     560   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  561          move.b    #56,4194336
0000096E  0040 0020 
                     562   ; Wait3ms() ;
00000972  4EB8 0946  563          jsr       _Wait3ms
00000976  4E75       564          rts
                     565   ; }
                     566   ; /******************************************************************************
                     567   ; *subroutine to output a single character held in d1 to the LCD display
                     568   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     569   ; *current cursor position
                     570   ; *******************************************************************************/
                     571   ; void Outchar(int c)
                     572   ; {
                     573   _Outchar:
00000978  4E56 0000  574          link      A6,#0
                     575   ; LCDdata = (char)(c);
0000097C  202E 0008  576          move.l    8(A6),D0
00000980  13C0 0040  577          move.b    D0,4194338
00000984  0022      
                     578   ; Wait1ms() ;
00000986  4EB8 0932  579          jsr       _Wait1ms
0000098A  4E5E       580          unlk      A6
0000098C  4E75       581          rts
                     582   ; }
                     583   ; /**********************************************************************************
                     584   ; *subroutine to output a message at the current cursor position of the LCD display
                     585   ; ************************************************************************************/
                     586   ; void OutMess(char *theMessage)
                     587   ; {
                     588   _OutMess:
0000098E  4E56 FFFC  589          link      A6,#-4
                     590   ; char c ;
                     591   ; while((c = *theMessage++) != (char)(0))
                     592   OutMess_1:
00000992  206E 0008  593          move.l    8(A6),A0
00000996  52AE 0008  594          addq.l    #1,8(A6)
0000099A  1D50 FFFF  595          move.b    (A0),-1(A6)
0000099E  1010       596          move.b    (A0),D0
000009A0  6712       597          beq.s     OutMess_3
                     598   ; Outchar(c) ;
000009A2  122E FFFF  599          move.b    -1(A6),D1
000009A6  4881       600          ext.w     D1
000009A8  48C1       601          ext.l     D1
000009AA  2F01       602          move.l    D1,-(A7)
000009AC  4EB8 0978  603          jsr       _Outchar
000009B0  584F       604          addq.w    #4,A7
000009B2  60DE       605          bra       OutMess_1
                     606   OutMess_3:
000009B4  4E5E       607          unlk      A6
000009B6  4E75       608          rts
                     609   ; }
                     610   ; /******************************************************************************
                     611   ; *subroutine to clear the line by issuing 24 space characters
                     612   ; *******************************************************************************/
                     613   ; void Clearln(void)
                     614   ; {
                     615   _Clearln:
000009B8  2F02       616          move.l    D2,-(A7)
                     617   ; unsigned char i ;
                     618   ; for(i = 0; i < 24; i ++)
000009BA  4202       619          clr.b     D2
                     620   Clearln_1:
000009BC  0C02 0018  621          cmp.b     #24,D2
000009C0  640E       622          bhs.s     Clearln_3
                     623   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  624          pea       32
000009C6  4EB8 0978  625          jsr       _Outchar
000009CA  584F       626          addq.w    #4,A7
000009CC  5202       627          addq.b    #1,D2
000009CE  60EC       628          bra       Clearln_1
                     629   Clearln_3:
000009D0  241F       630          move.l    (A7)+,D2
000009D2  4E75       631          rts
                     632   ; }
                     633   ; /******************************************************************************
                     634   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     635   ; *******************************************************************************/
                     636   ; void Oline0(char *theMessage)
                     637   ; {
                     638   _Oline0:
000009D4  4E56 0000  639          link      A6,#0
                     640   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  641          move.b    #128,4194336
000009DC  0040 0020 
                     642   ; Wait3ms();
000009E0  4EB8 0946  643          jsr       _Wait3ms
                     644   ; Clearln() ;
000009E4  4EB8 09B8  645          jsr       _Clearln
                     646   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  647          move.b    #128,4194336
000009EC  0040 0020 
                     648   ; Wait3ms() ;
000009F0  4EB8 0946  649          jsr       _Wait3ms
                     650   ; OutMess(theMessage) ;
000009F4  2F2E 0008  651          move.l    8(A6),-(A7)
000009F8  4EB8 098E  652          jsr       _OutMess
000009FC  584F       653          addq.w    #4,A7
000009FE  4E5E       654          unlk      A6
00000A00  4E75       655          rts
                     656   ; }
                     657   ; /******************************************************************************
                     658   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     659   ; *******************************************************************************/
                     660   ; void Oline1(char *theMessage)
                     661   ; {
                     662   _Oline1:
00000A02  4E56 0000  663          link      A6,#0
                     664   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  665          move.b    #192,4194336
00000A0A  0040 0020 
                     666   ; Wait3ms();
00000A0E  4EB8 0946  667          jsr       _Wait3ms
                     668   ; Clearln() ;
00000A12  4EB8 09B8  669          jsr       _Clearln
                     670   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  671          move.b    #192,4194336
00000A1A  0040 0020 
                     672   ; Wait3ms() ;
00000A1E  4EB8 0946  673          jsr       _Wait3ms
                     674   ; OutMess(theMessage) ;
00000A22  2F2E 0008  675          move.l    8(A6),-(A7)
00000A26  4EB8 098E  676          jsr       _OutMess
00000A2A  584F       677          addq.w    #4,A7
00000A2C  4E5E       678          unlk      A6
00000A2E  4E75       679          rts
                     680   ; }
                     681   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     682   ; {
                     683   _InstallExceptionHandler:
00000A30  4E56 FFFC  684          link      A6,#-4
                     685   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  686          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     687   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  688          move.l    -4(A6),A0
00000A40  202E 000C  689          move.l    12(A6),D0
00000A44  E588       690          lsl.l     #2,D0
00000A46  21AE 0008  691          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       692          unlk      A6
00000A4E  4E75       693          rts
                     694   ; }
                     695   ; void TestLEDS(void)
                     696   ; {
                     697   _TestLEDS:
00000A50  48E7 3000  698          movem.l   D2/D3,-(A7)
                     699   ; int delay ;
                     700   ; unsigned char count = 0 ;
00000A54  4202       701          clr.b     D2
                     702   ; while(1)    {
                     703   TestLEDS_1:
                     704   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       705          move.b    D2,D0
00000A58  E908       706          lsl.b     #4,D0
00000A5A  1202       707          move.b    D2,D1
00000A5C  C23C 000F  708          and.b     #15,D1
00000A60  D001       709          add.b     D1,D0
00000A62  13C0 0040  710          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  711          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  712          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  713          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  714          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  715          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  716          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  717          move.b    D0,4194304
00000A90  0000      
                     718   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       719          clr.l     D3
                     720   TestLEDS_4:
00000A94  0C83 0003  721          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       722          bge.s     TestLEDS_6
00000A9C  5283       723          addq.l    #1,D3
00000A9E  60F4       724          bra       TestLEDS_4
                     725   TestLEDS_6:
                     726   ; ;
                     727   ; count ++;
00000AA0  5202       728          addq.b    #1,D2
00000AA2  60B2       729          bra       TestLEDS_1
                     730   ; }
                     731   ; }
                     732   ; void SwitchTest(void)
                     733   ; {
                     734   _SwitchTest:
00000AA4  48E7 3020  735          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  736          lea       _printf.L,A2
00000AAC  31DE      
                     737   ; int i, switches = 0 ;
00000AAE  4283       738          clr.l     D3
                     739   ; printf("\r\n") ;
00000AB0  4879 0000  740          pea       @m68kde~1_1.L
00000AB4  3AF0      
00000AB6  4E92       741          jsr       (A2)
00000AB8  584F       742          addq.w    #4,A7
                     743   ; while(1)    {
                     744   SwitchTest_1:
                     745   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  746          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  747          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       748          lsl.l     #8,D0
00000AC8  1239 0040  749          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  750          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       751          or.l      D1,D0
00000AD6  2600       752          move.l    D0,D3
                     753   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  754          pea       @m68kde~1_2.L
00000ADC  3AF4      
00000ADE  4E92       755          jsr       (A2)
00000AE0  584F       756          addq.w    #4,A7
                     757   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  758          move.l    #128,D2
00000AE6  0080      
                     759   SwitchTest_4:
00000AE8  0C82 0000  760          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       761          ble.s     SwitchTest_6
                     762   ; if((switches & i) == 0)
00000AF0  2003       763          move.l    D3,D0
00000AF2  C082       764          and.l     D2,D0
00000AF4  660C       765          bne.s     SwitchTest_7
                     766   ; printf("0") ;
00000AF6  4879 0000  767          pea       @m68kde~1_3.L
00000AFA  3B0A      
00000AFC  4E92       768          jsr       (A2)
00000AFE  584F       769          addq.w    #4,A7
00000B00  600A       770          bra.s     SwitchTest_8
                     771   SwitchTest_7:
                     772   ; else
                     773   ; printf("1") ;
00000B02  4879 0000  774          pea       @m68kde~1_4.L
00000B06  3B0C      
00000B08  4E92       775          jsr       (A2)
00000B0A  584F       776          addq.w    #4,A7
                     777   SwitchTest_8:
00000B0C  E282       778          asr.l     #1,D2
00000B0E  60D8       779          bra       SwitchTest_4
                     780   SwitchTest_6:
00000B10  60A8       781          bra       SwitchTest_1
                     782   ; }
                     783   ; }
                     784   ; }
                     785   ; /*********************************************************************************************
                     786   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     787   ; *********************************************************************************************/
                     788   ; void Init_RS232(void)
                     789   ; {
                     790   _Init_RS232:
                     791   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  792          move.b    #21,4194368
00000B16  0040 0040 
                     793   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  794          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       795          rts
                     796   ; }
                     797   ; int kbhit(void)
                     798   ; {
                     799   _kbhit:
                     800   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  801          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  802          and.b     #1,D0
00000B2E  0C00 0001  803          cmp.b     #1,D0
00000B32  6604       804          bne.s     kbhit_1
                     805   ; return 1 ;
00000B34  7001       806          moveq     #1,D0
00000B36  6002       807          bra.s     kbhit_3
                     808   kbhit_1:
                     809   ; else
                     810   ; return 0 ;
00000B38  4280       811          clr.l     D0
                     812   kbhit_3:
00000B3A  4E75       813          rts
                     814   ; }
                     815   ; /*********************************************************************************************************
                     816   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     817   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     818   ; **  to allow the board to communicate with HyperTerminal Program
                     819   ; **
                     820   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     821   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     822   ; **  call _putch() also
                     823   ; *********************************************************************************************************/
                     824   ; int _putch( int c)
                     825   ; {
                     826   __putch:
00000B3C  4E56 0000  827          link      A6,#0
                     828   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     829   _putch_1:
00000B40  1039 0040  830          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  831          and.b     #2,D0
00000B4A  0C00 0002  832          cmp.b     #2,D0
00000B4E  6702       833          beq.s     _putch_3
00000B50  60EE       834          bra       _putch_1
                     835   _putch_3:
                     836   ; ;
                     837   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  838          move.l    8(A6),D0
00000B56  C03C 007F  839          and.b     #127,D0
00000B5A  13C0 0040  840          move.b    D0,4194370
00000B5E  0042      
                     841   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  842          move.l    8(A6),D0
00000B64  4E5E       843          unlk      A6
00000B66  4E75       844          rts
                     845   ; }
                     846   ; /*********************************************************************************************************
                     847   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     848   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     849   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     850   ; **
                     851   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     852   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     853   ; **  call _getch() also
                     854   ; *********************************************************************************************************/
                     855   ; int _getch( void )
                     856   ; {
                     857   __getch:
00000B68  2F02       858          move.l    D2,-(A7)
                     859   ; int c ;
                     860   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     861   _getch_1:
00000B6A  1039 0040  862          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  863          and.b     #1,D0
00000B74  0C00 0001  864          cmp.b     #1,D0
00000B78  6702       865          beq.s     _getch_3
00000B7A  60EE       866          bra       _getch_1
                     867   _getch_3:
                     868   ; ;
                     869   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  870          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  871          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  872          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       873          move.l    D0,D2
                     874   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     875   ; if(Echo)
00000B90  4AB9 0B00  876          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       877          beq.s     _getch_4
                     878   ; _putch(c);
00000B98  2F02       879          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  880          jsr       __putch
00000B9E  584F       881          addq.w    #4,A7
                     882   _getch_4:
                     883   ; return c ;
00000BA0  2002       884          move.l    D2,D0
00000BA2  241F       885          move.l    (A7)+,D2
00000BA4  4E75       886          rts
                     887   ; }
                     888   ; // flush the input stream for any unread characters
                     889   ; void FlushKeyboard(void)
                     890   ; {
                     891   _FlushKeyboard:
00000BA6  4E56 FFFC  892          link      A6,#-4
                     893   ; char c ;
                     894   ; while(1)    {
                     895   FlushKeyboard_1:
                     896   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  897          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  898          and.b     #1,D0
00000BB4  0C00 0001  899          cmp.b     #1,D0
00000BB8  6610       900          bne.s     FlushKeyboard_4
                     901   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  902          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  903          and.b     #127,D0
00000BC4  1D40 FFFF  904          move.b    D0,-1(A6)
00000BC8  6002       905          bra.s     FlushKeyboard_5
                     906   FlushKeyboard_4:
                     907   ; else
                     908   ; return ;
00000BCA  6002       909          bra.s     FlushKeyboard_6
                     910   FlushKeyboard_5:
00000BCC  60DC       911          bra       FlushKeyboard_1
                     912   FlushKeyboard_6:
00000BCE  4E5E       913          unlk      A6
00000BD0  4E75       914          rts
                     915   ; }
                     916   ; }
                     917   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     918   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     919   ; char xtod(int c)
                     920   ; {
                     921   _xtod:
00000BD2  4E56 0000  922          link      A6,#0
00000BD6  2F02       923          move.l    D2,-(A7)
00000BD8  242E 0008  924          move.l    8(A6),D2
                     925   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  926          cmp.b     #57,D2
00000BE0  6E08       927          bgt.s     xtod_1
                     928   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       929          move.b    D2,D0
00000BE4  0400 0030  930          sub.b     #48,D0
00000BE8  6014       931          bra.s     xtod_3
                     932   xtod_1:
                     933   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  934          cmp.b     #70,D2
00000BEE  6F08       935          ble.s     xtod_4
                     936   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       937          move.b    D2,D0
00000BF2  0400 0057  938          sub.b     #87,D0
00000BF6  6006       939          bra.s     xtod_3
                     940   xtod_4:
                     941   ; else
                     942   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       943          move.b    D2,D0
00000BFA  0400 0037  944          sub.b     #55,D0
                     945   xtod_3:
00000BFE  241F       946          move.l    (A7)+,D2
00000C00  4E5E       947          unlk      A6
00000C02  4E75       948          rts
                     949   ; }
                     950   ; int Get2HexDigits(char *CheckSumPtr)
                     951   ; {
                     952   _Get2HexDigits:
00000C04  4E56 0000  953          link      A6,#0
00000C08  2F02       954          move.l    D2,-(A7)
                     955   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       956          move.l    D0,-(A7)
00000C0C  4EB8 0B68  957          jsr       __getch
00000C10  2200       958          move.l    D0,D1
00000C12  201F       959          move.l    (A7)+,D0
00000C14  2F01       960          move.l    D1,-(A7)
00000C16  4EB8 0BD2  961          jsr       _xtod
00000C1A  584F       962          addq.w    #4,A7
00000C1C  C0BC 0000  963          and.l     #255,D0
00000C20  00FF      
00000C22  E980       964          asl.l     #4,D0
00000C24  2F00       965          move.l    D0,-(A7)
00000C26  2F01       966          move.l    D1,-(A7)
00000C28  4EB8 0B68  967          jsr       __getch
00000C2C  221F       968          move.l    (A7)+,D1
00000C2E  2F00       969          move.l    D0,-(A7)
00000C30  4EB8 0BD2  970          jsr       _xtod
00000C34  584F       971          addq.w    #4,A7
00000C36  2200       972          move.l    D0,D1
00000C38  201F       973          move.l    (A7)+,D0
00000C3A  C2BC 0000  974          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       975          or.l      D1,D0
00000C42  2400       976          move.l    D0,D2
                     977   ; if(CheckSumPtr)
00000C44  4AAE 0008  978          tst.l     8(A6)
00000C48  6706       979          beq.s     Get2HexDigits_1
                     980   ; *CheckSumPtr += i ;
00000C4A  206E 0008  981          move.l    8(A6),A0
00000C4E  D510       982          add.b     D2,(A0)
                     983   Get2HexDigits_1:
                     984   ; return i ;
00000C50  2002       985          move.l    D2,D0
00000C52  241F       986          move.l    (A7)+,D2
00000C54  4E5E       987          unlk      A6
00000C56  4E75       988          rts
                     989   ; }
                     990   ; int Get4HexDigits(char *CheckSumPtr)
                     991   ; {
                     992   _Get4HexDigits:
00000C58  4E56 0000  993          link      A6,#0
                     994   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  995          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  996          jsr       _Get2HexDigits
00000C64  584F       997          addq.w    #4,A7
00000C66  E180       998          asl.l     #8,D0
00000C68  2F00       999          move.l    D0,-(A7)
00000C6A  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04 1001          jsr       _Get2HexDigits
00000C72  584F      1002          addq.w    #4,A7
00000C74  2200      1003          move.l    D0,D1
00000C76  201F      1004          move.l    (A7)+,D0
00000C78  8081      1005          or.l      D1,D0
00000C7A  4E5E      1006          unlk      A6
00000C7C  4E75      1007          rts
                    1008   ; }
                    1009   ; int Get6HexDigits(char *CheckSumPtr)
                    1010   ; {
                    1011   _Get6HexDigits:
00000C7E  4E56 0000 1012          link      A6,#0
                    1013   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1014          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1015          jsr       _Get4HexDigits
00000C8A  584F      1016          addq.w    #4,A7
00000C8C  E180      1017          asl.l     #8,D0
00000C8E  2F00      1018          move.l    D0,-(A7)
00000C90  2F2E 0008 1019          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1020          jsr       _Get2HexDigits
00000C98  584F      1021          addq.w    #4,A7
00000C9A  2200      1022          move.l    D0,D1
00000C9C  201F      1023          move.l    (A7)+,D0
00000C9E  8081      1024          or.l      D1,D0
00000CA0  4E5E      1025          unlk      A6
00000CA2  4E75      1026          rts
                    1027   ; }
                    1028   ; int Get8HexDigits(char *CheckSumPtr)
                    1029   ; {
                    1030   _Get8HexDigits:
00000CA4  4E56 0000 1031          link      A6,#0
                    1032   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1033          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1034          jsr       _Get4HexDigits
00000CB0  584F      1035          addq.w    #4,A7
00000CB2  E180      1036          asl.l     #8,D0
00000CB4  E180      1037          asl.l     #8,D0
00000CB6  2F00      1038          move.l    D0,-(A7)
00000CB8  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1040          jsr       _Get4HexDigits
00000CC0  584F      1041          addq.w    #4,A7
00000CC2  2200      1042          move.l    D0,D1
00000CC4  201F      1043          move.l    (A7)+,D0
00000CC6  8081      1044          or.l      D1,D0
00000CC8  4E5E      1045          unlk      A6
00000CCA  4E75      1046          rts
                    1047   ; }
                    1048   ; void DumpMemory(void)   // simple dump memory fn
                    1049   ; {
                    1050   _DumpMemory:
00000CCC  48E7 3C30 1051          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1052          lea       _printf.L,A2
00000CD4  31DE      
00000CD6  47F9 0000 1053          lea       _putch.L,A3
00000CDA  30FA      
                    1054   ; int i, j ;
                    1055   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1056   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1057          pea       @m68kde~1_5.L
00000CE0  3B0E      
00000CE2  4E92      1058          jsr       (A2)
00000CE4  584F      1059          addq.w    #4,A7
                    1060   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1061          pea       @m68kde~1_6.L
00000CEA  3B48      
00000CEC  4E92      1062          jsr       (A2)
00000CEE  584F      1063          addq.w    #4,A7
                    1064   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1065          clr.l     -(A7)
00000CF2  4EB8 0CA4 1066          jsr       _Get8HexDigits
00000CF6  584F      1067          addq.w    #4,A7
00000CF8  2600      1068          move.l    D0,D3
                    1069   ; while(1)    {
                    1070   DumpMemory_1:
                    1071   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1072          clr.l     D5
                    1073   DumpMemory_4:
00000CFC  0C85 0000 1074          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1075          bge       DumpMemory_6
                    1076   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1077          move.l    D3,-(A7)
00000D08  4879 0000 1078          pea       @m68kde~1_7.L
00000D0C  3B60      
00000D0E  4E92      1079          jsr       (A2)
00000D10  504F      1080          addq.w    #8,A7
                    1081   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1082          clr.l     D2
                    1083   DumpMemory_7:
00000D14  0C82 0000 1084          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1085          bge.s     DumpMemory_9
                    1086   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1087          move.l    D3,A0
00000D1E  1230 2800 1088          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1089          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1090          move.l    D1,-(A7)
00000D2A  4879 0000 1091          pea       @m68kde~1_8.L
00000D2E  3B68      
00000D30  4E92      1092          jsr       (A2)
00000D32  504F      1093          addq.w    #8,A7
                    1094   ; putchar(' ') ;
00000D34  4878 0020 1095          pea       32
00000D38  4E93      1096          jsr       (A3)
00000D3A  584F      1097          addq.w    #4,A7
00000D3C  5282      1098          addq.l    #1,D2
00000D3E  60D4      1099          bra       DumpMemory_7
                    1100   DumpMemory_9:
                    1101   ; }
                    1102   ; // now display the data as ASCII at the end
                    1103   ; printf("  ") ;
00000D40  4879 0000 1104          pea       @m68kde~1_9.L
00000D44  3B6E      
00000D46  4E92      1105          jsr       (A2)
00000D48  584F      1106          addq.w    #4,A7
                    1107   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1108          clr.l     D2
                    1109   DumpMemory_10:
00000D4C  0C82 0000 1110          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1111          bge       DumpMemory_12
                    1112   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1113          move.l    D3,A0
00000D58  1030 2800 1114          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1115          and.b     #127,D0
00000D60  1800      1116          move.b    D0,D4
                    1117   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1118          cmp.b     #127,D4
00000D66  6206      1119          bhi.s     DumpMemory_15
00000D68  0C04 0020 1120          cmp.b     #32,D4
00000D6C  640A      1121          bhs.s     DumpMemory_13
                    1122   DumpMemory_15:
                    1123   ; putchar('.') ;
00000D6E  4878 002E 1124          pea       46
00000D72  4E93      1125          jsr       (A3)
00000D74  584F      1126          addq.w    #4,A7
00000D76  6012      1127          bra.s     DumpMemory_14
                    1128   DumpMemory_13:
                    1129   ; else
                    1130   ; putchar(RamPtr[j]) ;
00000D78  2043      1131          move.l    D3,A0
00000D7A  1230 2800 1132          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1133          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1134          move.l    D1,-(A7)
00000D86  4E93      1135          jsr       (A3)
00000D88  584F      1136          addq.w    #4,A7
                    1137   DumpMemory_14:
00000D8A  5282      1138          addq.l    #1,D2
00000D8C  60BE      1139          bra       DumpMemory_10
                    1140   DumpMemory_12:
                    1141   ; }
                    1142   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1143          add.l     #16,D3
00000D92  0010      
00000D94  5285      1144          addq.l    #1,D5
00000D96  6000 FF64 1145          bra       DumpMemory_4
                    1146   DumpMemory_6:
                    1147   ; }
                    1148   ; printf("\r\n") ;
00000D9A  4879 0000 1149          pea       @m68kde~1_1.L
00000D9E  3AF0      
00000DA0  4E92      1150          jsr       (A2)
00000DA2  584F      1151          addq.w    #4,A7
                    1152   ; c = _getch() ;
00000DA4  4EB8 0B68 1153          jsr       __getch
00000DA8  1800      1154          move.b    D0,D4
                    1155   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1156          cmp.b     #27,D4
00000DAE  6602      1157          bne.s     DumpMemory_16
                    1158   ; break ;
00000DB0  6004      1159          bra.s     DumpMemory_3
                    1160   DumpMemory_16:
00000DB2  6000 FF46 1161          bra       DumpMemory_1
                    1162   DumpMemory_3:
00000DB6  4CDF 0C3C 1163          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1164          rts
                    1165   ; }
                    1166   ; }
                    1167   ; void FillMemory()
                    1168   ; {
                    1169   _FillMemory:
00000DBC  48E7 3820 1170          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1171          lea       _printf.L,A2
00000DC4  31DE      
                    1172   ; char *StartRamPtr, *EndRamPtr ;
                    1173   ; unsigned char FillData ;
                    1174   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1175          pea       @m68kde~1_10.L
00000DCA  3B72      
00000DCC  4E92      1176          jsr       (A2)
00000DCE  584F      1177          addq.w    #4,A7
                    1178   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1179          pea       @m68kde~1_6.L
00000DD4  3B48      
00000DD6  4E92      1180          jsr       (A2)
00000DD8  584F      1181          addq.w    #4,A7
                    1182   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1183          clr.l     -(A7)
00000DDC  4EB8 0CA4 1184          jsr       _Get8HexDigits
00000DE0  584F      1185          addq.w    #4,A7
00000DE2  2400      1186          move.l    D0,D2
                    1187   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1188          pea       @m68kde~1_11.L
00000DE8  3B86      
00000DEA  4E92      1189          jsr       (A2)
00000DEC  584F      1190          addq.w    #4,A7
                    1191   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1192          clr.l     -(A7)
00000DF0  4EB8 0CA4 1193          jsr       _Get8HexDigits
00000DF4  584F      1194          addq.w    #4,A7
00000DF6  2800      1195          move.l    D0,D4
                    1196   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1197          pea       @m68kde~1_12.L
00000DFC  3B9C      
00000DFE  4E92      1198          jsr       (A2)
00000E00  584F      1199          addq.w    #4,A7
                    1200   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1201          clr.l     -(A7)
00000E04  4EB8 0C04 1202          jsr       _Get2HexDigits
00000E08  584F      1203          addq.w    #4,A7
00000E0A  1600      1204          move.b    D0,D3
                    1205   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1206          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1207          move.l    D3,-(A7)
00000E14  2F04      1208          move.l    D4,-(A7)
00000E16  2F02      1209          move.l    D2,-(A7)
00000E18  4879 0000 1210          pea       @m68kde~1_13.L
00000E1C  3BB0      
00000E1E  4E92      1211          jsr       (A2)
00000E20  DEFC 0010 1212          add.w     #16,A7
                    1213   ; while(StartRamPtr < EndRamPtr)
                    1214   FillMemory_1:
00000E24  B484      1215          cmp.l     D4,D2
00000E26  6408      1216          bhs.s     FillMemory_3
                    1217   ; *StartRamPtr++ = FillData ;
00000E28  2042      1218          move.l    D2,A0
00000E2A  5282      1219          addq.l    #1,D2
00000E2C  1083      1220          move.b    D3,(A0)
00000E2E  60F4      1221          bra       FillMemory_1
                    1222   FillMemory_3:
00000E30  4CDF 041C 1223          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1224          rts
                    1225   ; }
                    1226   ; void Load_SRecordFile()
                    1227   ; {
                    1228   _Load_SRecordFile:
00000E36  4E56 FFDC 1229          link      A6,#-36
00000E3A  48E7 3F3C 1230          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1231          lea       -6(A6),A2
00000E42  47F8 0C04 1232          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1233          lea       _printf.L,A4
00000E4A  31DE      
                    1234   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1235          clr.l     -18(A6)
00000E50  3A7C 0000 1236          move.w    #0,A5
                    1237   ; int result, ByteCount ;
                    1238   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1239   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1240   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1241          moveq     #0,D7
                    1242   ; AddressFail = 0 ;
00000E56  42AE FFEA 1243          clr.l     -22(A6)
                    1244   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1245          clr.l     _Echo.L
00000E5E  00E0      
                    1246   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1247          pea       @m68kde~1_14.L
00000E64  3BE0      
00000E66  4E94      1248          jsr       (A4)
00000E68  584F      1249          addq.w    #4,A7
                    1250   ; while(1)    {
                    1251   Load_SRecordFile_1:
                    1252   ; CheckSum = 0 ;
00000E6A  4212      1253          clr.b     (A2)
                    1254   ; do {
                    1255   Load_SRecordFile_4:
                    1256   ; c = toupper(_getch()) ;
00000E6C  2F00      1257          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1258          jsr       __getch
00000E72  2200      1259          move.l    D0,D1
00000E74  201F      1260          move.l    (A7)+,D0
00000E76  2F01      1261          move.l    D1,-(A7)
00000E78  4EB9 0000 1262          jsr       _toupper
00000E7C  31C2      
00000E7E  584F      1263          addq.w    #4,A7
00000E80  1C00      1264          move.b    D0,D6
                    1265   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1266          cmp.b     #27,D6
00000E86  6604      1267          bne.s     Load_SRecordFile_6
                    1268   ; return;
00000E88  6000 0132 1269          bra       Load_SRecordFile_8
                    1270   Load_SRecordFile_6:
00000E8C  0C06 0053 1271          cmp.b     #83,D6
00000E90  66DA      1272          bne       Load_SRecordFile_4
                    1273   ; }while(c != (char)('S'));   // wait for S start of header
                    1274   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1275          jsr       __getch
00000E96  1600      1276          move.b    D0,D3
                    1277   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1278          cmp.b     #48,D3
00000E9C  6706      1279          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1280          cmp.b     #53,D3
00000EA2  6604      1281          bne.s     Load_SRecordFile_9
                    1282   Load_SRecordFile_11:
                    1283   ; continue ;
00000EA4  6000 00D2 1284          bra       Load_SRecordFile_23
                    1285   Load_SRecordFile_9:
                    1286   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1287          cmp.b     #55,D3
00000EAC  6D04      1288          blt.s     Load_SRecordFile_12
                    1289   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1290          bra       Load_SRecordFile_3
                    1291   Load_SRecordFile_12:
                    1292   ; // get the bytecount
                    1293   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1294          move.l    A2,-(A7)
00000EB4  4E93      1295          jsr       (A3)
00000EB6  584F      1296          addq.w    #4,A7
00000EB8  2D40 FFF6 1297          move.l    D0,-10(A6)
                    1298   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1299   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1300          cmp.b     #49,D3
00000EC0  660E      1301          bne.s     Load_SRecordFile_14
                    1302   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1303          moveq     #2,D5
                    1304   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1305          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1306          jsr       _Get4HexDigits
00000ECA  584F      1307          addq.w    #4,A7
00000ECC  2800      1308          move.l    D0,D4
00000ECE  6020      1309          bra.s     Load_SRecordFile_17
                    1310   Load_SRecordFile_14:
                    1311   ; }
                    1312   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1313          cmp.b     #50,D3
00000ED4  660E      1314          bne.s     Load_SRecordFile_16
                    1315   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1316          moveq     #3,D5
                    1317   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1318          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1319          jsr       _Get6HexDigits
00000EDE  584F      1320          addq.w    #4,A7
00000EE0  2800      1321          move.l    D0,D4
00000EE2  600C      1322          bra.s     Load_SRecordFile_17
                    1323   Load_SRecordFile_16:
                    1324   ; }
                    1325   ; else    {
                    1326   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1327          moveq     #4,D5
                    1328   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1329          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1330          jsr       _Get8HexDigits
00000EEC  584F      1331          addq.w    #4,A7
00000EEE  2800      1332          move.l    D0,D4
                    1333   Load_SRecordFile_17:
                    1334   ; }
                    1335   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1336          move.l    D4,-4(A6)
                    1337   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1338          move.l    -10(A6),D0
00000EF8  9085      1339          sub.l     D5,D0
00000EFA  5380      1340          subq.l    #1,D0
00000EFC  2D40 FFE2 1341          move.l    D0,-30(A6)
                    1342   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1343          clr.l     D2
                    1344   Load_SRecordFile_18:
00000F02  B4AE FFE2 1345          cmp.l     -30(A6),D2
00000F06  6C1E      1346          bge.s     Load_SRecordFile_20
                    1347   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1348          move.l    A2,-(A7)
00000F0A  4E93      1349          jsr       (A3)
00000F0C  584F      1350          addq.w    #4,A7
00000F0E  2D40 FFDE 1351          move.l    D0,-34(A6)
                    1352   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1353          move.l    -34(A6),D0
00000F16  206E FFFC 1354          move.l    -4(A6),A0
00000F1A  52AE FFFC 1355          addq.l    #1,-4(A6)
00000F1E  1080      1356          move.b    D0,(A0)
                    1357   ; ByteTotal++;
00000F20  524D      1358          addq.w    #1,A5
00000F22  5282      1359          addq.l    #1,D2
00000F24  60DC      1360          bra       Load_SRecordFile_18
                    1361   Load_SRecordFile_20:
                    1362   ; }
                    1363   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1364   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1365          clr.l     -(A7)
00000F28  4E93      1366          jsr       (A3)
00000F2A  584F      1367          addq.w    #4,A7
00000F2C  1D40 FFFB 1368          move.b    D0,-5(A6)
                    1369   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1370          move.b    (A2),D0
00000F32  4600      1371          not.b     D0
00000F34  4880      1372          ext.w     D0
00000F36  C07C 00FF 1373          and.w     #255,D0
00000F3A  122E FFFB 1374          move.b    -5(A6),D1
00000F3E  4881      1375          ext.w     D1
00000F40  C27C 00FF 1376          and.w     #255,D1
00000F44  B041      1377          cmp.w     D1,D0
00000F46  6708      1378          beq.s     Load_SRecordFile_21
                    1379   ; LoadFailed = 1 ;
00000F48  7E01      1380          moveq     #1,D7
                    1381   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1382          move.l    D4,-26(A6)
                    1383   ; break;
00000F4E  602C      1384          bra.s     Load_SRecordFile_3
                    1385   Load_SRecordFile_21:
                    1386   ; }
                    1387   ; SRecordCount++ ;
00000F50  52AE FFEE 1388          addq.l    #1,-18(A6)
                    1389   ; // display feedback on progress
                    1390   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1391          move.l    -18(A6),-(A7)
00000F58  4878 0019 1392          pea       25
00000F5C  4EB9 0000 1393          jsr       LDIV
00000F60  302E      
00000F62  202F 0004 1394          move.l    4(A7),D0
00000F66  504F      1395          addq.w    #8,A7
00000F68  4A80      1396          tst.l     D0
00000F6A  660C      1397          bne.s     Load_SRecordFile_23
                    1398   ; putchar('.') ;
00000F6C  4878 002E 1399          pea       46
00000F70  4EB9 0000 1400          jsr       _putch
00000F74  30FA      
00000F76  584F      1401          addq.w    #4,A7
                    1402   Load_SRecordFile_23:
00000F78  6000 FEF0 1403          bra       Load_SRecordFile_1
                    1404   Load_SRecordFile_3:
                    1405   ; }
                    1406   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1407          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1408          bne.s     Load_SRecordFile_25
                    1409   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1410          move.l    -26(A6),-(A7)
00000F88  4879 0000 1411          pea       @m68kde~1_15.L
00000F8C  3C10      
00000F8E  4E94      1412          jsr       (A4)
00000F90  504F      1413          addq.w    #8,A7
00000F92  600C      1414          bra.s     Load_SRecordFile_26
                    1415   Load_SRecordFile_25:
                    1416   ; }
                    1417   ; else
                    1418   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1419          move.l    A5,-(A7)
00000F96  4879 0000 1420          pea       @m68kde~1_16.L
00000F9A  3C36      
00000F9C  4E94      1421          jsr       (A4)
00000F9E  504F      1422          addq.w    #8,A7
                    1423   Load_SRecordFile_26:
                    1424   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1425   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1426          clr.l     D2
                    1427   Load_SRecordFile_27:
00000FA2  0C82 0006 1428          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1429          bge.s     Load_SRecordFile_29
00000FAA  5282      1430          addq.l    #1,D2
00000FAC  60F4      1431          bra       Load_SRecordFile_27
                    1432   Load_SRecordFile_29:
                    1433   ; ;
                    1434   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1435          jsr       _FlushKeyboard
                    1436   ; Echo = 1;
00000FB2  23FC 0000 1437          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1438   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1439          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1440          unlk      A6
00000FC2  4E75      1441          rts
                    1442   ; }
                    1443   ; void MemoryChange(void)
                    1444   ; {
                    1445   _MemoryChange:
00000FC4  48E7 3820 1446          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1447          lea       _printf.L,A2
00000FCC  31DE      
                    1448   ; unsigned char *RamPtr,c ; // pointer to memory
                    1449   ; int Data ;
                    1450   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1451          pea       @m68kde~1_17.L
00000FD2  3C58      
00000FD4  4E92      1452          jsr       (A2)
00000FD6  584F      1453          addq.w    #4,A7
                    1454   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1455          pea       @m68kde~1_18.L
00000FDC  3C74      
00000FDE  4E92      1456          jsr       (A2)
00000FE0  584F      1457          addq.w    #4,A7
                    1458   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1459          pea       @m68kde~1_19.L
00000FE6  3CBA      
00000FE8  4E92      1460          jsr       (A2)
00000FEA  584F      1461          addq.w    #4,A7
                    1462   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1463          clr.l     -(A7)
00000FEE  4EB8 0CA4 1464          jsr       _Get8HexDigits
00000FF2  584F      1465          addq.w    #4,A7
00000FF4  2600      1466          move.l    D0,D3
                    1467   ; while(1)    {
                    1468   MemoryChange_1:
                    1469   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1470          move.l    D3,A0
00000FF8  1210      1471          move.b    (A0),D1
00000FFA  C2BC 0000 1472          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1473          move.l    D1,-(A7)
00001002  2F03      1474          move.l    D3,-(A7)
00001004  4879 0000 1475          pea       @m68kde~1_20.L
00001008  3CCC      
0000100A  4E92      1476          jsr       (A2)
0000100C  DEFC 000C 1477          add.w     #12,A7
                    1478   ; c = tolower(_getch()) ;
00001010  2F00      1479          move.l    D0,-(A7)
00001012  4EB8 0B68 1480          jsr       __getch
00001016  2200      1481          move.l    D0,D1
00001018  201F      1482          move.l    (A7)+,D0
0000101A  2F01      1483          move.l    D1,-(A7)
0000101C  4EB9 0000 1484          jsr       _tolower
00001020  315E      
00001022  584F      1485          addq.w    #4,A7
00001024  1400      1486          move.b    D0,D2
                    1487   ; if(c == (char)(0x1b))
00001026  0C02 001B 1488          cmp.b     #27,D2
0000102A  6604      1489          bne.s     MemoryChange_4
                    1490   ; return ;                                // abort on escape
0000102C  6000 0090 1491          bra       MemoryChange_6
                    1492   MemoryChange_4:
                    1493   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1494          cmp.b     #48,D2
00001034  6506      1495          blo.s     MemoryChange_10
00001036  0C02 0039 1496          cmp.b     #57,D2
0000103A  6310      1497          bls.s     MemoryChange_9
                    1498   MemoryChange_10:
0000103C  0C02 0061 1499          cmp.b     #97,D2
00001040  6500 006E 1500          blo       MemoryChange_7
00001044  0C02 0066 1501          cmp.b     #102,D2
00001048  6200 0066 1502          bhi       MemoryChange_7
                    1503   MemoryChange_9:
                    1504   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1505          and.l     #255,D2
00001050  00FF      
00001052  2F02      1506          move.l    D2,-(A7)
00001054  4EB8 0BD2 1507          jsr       _xtod
00001058  584F      1508          addq.w    #4,A7
0000105A  C0BC 0000 1509          and.l     #255,D0
0000105E  00FF      
00001060  E980      1510          asl.l     #4,D0
00001062  2F00      1511          move.l    D0,-(A7)
00001064  2F01      1512          move.l    D1,-(A7)
00001066  4EB8 0B68 1513          jsr       __getch
0000106A  221F      1514          move.l    (A7)+,D1
0000106C  2F00      1515          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1516          jsr       _xtod
00001072  584F      1517          addq.w    #4,A7
00001074  2200      1518          move.l    D0,D1
00001076  201F      1519          move.l    (A7)+,D0
00001078  C2BC 0000 1520          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1521          or.l      D1,D0
00001080  2800      1522          move.l    D0,D4
                    1523   ; *RamPtr = (char)(Data) ;
00001082  2043      1524          move.l    D3,A0
00001084  1084      1525          move.b    D4,(A0)
                    1526   ; if(*RamPtr != Data) {
00001086  2043      1527          move.l    D3,A0
00001088  1010      1528          move.b    (A0),D0
0000108A  C0BC 0000 1529          and.l     #255,D0
0000108E  00FF      
00001090  B084      1530          cmp.l     D4,D0
00001092  671A      1531          beq.s     MemoryChange_11
                    1532   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1533          move.l    D3,A0
00001096  1210      1534          move.b    (A0),D1
00001098  C2BC 0000 1535          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1536          move.l    D1,-(A7)
000010A0  2F04      1537          move.l    D4,-(A7)
000010A2  4879 0000 1538          pea       @m68kde~1_21.L
000010A6  3CDE      
000010A8  4E92      1539          jsr       (A2)
000010AA  DEFC 000C 1540          add.w     #12,A7
                    1541   MemoryChange_11:
000010AE  6008      1542          bra.s     MemoryChange_13
                    1543   MemoryChange_7:
                    1544   ; }
                    1545   ; }
                    1546   ; else if(c == (char)('-'))
000010B0  0C02 002D 1547          cmp.b     #45,D2
000010B4  6602      1548          bne.s     MemoryChange_13
                    1549   ; RamPtr -= 2 ; ;
000010B6  5583      1550          subq.l    #2,D3
                    1551   MemoryChange_13:
                    1552   ; RamPtr ++ ;
000010B8  5283      1553          addq.l    #1,D3
000010BA  6000 FF3A 1554          bra       MemoryChange_1
                    1555   MemoryChange_6:
000010BE  4CDF 041C 1556          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1557          rts
                    1558   ; }
                    1559   ; }
                    1560   ; int TestForSPITransmitDataComplete(void) {
                    1561   _TestForSPITransmitDataComplete:
                    1562   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1563   ; if(SPI_Status & 0X80)   // check SPIF flag
000010C4  1039 0040 1564          move.b    4227106,D0
000010C8  8022      
000010CA  C07C 00FF 1565          and.w     #255,D0
000010CE  C07C 0080 1566          and.w     #128,D0
000010D2  6704      1567          beq.s     TestForSPITransmitDataComplete_1
                    1568   ; return 1;
000010D4  7001      1569          moveq     #1,D0
000010D6  6002      1570          bra.s     TestForSPITransmitDataComplete_3
                    1571   TestForSPITransmitDataComplete_1:
                    1572   ; else
                    1573   ; return 0;
000010D8  4280      1574          clr.l     D0
                    1575   TestForSPITransmitDataComplete_3:
000010DA  4E75      1576          rts
                    1577   ; }
                    1578   ; void SPI_Init(void)
                    1579   ; {
                    1580   _SPI_Init:
                    1581   ; //TODO
                    1582   ; //
                    1583   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1584   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1585   ; //
                    1586   ; // Here are some settings we want to create
                    1587   ; //
                    1588   ; // Control Reg - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed = divide by 32 = approx 700Khz
                    1589   ; // Ext Reg - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1590   ; // SPI_CS Reg - control selection of slave SPI chips via their CS# signals
                    1591   ; // Status Reg - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1592   ; // CONTROL reg:     0x53    ||  Extension reg:      0x00    ||  SPI_CS Reg: 0xFE    ||  Status Reg:         0XC5
                    1593   ; // [7] interrupt:   0       ||  [7:6] interrupt:    00      ||  [7:0] active low CS ||  [7] SPIF:           1
                    1594   ; // [6] core:        1       ||  [5:2] reserved:     0000    ||                      ||  [6] WCOL:           1
                    1595   ; // [5] reserved:    0       ||  [1:0] speed:        11      ||                      ||  [5:4] reserved:     00
                    1596   ; // [4] master mode: 1       ||                              ||                      ||  [3:2] WFFULL/EMPTY: 01
                    1597   ; // [3:2] pol,clk:   00      ||                              ||                      ||  [1:0] RFFULL/EMPTY: 01
                    1598   ; // [1:0] speed:     00      ||                              ||                      ||
                    1599   ; SPI_Control = 0X53;
000010DC  13FC 0053 1600          move.b    #83,4227104
000010E0  0040 8020 
                    1601   ; SPI_Ext = 0X00;
000010E4  4239 0040 1602          clr.b     4227110
000010E8  8026      
                    1603   ; Disable_SPI_CS(); // prededined function setting SPI_CS reg
000010EA  13FC 00FF 1604          move.b    #255,4227112
000010EE  0040 8028 
000010F2  4E75      1605          rts
                    1606   ; }
                    1607   ; void WaitForSPITransmitComplete(void)
                    1608   ; {
                    1609   _WaitForSPITransmitComplete:
                    1610   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1611   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1612   ; // just in case they were set
                    1613   ; while(!TestForSPITransmitDataComplete()){}   // check SPIF if data transmit is complete
                    1614   WaitForSPITransmitComplete_1:
000010F4  4EB8 10C4 1615          jsr       _TestForSPITransmitDataComplete
000010F8  4A80      1616          tst.l     D0
000010FA  6602      1617          bne.s     WaitForSPITransmitComplete_3
000010FC  60F6      1618          bra       WaitForSPITransmitComplete_1
                    1619   WaitForSPITransmitComplete_3:
                    1620   ; SPI_Status |= 0xC0;  // set SPIF & WCOL to clear the flag, notsure about [3:0] since we dont have access wrting them
000010FE  0039 00C0 1621          or.b      #192,4227106
00001102  0040 8022 
00001106  4E75      1622          rts
                    1623   ; }
                    1624   ; void WaitWriteSPIComplete(void)
                    1625   ; {
                    1626   _WaitWriteSPIComplete:
                    1627   ; Enable_SPI_CS();
00001108  13FC 00FE 1628          move.b    #254,4227112
0000110C  0040 8028 
                    1629   ; WriteSPIChar(0x05);
00001110  4878 0005 1630          pea       5
00001114  4EB9 0000 1631          jsr       _WriteSPIChar
00001118  113A      
0000111A  584F      1632          addq.w    #4,A7
                    1633   ; while(WriteSPIChar(0x00) & 0x01);
                    1634   WaitWriteSPIComplete_1:
0000111C  42A7      1635          clr.l     -(A7)
0000111E  4EB9 0000 1636          jsr       _WriteSPIChar
00001122  113A      
00001124  584F      1637          addq.w    #4,A7
00001126  C0BC 0000 1638          and.l     #1,D0
0000112A  0001      
0000112C  6702      1639          beq.s     WaitWriteSPIComplete_3
0000112E  60EC      1640          bra       WaitWriteSPIComplete_1
                    1641   WaitWriteSPIComplete_3:
                    1642   ; Disable_SPI_CS();
00001130  13FC 00FF 1643          move.b    #255,4227112
00001134  0040 8028 
00001138  4E75      1644          rts
                    1645   ; }
                    1646   ; int WriteSPIChar(int c)
                    1647   ; {
                    1648   _WriteSPIChar:
0000113A  4E56 FFFC 1649          link      A6,#-4
                    1650   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                    1651   ; // wait for completion of transmission
                    1652   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                    1653   ; // by reading fom the SPI controller Data Register.
                    1654   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                    1655   ; //
                    1656   ; // modify '0' below to return back read byte from data register
                    1657   ; //
                    1658   ; // check fot the SPE flag, if set, write
                    1659   ; // have to write dummy valve if read
                    1660   ; int buffer;
                    1661   ; SPI_Data = c;
0000113E  202E 0008 1662          move.l    8(A6),D0
00001142  13C0 0040 1663          move.b    D0,4227108
00001146  8024      
                    1664   ; // wait for transimission to complete
                    1665   ; WaitForSPITransmitComplete();  
00001148  4EB8 10F4 1666          jsr       _WaitForSPITransmitComplete
                    1667   ; buffer = SPI_Data;
0000114C  1039 0040 1668          move.b    4227108,D0
00001150  8024      
00001152  C0BC 0000 1669          and.l     #255,D0
00001156  00FF      
00001158  2D40 FFFC 1670          move.l    D0,-4(A6)
                    1671   ; // clear FIFO if it is full
                    1672   ; return buffer; 
0000115C  202E FFFC 1673          move.l    -4(A6),D0
00001160  4E5E      1674          unlk      A6
00001162  4E75      1675          rts
                    1676   ; }
                    1677   ; void WriteSPIData(char *memory_address, int flash_address, int size)
                    1678   ; {
                    1679   _WriteSPIData:
00001164  4E56 0000 1680          link      A6,#0
00001168  48E7 3020 1681          movem.l   D2/D3/A2,-(A7)
0000116C  45F8 113A 1682          lea       _WriteSPIChar.L,A2
00001170  262E 000C 1683          move.l    12(A6),D3
                    1684   ; int i = 0;
00001174  4282      1685          clr.l     D2
                    1686   ; Enable_SPI_CS();
00001176  13FC 00FE 1687          move.b    #254,4227112
0000117A  0040 8028 
                    1688   ; WriteSPIChar(0x06);
0000117E  4878 0006 1689          pea       6
00001182  4E92      1690          jsr       (A2)
00001184  584F      1691          addq.w    #4,A7
                    1692   ; Disable_SPI_CS();
00001186  13FC 00FF 1693          move.b    #255,4227112
0000118A  0040 8028 
                    1694   ; Enable_SPI_CS();
0000118E  13FC 00FE 1695          move.b    #254,4227112
00001192  0040 8028 
                    1696   ; WriteSPIChar(0x02);
00001196  4878 0002 1697          pea       2
0000119A  4E92      1698          jsr       (A2)
0000119C  584F      1699          addq.w    #4,A7
                    1700   ; WriteSPIChar(flash_address >> 16);
0000119E  2203      1701          move.l    D3,D1
000011A0  E081      1702          asr.l     #8,D1
000011A2  E081      1703          asr.l     #8,D1
000011A4  2F01      1704          move.l    D1,-(A7)
000011A6  4E92      1705          jsr       (A2)
000011A8  584F      1706          addq.w    #4,A7
                    1707   ; WriteSPIChar(flash_address >> 8);
000011AA  2203      1708          move.l    D3,D1
000011AC  E081      1709          asr.l     #8,D1
000011AE  2F01      1710          move.l    D1,-(A7)
000011B0  4E92      1711          jsr       (A2)
000011B2  584F      1712          addq.w    #4,A7
                    1713   ; WriteSPIChar(flash_address);
000011B4  2F03      1714          move.l    D3,-(A7)
000011B6  4E92      1715          jsr       (A2)
000011B8  584F      1716          addq.w    #4,A7
                    1717   ; for(i = 0; i < size; i++)
000011BA  4282      1718          clr.l     D2
                    1719   WriteSPIData_1:
000011BC  B4AE 0010 1720          cmp.l     16(A6),D2
000011C0  6C16      1721          bge.s     WriteSPIData_3
                    1722   ; {
                    1723   ; WriteSPIChar(memory_address[i]);
000011C2  206E 0008 1724          move.l    8(A6),A0
000011C6  1230 2800 1725          move.b    0(A0,D2.L),D1
000011CA  4881      1726          ext.w     D1
000011CC  48C1      1727          ext.l     D1
000011CE  2F01      1728          move.l    D1,-(A7)
000011D0  4E92      1729          jsr       (A2)
000011D2  584F      1730          addq.w    #4,A7
000011D4  5282      1731          addq.l    #1,D2
000011D6  60E4      1732          bra       WriteSPIData_1
                    1733   WriteSPIData_3:
                    1734   ; }
                    1735   ; Disable_SPI_CS();
000011D8  13FC 00FF 1736          move.b    #255,4227112
000011DC  0040 8028 
                    1737   ; WaitWriteSPIComplete();    
000011E0  4EB8 1108 1738          jsr       _WaitWriteSPIComplete
000011E4  4CDF 040C 1739          movem.l   (A7)+,D2/D3/A2
000011E8  4E5E      1740          unlk      A6
000011EA  4E75      1741          rts
                    1742   ; }
                    1743   ; void ReadSPIData(char *memory_address, int flash_address, int size)
                    1744   ; {
                    1745   _ReadSPIData:
000011EC  4E56 0000 1746          link      A6,#0
000011F0  48E7 3020 1747          movem.l   D2/D3/A2,-(A7)
000011F4  45F8 113A 1748          lea       _WriteSPIChar.L,A2
000011F8  262E 000C 1749          move.l    12(A6),D3
                    1750   ; int i = 0;
000011FC  4282      1751          clr.l     D2
                    1752   ; Enable_SPI_CS();
000011FE  13FC 00FE 1753          move.b    #254,4227112
00001202  0040 8028 
                    1754   ; WriteSPIChar(0x03);
00001206  4878 0003 1755          pea       3
0000120A  4E92      1756          jsr       (A2)
0000120C  584F      1757          addq.w    #4,A7
                    1758   ; WriteSPIChar(flash_address >> 16);
0000120E  2203      1759          move.l    D3,D1
00001210  E081      1760          asr.l     #8,D1
00001212  E081      1761          asr.l     #8,D1
00001214  2F01      1762          move.l    D1,-(A7)
00001216  4E92      1763          jsr       (A2)
00001218  584F      1764          addq.w    #4,A7
                    1765   ; WriteSPIChar(flash_address >> 8);
0000121A  2203      1766          move.l    D3,D1
0000121C  E081      1767          asr.l     #8,D1
0000121E  2F01      1768          move.l    D1,-(A7)
00001220  4E92      1769          jsr       (A2)
00001222  584F      1770          addq.w    #4,A7
                    1771   ; WriteSPIChar(flash_address);
00001224  2F03      1772          move.l    D3,-(A7)
00001226  4E92      1773          jsr       (A2)
00001228  584F      1774          addq.w    #4,A7
                    1775   ; for(i = 0; i < size; i++)
0000122A  4282      1776          clr.l     D2
                    1777   ReadSPIData_1:
0000122C  B4AE 0010 1778          cmp.l     16(A6),D2
00001230  6C12      1779          bge.s     ReadSPIData_3
                    1780   ; {
                    1781   ; memory_address[i] = (unsigned char) WriteSPIChar(0x00); 
00001232  42A7      1782          clr.l     -(A7)
00001234  4E92      1783          jsr       (A2)
00001236  584F      1784          addq.w    #4,A7
00001238  206E 0008 1785          move.l    8(A6),A0
0000123C  1180 2800 1786          move.b    D0,0(A0,D2.L)
00001240  5282      1787          addq.l    #1,D2
00001242  60E8      1788          bra       ReadSPIData_1
                    1789   ReadSPIData_3:
                    1790   ; }
                    1791   ; Disable_SPI_CS();
00001244  13FC 00FF 1792          move.b    #255,4227112
00001248  0040 8028 
0000124C  4CDF 040C 1793          movem.l   (A7)+,D2/D3/A2
00001250  4E5E      1794          unlk      A6
00001252  4E75      1795          rts
                    1796   ; }
                    1797   ; void EraseSPIFlashChip(void)
                    1798   ; {
                    1799   _EraseSPIFlashChip:
00001254  2F0A      1800          move.l    A2,-(A7)
00001256  45F9 0000 1801          lea       _printf.L,A2
0000125A  31DE      
                    1802   ; // Write enable
                    1803   ; printf("\r\n    EraseSPIFlashChip:espfc before write 06");
0000125C  4879 0000 1804          pea       @m68kde~1_22.L
00001260  3D12      
00001262  4E92      1805          jsr       (A2)
00001264  584F      1806          addq.w    #4,A7
                    1807   ; WriteSPIInstruction(0x06);
00001266  4878 0006 1808          pea       6
0000126A  4EB9 0000 1809          jsr       _WriteSPIInstruction
0000126E  12A4      
00001270  584F      1810          addq.w    #4,A7
                    1811   ; printf("\r\n    EraseSPIFlashChip:espfc before write 07");
00001272  4879 0000 1812          pea       @m68kde~1_23.L
00001276  3D40      
00001278  4E92      1813          jsr       (A2)
0000127A  584F      1814          addq.w    #4,A7
                    1815   ; // Chip Erase, c7 or 60 both work
                    1816   ; WriteSPIInstruction(0xC7);
0000127C  4878 00C7 1817          pea       199
00001280  4EB9 0000 1818          jsr       _WriteSPIInstruction
00001284  12A4      
00001286  584F      1819          addq.w    #4,A7
                    1820   ; printf("\r\n    EraseSPIFlashChip:espfc wait for complete");
00001288  4879 0000 1821          pea       @m68kde~1_24.L
0000128C  3D6E      
0000128E  4E92      1822          jsr       (A2)
00001290  584F      1823          addq.w    #4,A7
                    1824   ; WaitWriteSPIComplete();
00001292  4EB8 1108 1825          jsr       _WaitWriteSPIComplete
                    1826   ; printf("\r\nEraseSPIFlash Complete!");
00001296  4879 0000 1827          pea       @m68kde~1_25.L
0000129A  3D9E      
0000129C  4E92      1828          jsr       (A2)
0000129E  584F      1829          addq.w    #4,A7
000012A0  245F      1830          move.l    (A7)+,A2
000012A2  4E75      1831          rts
                    1832   ; }
                    1833   ; void WriteSPIInstruction(int instruction)
                    1834   ; {
                    1835   _WriteSPIInstruction:
000012A4  4E56 0000 1836          link      A6,#0
                    1837   ; Enable_SPI_CS();
000012A8  13FC 00FE 1838          move.b    #254,4227112
000012AC  0040 8028 
                    1839   ; WriteSPIChar(instruction);
000012B0  2F2E 0008 1840          move.l    8(A6),-(A7)
000012B4  4EB8 113A 1841          jsr       _WriteSPIChar
000012B8  584F      1842          addq.w    #4,A7
                    1843   ; Disable_SPI_CS();
000012BA  13FC 00FF 1844          move.b    #255,4227112
000012BE  0040 8028 
000012C2  4E5E      1845          unlk      A6
000012C4  4E75      1846          rts
                    1847   ; }
                    1848   ; /*******************************************************************
                    1849   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1850   ; ********************************************************************/
                    1851   ; void ProgramFlashChip(void)
                    1852   ; {
                    1853   _ProgramFlashChip:
000012C6  4E56 FE00 1854          link      A6,#-512
000012CA  48E7 3C30 1855          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
000012CE  45F9 0000 1856          lea       _printf.L,A2
000012D2  31DE      
000012D4  47EE FE00 1857          lea       -512(A6),A3
                    1858   ; //
                    1859   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1860   ; // TODO : then verify by reading it back and comparing to memory
                    1861   ; //
                    1862   ; unsigned int i = 0, j = 0, flash_address = 0;
000012D8  4283      1863          clr.l     D3
000012DA  4282      1864          clr.l     D2
000012DC  4285      1865          clr.l     D5
                    1866   ; unsigned char *dram_start = 0x08000000;
000012DE  283C 0800 1867          move.l    #134217728,D4
000012E2  0000      
                    1868   ; unsigned char read_buffer[256];
                    1869   ; unsigned char write_buffer[256];
                    1870   ; printf("\r\nErasing SPI Flash Chip");
000012E4  4879 0000 1871          pea       @m68kde~1_26.L
000012E8  3DB8      
000012EA  4E92      1872          jsr       (A2)
000012EC  584F      1873          addq.w    #4,A7
                    1874   ; EraseSPIFlashChip();
000012EE  4EB8 1254 1875          jsr       _EraseSPIFlashChip
                    1876   ; printf("\r\nWrite DRAM(08000000) to flash chip");   
000012F2  4879 0000 1877          pea       @m68kde~1_27.L
000012F6  3DD2      
000012F8  4E92      1878          jsr       (A2)
000012FA  584F      1879          addq.w    #4,A7
                    1880   ; for(i = 0; i < 1024; i++)
000012FC  4283      1881          clr.l     D3
                    1882   ProgramFlashChip_1:
000012FE  0C83 0000 1883          cmp.l     #1024,D3
00001302  0400      
00001304  6400 005E 1884          bhs       ProgramFlashChip_3
                    1885   ; {
                    1886   ; for(j = 0; j < 256; j++)
00001308  4282      1887          clr.l     D2
                    1888   ProgramFlashChip_4:
0000130A  0C82 0000 1889          cmp.l     #256,D2
0000130E  0100      
00001310  6410      1890          bhs.s     ProgramFlashChip_6
                    1891   ; write_buffer[j] = dram_start[j];
00001312  2044      1892          move.l    D4,A0
00001314  43EE FF00 1893          lea       -256(A6),A1
00001318  13B0 2800 1894          move.b    0(A0,D2.L),0(A1,D2.L)
0000131C  2800      
0000131E  5282      1895          addq.l    #1,D2
00001320  60E8      1896          bra       ProgramFlashChip_4
                    1897   ProgramFlashChip_6:
                    1898   ; WriteSPIData(write_buffer, flash_address, sizeof(write_buffer));
00001322  4878 0100 1899          pea       256
00001326  2F05      1900          move.l    D5,-(A7)
00001328  486E FF00 1901          pea       -256(A6)
0000132C  4EB8 1164 1902          jsr       _WriteSPIData
00001330  DEFC 000C 1903          add.w     #12,A7
                    1904   ; dram_start += 256;
00001334  0684 0000 1905          add.l     #256,D4
00001338  0100      
                    1906   ; flash_address += 256;
0000133A  0685 0000 1907          add.l     #256,D5
0000133E  0100      
                    1908   ; if((i % 100) == 0)
00001340  2F03      1909          move.l    D3,-(A7)
00001342  4878 0064 1910          pea       100
00001346  4EB9 0000 1911          jsr       ULDIV
0000134A  301C      
0000134C  202F 0004 1912          move.l    4(A7),D0
00001350  504F      1913          addq.w    #8,A7
00001352  4A80      1914          tst.l     D0
00001354  660A      1915          bne.s     ProgramFlashChip_7
                    1916   ; printf("..");
00001356  4879 0000 1917          pea       @m68kde~1_28.L
0000135A  3DF8      
0000135C  4E92      1918          jsr       (A2)
0000135E  584F      1919          addq.w    #4,A7
                    1920   ProgramFlashChip_7:
00001360  5283      1921          addq.l    #1,D3
00001362  609A      1922          bra       ProgramFlashChip_1
                    1923   ProgramFlashChip_3:
                    1924   ; }
                    1925   ; printf("\r\nWrite to Flash Chip Complete!");
00001364  4879 0000 1926          pea       @m68kde~1_29.L
00001368  3DFC      
0000136A  4E92      1927          jsr       (A2)
0000136C  584F      1928          addq.w    #4,A7
                    1929   ; flash_address = 0;
0000136E  4285      1930          clr.l     D5
                    1931   ; dram_start = 0x08000000;
00001370  283C 0800 1932          move.l    #134217728,D4
00001374  0000      
                    1933   ; printf("\r\nRead from flash chip");
00001376  4879 0000 1934          pea       @m68kde~1_30.L
0000137A  3E1C      
0000137C  4E92      1935          jsr       (A2)
0000137E  584F      1936          addq.w    #4,A7
                    1937   ; for(i = 0; i < 1024; i++)
00001380  4283      1938          clr.l     D3
                    1939   ProgramFlashChip_9:
00001382  0C83 0000 1940          cmp.l     #1024,D3
00001386  0400      
00001388  6400 0094 1941          bhs       ProgramFlashChip_11
                    1942   ; {
                    1943   ; ReadSPIData(read_buffer, flash_address, sizeof(read_buffer));
0000138C  4878 0100 1944          pea       256
00001390  2F05      1945          move.l    D5,-(A7)
00001392  2F0B      1946          move.l    A3,-(A7)
00001394  4EB8 11EC 1947          jsr       _ReadSPIData
00001398  DEFC 000C 1948          add.w     #12,A7
                    1949   ; if((i % 100) == 0)
0000139C  2F03      1950          move.l    D3,-(A7)
0000139E  4878 0064 1951          pea       100
000013A2  4EB9 0000 1952          jsr       ULDIV
000013A6  301C      
000013A8  202F 0004 1953          move.l    4(A7),D0
000013AC  504F      1954          addq.w    #8,A7
000013AE  4A80      1955          tst.l     D0
000013B0  660A      1956          bne.s     ProgramFlashChip_12
                    1957   ; printf("..");
000013B2  4879 0000 1958          pea       @m68kde~1_28.L
000013B6  3DF8      
000013B8  4E92      1959          jsr       (A2)
000013BA  584F      1960          addq.w    #4,A7
                    1961   ProgramFlashChip_12:
                    1962   ; for (j = 0; j < sizeof(read_buffer); j++)
000013BC  4282      1963          clr.l     D2
                    1964   ProgramFlashChip_14:
000013BE  0C82 0000 1965          cmp.l     #256,D2
000013C2  0100      
000013C4  6400 0046 1966          bhs       ProgramFlashChip_16
                    1967   ; {
                    1968   ; if(dram_start[j] != read_buffer[j])
000013C8  2044      1969          move.l    D4,A0
000013CA  1030 2800 1970          move.b    0(A0,D2.L),D0
000013CE  B033 2800 1971          cmp.b     0(A3,D2.L),D0
000013D2  6734      1972          beq.s     ProgramFlashChip_17
                    1973   ; {
                    1974   ; printf("\r\nError found at %d. Writebuffer:%02x. Readbuffer:%02x", j, dram_start[j], read_buffer[j]);
000013D4  1233 2800 1975          move.b    0(A3,D2.L),D1
000013D8  C2BC 0000 1976          and.l     #255,D1
000013DC  00FF      
000013DE  2F01      1977          move.l    D1,-(A7)
000013E0  2044      1978          move.l    D4,A0
000013E2  1230 2800 1979          move.b    0(A0,D2.L),D1
000013E6  C2BC 0000 1980          and.l     #255,D1
000013EA  00FF      
000013EC  2F01      1981          move.l    D1,-(A7)
000013EE  2F02      1982          move.l    D2,-(A7)
000013F0  4879 0000 1983          pea       @m68kde~1_31.L
000013F4  3E34      
000013F6  4E92      1984          jsr       (A2)
000013F8  DEFC 0010 1985          add.w     #16,A7
                    1986   ; printf("\r\nTest Process Terminated with MISMATCH Error. Press KEY[0]");
000013FC  4879 0000 1987          pea       @m68kde~1_32.L
00001400  3E6C      
00001402  4E92      1988          jsr       (A2)
00001404  584F      1989          addq.w    #4,A7
                    1990   ; while(1);
                    1991   ProgramFlashChip_19:
00001406  60FE      1992          bra       ProgramFlashChip_19
                    1993   ProgramFlashChip_17:
00001408  5282      1994          addq.l    #1,D2
0000140A  60B2      1995          bra       ProgramFlashChip_14
                    1996   ProgramFlashChip_16:
                    1997   ; }
                    1998   ; }
                    1999   ; flash_address += 256;
0000140C  0685 0000 2000          add.l     #256,D5
00001410  0100      
                    2001   ; dram_start += 256;
00001412  0684 0000 2002          add.l     #256,D4
00001416  0100      
00001418  5283      2003          addq.l    #1,D3
0000141A  6000 FF66 2004          bra       ProgramFlashChip_9
                    2005   ProgramFlashChip_11:
                    2006   ; }
                    2007   ; printf("\r\nFlash Process Completed with No Error! Press ESC back to menu");
0000141E  4879 0000 2008          pea       @m68kde~1_33.L
00001422  3EA8      
00001424  4E92      2009          jsr       (A2)
00001426  584F      2010          addq.w    #4,A7
                    2011   ; while(1)
                    2012   ProgramFlashChip_22:
                    2013   ; {
                    2014   ; if(_getch() == 0x1b)          // break on ESC
00001428  4EB8 0B68 2015          jsr       __getch
0000142C  0C80 0000 2016          cmp.l     #27,D0
00001430  001B      
00001432  6602      2017          bne.s     ProgramFlashChip_25
                    2018   ; break;
00001434  6002      2019          bra.s     ProgramFlashChip_24
                    2020   ProgramFlashChip_25:
00001436  60F0      2021          bra       ProgramFlashChip_22
                    2022   ProgramFlashChip_24:
00001438  4CDF 0C3C 2023          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
0000143C  4E5E      2024          unlk      A6
0000143E  4E75      2025          rts
                    2026   ; }
                    2027   ; }
                    2028   ; /*************************************************************************
                    2029   ; ** Load a program from SPI Flash Chip and copy to Dram
                    2030   ; **************************************************************************/
                    2031   ; void LoadFromFlashChip(void)
                    2032   ; {
                    2033   _LoadFromFlashChip:
00001440  4E56 FF00 2034          link      A6,#-256
00001444  48E7 3C20 2035          movem.l   D2/D3/D4/D5/A2,-(A7)
00001448  45F9 0000 2036          lea       _printf.L,A2
0000144C  31DE      
                    2037   ; unsigned int i = 0, j = 0, flash_address = 0;
0000144E  4283      2038          clr.l     D3
00001450  4282      2039          clr.l     D2
00001452  4285      2040          clr.l     D5
                    2041   ; unsigned char *dram_start = 0x08000000;
00001454  283C 0800 2042          move.l    #134217728,D4
00001458  0000      
                    2043   ; unsigned char read_buffer[256];
                    2044   ; //
                    2045   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    2046   ; //
                    2047   ; printf("\r\nLoading Program From SPI Flash....");
0000145A  4879 0000 2048          pea       @m68kde~1_34.L
0000145E  3EE8      
00001460  4E92      2049          jsr       (A2)
00001462  584F      2050          addq.w    #4,A7
                    2051   ; for(i = 0; i < 1024; i++)
00001464  4283      2052          clr.l     D3
                    2053   LoadFromFlashChip_1:
00001466  0C83 0000 2054          cmp.l     #1024,D3
0000146A  0400      
0000146C  6400 005E 2055          bhs       LoadFromFlashChip_3
                    2056   ; {
                    2057   ; ReadSPIData(read_buffer, flash_address, sizeof(read_buffer));
00001470  4878 0100 2058          pea       256
00001474  2F05      2059          move.l    D5,-(A7)
00001476  486E FF00 2060          pea       -256(A6)
0000147A  4EB8 11EC 2061          jsr       _ReadSPIData
0000147E  DEFC 000C 2062          add.w     #12,A7
                    2063   ; for(j = 0; j < 256; j++)
00001482  4282      2064          clr.l     D2
                    2065   LoadFromFlashChip_4:
00001484  0C82 0000 2066          cmp.l     #256,D2
00001488  0100      
0000148A  6410      2067          bhs.s     LoadFromFlashChip_6
                    2068   ; dram_start[j] = read_buffer[j];
0000148C  41EE FF00 2069          lea       -256(A6),A0
00001490  2244      2070          move.l    D4,A1
00001492  13B0 2800 2071          move.b    0(A0,D2.L),0(A1,D2.L)
00001496  2800      
00001498  5282      2072          addq.l    #1,D2
0000149A  60E8      2073          bra       LoadFromFlashChip_4
                    2074   LoadFromFlashChip_6:
                    2075   ; if((i % 100) == 0)
0000149C  2F03      2076          move.l    D3,-(A7)
0000149E  4878 0064 2077          pea       100
000014A2  4EB9 0000 2078          jsr       ULDIV
000014A6  301C      
000014A8  202F 0004 2079          move.l    4(A7),D0
000014AC  504F      2080          addq.w    #8,A7
000014AE  4A80      2081          tst.l     D0
000014B0  660A      2082          bne.s     LoadFromFlashChip_7
                    2083   ; printf("..");
000014B2  4879 0000 2084          pea       @m68kde~1_28.L
000014B6  3DF8      
000014B8  4E92      2085          jsr       (A2)
000014BA  584F      2086          addq.w    #4,A7
                    2087   LoadFromFlashChip_7:
                    2088   ; dram_start += 256;
000014BC  0684 0000 2089          add.l     #256,D4
000014C0  0100      
                    2090   ; flash_address += 256;
000014C2  0685 0000 2091          add.l     #256,D5
000014C6  0100      
000014C8  5283      2092          addq.l    #1,D3
000014CA  609A      2093          bra       LoadFromFlashChip_1
                    2094   LoadFromFlashChip_3:
                    2095   ; }
                    2096   ; printf("\r\nLoad Process Completed! Press ESC back to menu");
000014CC  4879 0000 2097          pea       @m68kde~1_35.L
000014D0  3F0E      
000014D2  4E92      2098          jsr       (A2)
000014D4  584F      2099          addq.w    #4,A7
                    2100   ; while(1)
                    2101   LoadFromFlashChip_9:
                    2102   ; {
                    2103   ; if(_getch() == 0x1b)          // break on ESC
000014D6  4EB8 0B68 2104          jsr       __getch
000014DA  0C80 0000 2105          cmp.l     #27,D0
000014DE  001B      
000014E0  6602      2106          bne.s     LoadFromFlashChip_12
                    2107   ; break;
000014E2  6002      2108          bra.s     LoadFromFlashChip_11
                    2109   LoadFromFlashChip_12:
000014E4  60F0      2110          bra       LoadFromFlashChip_9
                    2111   LoadFromFlashChip_11:
000014E6  4CDF 043C 2112          movem.l   (A7)+,D2/D3/D4/D5/A2
000014EA  4E5E      2113          unlk      A6
000014EC  4E75      2114          rts
                    2115   ; }
                    2116   ; }
                    2117   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2118   ; // IMPORTANT
                    2119   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2120   ; // has to be done with an interrupt (IRQ Level 6)
                    2121   ; //
                    2122   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2123   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2124   ; //
                    2125   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2126   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2127   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2128   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2129   ; // program area
                    2130   ; //
                    2131   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2132   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2133   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2134   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2135   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2136   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2137   ; void DumpRegisters()
                    2138   ; {
                    2139   _DumpRegisters:
000014EE  48E7 3F3C 2140          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000014F2  45F9 0000 2141          lea       _putch.L,A2
000014F6  30FA      
000014F8  47F9 0000 2142          lea       _printf.L,A3
000014FC  31DE      
000014FE  49F9 0B00 2143          lea       _SR.L,A4
00001502  012C      
00001504  4BF9 0B00 2144          lea       _WatchPointString.L,A5
00001508  01C2      
                    2145   ; short i, x, j, k ;
                    2146   ; unsigned char c, *BytePointer;
                    2147   ; // buld up strings for displaying watchpoints
                    2148   ; for(x = 0; x < (short)(8); x++)
0000150A  4242      2149          clr.w     D2
                    2150   DumpRegisters_1:
0000150C  0C42 0008 2151          cmp.w     #8,D2
00001510  6C00 01C6 2152          bge       DumpRegisters_3
                    2153   ; {
                    2154   ; if(WatchPointSetOrCleared[x] == 1)
00001514  48C2      2155          ext.l     D2
00001516  2002      2156          move.l    D2,D0
00001518  E588      2157          lsl.l     #2,D0
0000151A  41F9 0B00 2158          lea       _WatchPointSetOrCleared.L,A0
0000151E  01A2      
00001520  2030 0800 2159          move.l    0(A0,D0.L),D0
00001524  0C80 0000 2160          cmp.l     #1,D0
00001528  0001      
0000152A  6600 0186 2161          bne       DumpRegisters_4
                    2162   ; {
                    2163   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000152E  48C2      2164          ext.l     D2
00001530  2202      2165          move.l    D2,D1
00001532  E589      2166          lsl.l     #2,D1
00001534  41F9 0B00 2167          lea       _WatchPointAddress.L,A0
00001538  0182      
0000153A  2F30 1800 2168          move.l    0(A0,D1.L),-(A7)
0000153E  4879 0000 2169          pea       @m68kde~1_36.L
00001542  3F40      
00001544  220D      2170          move.l    A5,D1
00001546  48C2      2171          ext.l     D2
00001548  2F00      2172          move.l    D0,-(A7)
0000154A  2002      2173          move.l    D2,D0
0000154C  C1FC 0064 2174          muls      #100,D0
00001550  D280      2175          add.l     D0,D1
00001552  201F      2176          move.l    (A7)+,D0
00001554  2F01      2177          move.l    D1,-(A7)
00001556  4EB9 0000 2178          jsr       _sprintf
0000155A  317A      
0000155C  DEFC 000C 2179          add.w     #12,A7
                    2180   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001560  48C2      2181          ext.l     D2
00001562  2002      2182          move.l    D2,D0
00001564  E588      2183          lsl.l     #2,D0
00001566  41F9 0B00 2184          lea       _WatchPointAddress.L,A0
0000156A  0182      
0000156C  2A30 0800 2185          move.l    0(A0,D0.L),D5
                    2186   ; for(j = 0; j < (short)(16); j+=2)
00001570  4243      2187          clr.w     D3
                    2188   DumpRegisters_6:
00001572  0C43 0010 2189          cmp.w     #16,D3
00001576  6C00 0082 2190          bge       DumpRegisters_8
                    2191   ; {
                    2192   ; for(k = 0; k < (short)(2); k++)
0000157A  4246      2193          clr.w     D6
                    2194   DumpRegisters_9:
0000157C  0C46 0002 2195          cmp.w     #2,D6
00001580  6C00 0052 2196          bge       DumpRegisters_11
                    2197   ; {
                    2198   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001584  2045      2199          move.l    D5,A0
00001586  48C3      2200          ext.l     D3
00001588  2203      2201          move.l    D3,D1
0000158A  48C6      2202          ext.l     D6
0000158C  D286      2203          add.l     D6,D1
0000158E  1230 1800 2204          move.b    0(A0,D1.L),D1
00001592  C2BC 0000 2205          and.l     #255,D1
00001596  00FF      
00001598  2F01      2206          move.l    D1,-(A7)
0000159A  4879 0000 2207          pea       @m68kde~1_8.L
0000159E  3B68      
000015A0  4879 0B00 2208          pea       _TempString.L
000015A4  04E2      
000015A6  4EB9 0000 2209          jsr       _sprintf
000015AA  317A      
000015AC  DEFC 000C 2210          add.w     #12,A7
                    2211   ; strcat(WatchPointString[x], TempString) ;
000015B0  4879 0B00 2212          pea       _TempString.L
000015B4  04E2      
000015B6  220D      2213          move.l    A5,D1
000015B8  48C2      2214          ext.l     D2
000015BA  2F00      2215          move.l    D0,-(A7)
000015BC  2002      2216          move.l    D2,D0
000015BE  C1FC 0064 2217          muls      #100,D0
000015C2  D280      2218          add.l     D0,D1
000015C4  201F      2219          move.l    (A7)+,D0
000015C6  2F01      2220          move.l    D1,-(A7)
000015C8  4EB9 0000 2221          jsr       _strcat
000015CC  31AC      
000015CE  504F      2222          addq.w    #8,A7
000015D0  5246      2223          addq.w    #1,D6
000015D2  60A8      2224          bra       DumpRegisters_9
                    2225   DumpRegisters_11:
                    2226   ; }
                    2227   ; strcat(WatchPointString[x]," ") ;
000015D4  4879 0000 2228          pea       @m68kde~1_37.L
000015D8  3F48      
000015DA  220D      2229          move.l    A5,D1
000015DC  48C2      2230          ext.l     D2
000015DE  2F00      2231          move.l    D0,-(A7)
000015E0  2002      2232          move.l    D2,D0
000015E2  C1FC 0064 2233          muls      #100,D0
000015E6  D280      2234          add.l     D0,D1
000015E8  201F      2235          move.l    (A7)+,D0
000015EA  2F01      2236          move.l    D1,-(A7)
000015EC  4EB9 0000 2237          jsr       _strcat
000015F0  31AC      
000015F2  504F      2238          addq.w    #8,A7
000015F4  5443      2239          addq.w    #2,D3
000015F6  6000 FF7A 2240          bra       DumpRegisters_6
                    2241   DumpRegisters_8:
                    2242   ; }
                    2243   ; strcat(WatchPointString[x], "  ") ;
000015FA  4879 0000 2244          pea       @m68kde~1_9.L
000015FE  3B6E      
00001600  220D      2245          move.l    A5,D1
00001602  48C2      2246          ext.l     D2
00001604  2F00      2247          move.l    D0,-(A7)
00001606  2002      2248          move.l    D2,D0
00001608  C1FC 0064 2249          muls      #100,D0
0000160C  D280      2250          add.l     D0,D1
0000160E  201F      2251          move.l    (A7)+,D0
00001610  2F01      2252          move.l    D1,-(A7)
00001612  4EB9 0000 2253          jsr       _strcat
00001616  31AC      
00001618  504F      2254          addq.w    #8,A7
                    2255   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000161A  48C2      2256          ext.l     D2
0000161C  2002      2257          move.l    D2,D0
0000161E  E588      2258          lsl.l     #2,D0
00001620  41F9 0B00 2259          lea       _WatchPointAddress.L,A0
00001624  0182      
00001626  2A30 0800 2260          move.l    0(A0,D0.L),D5
                    2261   ; for(j = 0; j < (short)(16); j++)
0000162A  4243      2262          clr.w     D3
                    2263   DumpRegisters_12:
0000162C  0C43 0010 2264          cmp.w     #16,D3
00001630  6C00 007E 2265          bge       DumpRegisters_14
                    2266   ; {
                    2267   ; c = ((char)(BytePointer[j]) & 0x7f) ;
00001634  2045      2268          move.l    D5,A0
00001636  48C3      2269          ext.l     D3
00001638  1030 3800 2270          move.b    0(A0,D3.L),D0
0000163C  C03C 007F 2271          and.b     #127,D0
00001640  1E00      2272          move.b    D0,D7
                    2273   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001642  0C07 007F 2274          cmp.b     #127,D7
00001646  6206      2275          bhi.s     DumpRegisters_17
00001648  0C07 0020 2276          cmp.b     #32,D7
0000164C  6416      2277          bhs.s     DumpRegisters_15
                    2278   DumpRegisters_17:
                    2279   ; sprintf(TempString, ".") ;
0000164E  4879 0000 2280          pea       @m68kde~1_38.L
00001652  3F4A      
00001654  4879 0B00 2281          pea       _TempString.L
00001658  04E2      
0000165A  4EB9 0000 2282          jsr       _sprintf
0000165E  317A      
00001660  504F      2283          addq.w    #8,A7
00001662  6026      2284          bra.s     DumpRegisters_16
                    2285   DumpRegisters_15:
                    2286   ; else
                    2287   ; sprintf(TempString, "%c", BytePointer[j]) ;
00001664  2045      2288          move.l    D5,A0
00001666  48C3      2289          ext.l     D3
00001668  1230 3800 2290          move.b    0(A0,D3.L),D1
0000166C  C2BC 0000 2291          and.l     #255,D1
00001670  00FF      
00001672  2F01      2292          move.l    D1,-(A7)
00001674  4879 0000 2293          pea       @m68kde~1_39.L
00001678  3F4C      
0000167A  4879 0B00 2294          pea       _TempString.L
0000167E  04E2      
00001680  4EB9 0000 2295          jsr       _sprintf
00001684  317A      
00001686  DEFC 000C 2296          add.w     #12,A7
                    2297   DumpRegisters_16:
                    2298   ; strcat(WatchPointString[x], TempString) ;
0000168A  4879 0B00 2299          pea       _TempString.L
0000168E  04E2      
00001690  220D      2300          move.l    A5,D1
00001692  48C2      2301          ext.l     D2
00001694  2F00      2302          move.l    D0,-(A7)
00001696  2002      2303          move.l    D2,D0
00001698  C1FC 0064 2304          muls      #100,D0
0000169C  D280      2305          add.l     D0,D1
0000169E  201F      2306          move.l    (A7)+,D0
000016A0  2F01      2307          move.l    D1,-(A7)
000016A2  4EB9 0000 2308          jsr       _strcat
000016A6  31AC      
000016A8  504F      2309          addq.w    #8,A7
000016AA  5243      2310          addq.w    #1,D3
000016AC  6000 FF7E 2311          bra       DumpRegisters_12
                    2312   DumpRegisters_14:
000016B0  6020      2313          bra.s     DumpRegisters_5
                    2314   DumpRegisters_4:
                    2315   ; }
                    2316   ; }
                    2317   ; else
                    2318   ; strcpy(WatchPointString[x], "") ;
000016B2  4879 0000 2319          pea       @m68kde~1_40.L
000016B6  3F50      
000016B8  220D      2320          move.l    A5,D1
000016BA  48C2      2321          ext.l     D2
000016BC  2F00      2322          move.l    D0,-(A7)
000016BE  2002      2323          move.l    D2,D0
000016C0  C1FC 0064 2324          muls      #100,D0
000016C4  D280      2325          add.l     D0,D1
000016C6  201F      2326          move.l    (A7)+,D0
000016C8  2F01      2327          move.l    D1,-(A7)
000016CA  4EB9 0000 2328          jsr       _strcpy
000016CE  300C      
000016D0  504F      2329          addq.w    #8,A7
                    2330   DumpRegisters_5:
000016D2  5242      2331          addq.w    #1,D2
000016D4  6000 FE36 2332          bra       DumpRegisters_1
                    2333   DumpRegisters_3:
                    2334   ; }
                    2335   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000016D8  2F39 0B00 2336          move.l    _a0.L,-(A7)
000016DC  0104      
000016DE  2F39 0B00 2337          move.l    _d0.L,-(A7)
000016E2  00E4      
000016E4  4879 0000 2338          pea       @m68kde~1_41.L
000016E8  3F52      
000016EA  4E93      2339          jsr       (A3)
000016EC  DEFC 000C 2340          add.w     #12,A7
                    2341   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000016F0  2F39 0B00 2342          move.l    _a1.L,-(A7)
000016F4  0108      
000016F6  2F39 0B00 2343          move.l    _d1.L,-(A7)
000016FA  00E8      
000016FC  4879 0000 2344          pea       @m68kde~1_42.L
00001700  3F6E      
00001702  4E93      2345          jsr       (A3)
00001704  DEFC 000C 2346          add.w     #12,A7
                    2347   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001708  2F39 0B00 2348          move.l    _a2.L,-(A7)
0000170C  010C      
0000170E  2F39 0B00 2349          move.l    _d2.L,-(A7)
00001712  00EC      
00001714  4879 0000 2350          pea       @m68kde~1_43.L
00001718  3F88      
0000171A  4E93      2351          jsr       (A3)
0000171C  DEFC 000C 2352          add.w     #12,A7
                    2353   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001720  2F39 0B00 2354          move.l    _a3.L,-(A7)
00001724  0110      
00001726  2F39 0B00 2355          move.l    _d3.L,-(A7)
0000172A  00F0      
0000172C  4879 0000 2356          pea       @m68kde~1_44.L
00001730  3FA2      
00001732  4E93      2357          jsr       (A3)
00001734  DEFC 000C 2358          add.w     #12,A7
                    2359   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001738  2F39 0B00 2360          move.l    _a4.L,-(A7)
0000173C  0114      
0000173E  2F39 0B00 2361          move.l    _d4.L,-(A7)
00001742  00F4      
00001744  4879 0000 2362          pea       @m68kde~1_45.L
00001748  3FBC      
0000174A  4E93      2363          jsr       (A3)
0000174C  DEFC 000C 2364          add.w     #12,A7
                    2365   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001750  2F39 0B00 2366          move.l    _a5.L,-(A7)
00001754  0118      
00001756  2F39 0B00 2367          move.l    _d5.L,-(A7)
0000175A  00F8      
0000175C  4879 0000 2368          pea       @m68kde~1_46.L
00001760  3FD6      
00001762  4E93      2369          jsr       (A3)
00001764  DEFC 000C 2370          add.w     #12,A7
                    2371   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001768  2F39 0B00 2372          move.l    _a6.L,-(A7)
0000176C  011C      
0000176E  2F39 0B00 2373          move.l    _d6.L,-(A7)
00001772  00FC      
00001774  4879 0000 2374          pea       @m68kde~1_47.L
00001778  3FF0      
0000177A  4E93      2375          jsr       (A3)
0000177C  DEFC 000C 2376          add.w     #12,A7
                    2377   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001780  3214      2378          move.w    (A4),D1
00001782  C27C 2000 2379          and.w     #8192,D1
00001786  0C41 2000 2380          cmp.w     #8192,D1
0000178A  6608      2381          bne.s     DumpRegisters_18
0000178C  2239 0B00 2382          move.l    _SSP.L,D1
00001790  0124      
00001792  6006      2383          bra.s     DumpRegisters_19
                    2384   DumpRegisters_18:
00001794  2239 0B00 2385          move.l    _USP.L,D1
00001798  0128      
                    2386   DumpRegisters_19:
0000179A  2F01      2387          move.l    D1,-(A7)
0000179C  2F39 0B00 2388          move.l    _d7.L,-(A7)
000017A0  0100      
000017A2  4879 0000 2389          pea       @m68kde~1_48.L
000017A6  400A      
000017A8  4E93      2390          jsr       (A3)
000017AA  DEFC 000C 2391          add.w     #12,A7
                    2392   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
000017AE  2F39 0B00 2393          move.l    _USP.L,-(A7)
000017B2  0128      
000017B4  4879 0000 2394          pea       @m68kde~1_49.L
000017B8  4024      
000017BA  4E93      2395          jsr       (A3)
000017BC  504F      2396          addq.w    #8,A7
                    2397   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000017BE  2F39 0B00 2398          move.l    _SSP.L,-(A7)
000017C2  0124      
000017C4  4879 0000 2399          pea       @m68kde~1_50.L
000017C8  4042      
000017CA  4E93      2400          jsr       (A3)
000017CC  504F      2401          addq.w    #8,A7
                    2402   ; printf("\r\n SR = $%04X   ",SR) ;
000017CE  3214      2403          move.w    (A4),D1
000017D0  C2BC 0000 2404          and.l     #65535,D1
000017D4  FFFF      
000017D6  2F01      2405          move.l    D1,-(A7)
000017D8  4879 0000 2406          pea       @m68kde~1_51.L
000017DC  4064      
000017DE  4E93      2407          jsr       (A3)
000017E0  504F      2408          addq.w    #8,A7
                    2409   ; // display the status word in characters etc.
                    2410   ; printf("   [") ;
000017E2  4879 0000 2411          pea       @m68kde~1_52.L
000017E6  4076      
000017E8  4E93      2412          jsr       (A3)
000017EA  584F      2413          addq.w    #4,A7
                    2414   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000017EC  3014      2415          move.w    (A4),D0
000017EE  C07C 8000 2416          and.w     #32768,D0
000017F2  0C40 8000 2417          cmp.w     #32768,D0
000017F6  660A      2418          bne.s     DumpRegisters_20
000017F8  4878 0054 2419          pea       84
000017FC  4E92      2420          jsr       (A2)
000017FE  584F      2421          addq.w    #4,A7
00001800  6008      2422          bra.s     DumpRegisters_21
                    2423   DumpRegisters_20:
00001802  4878 002D 2424          pea       45
00001806  4E92      2425          jsr       (A2)
00001808  584F      2426          addq.w    #4,A7
                    2427   DumpRegisters_21:
                    2428   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000180A  3014      2429          move.w    (A4),D0
0000180C  C07C 2000 2430          and.w     #8192,D0
00001810  0C40 2000 2431          cmp.w     #8192,D0
00001814  660A      2432          bne.s     DumpRegisters_22
00001816  4878 0053 2433          pea       83
0000181A  4E92      2434          jsr       (A2)
0000181C  584F      2435          addq.w    #4,A7
0000181E  6008      2436          bra.s     DumpRegisters_23
                    2437   DumpRegisters_22:
00001820  4878 0055 2438          pea       85
00001824  4E92      2439          jsr       (A2)
00001826  584F      2440          addq.w    #4,A7
                    2441   DumpRegisters_23:
                    2442   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001828  3014      2443          move.w    (A4),D0
0000182A  C07C 0400 2444          and.w     #1024,D0
0000182E  0C40 0400 2445          cmp.w     #1024,D0
00001832  660A      2446          bne.s     DumpRegisters_24
00001834  4878 0031 2447          pea       49
00001838  4E92      2448          jsr       (A2)
0000183A  584F      2449          addq.w    #4,A7
0000183C  6008      2450          bra.s     DumpRegisters_25
                    2451   DumpRegisters_24:
0000183E  4878 0030 2452          pea       48
00001842  4E92      2453          jsr       (A2)
00001844  584F      2454          addq.w    #4,A7
                    2455   DumpRegisters_25:
                    2456   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
00001846  3014      2457          move.w    (A4),D0
00001848  C07C 0200 2458          and.w     #512,D0
0000184C  0C40 0200 2459          cmp.w     #512,D0
00001850  660A      2460          bne.s     DumpRegisters_26
00001852  4878 0031 2461          pea       49
00001856  4E92      2462          jsr       (A2)
00001858  584F      2463          addq.w    #4,A7
0000185A  6008      2464          bra.s     DumpRegisters_27
                    2465   DumpRegisters_26:
0000185C  4878 0030 2466          pea       48
00001860  4E92      2467          jsr       (A2)
00001862  584F      2468          addq.w    #4,A7
                    2469   DumpRegisters_27:
                    2470   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
00001864  3014      2471          move.w    (A4),D0
00001866  C07C 0100 2472          and.w     #256,D0
0000186A  0C40 0100 2473          cmp.w     #256,D0
0000186E  660A      2474          bne.s     DumpRegisters_28
00001870  4878 0031 2475          pea       49
00001874  4E92      2476          jsr       (A2)
00001876  584F      2477          addq.w    #4,A7
00001878  6008      2478          bra.s     DumpRegisters_29
                    2479   DumpRegisters_28:
0000187A  4878 0030 2480          pea       48
0000187E  4E92      2481          jsr       (A2)
00001880  584F      2482          addq.w    #4,A7
                    2483   DumpRegisters_29:
                    2484   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001882  3014      2485          move.w    (A4),D0
00001884  C07C 0010 2486          and.w     #16,D0
00001888  0C40 0010 2487          cmp.w     #16,D0
0000188C  660A      2488          bne.s     DumpRegisters_30
0000188E  4878 0058 2489          pea       88
00001892  4E92      2490          jsr       (A2)
00001894  584F      2491          addq.w    #4,A7
00001896  6008      2492          bra.s     DumpRegisters_31
                    2493   DumpRegisters_30:
00001898  4878 002D 2494          pea       45
0000189C  4E92      2495          jsr       (A2)
0000189E  584F      2496          addq.w    #4,A7
                    2497   DumpRegisters_31:
                    2498   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
000018A0  3014      2499          move.w    (A4),D0
000018A2  C07C 0008 2500          and.w     #8,D0
000018A6  0C40 0008 2501          cmp.w     #8,D0
000018AA  660A      2502          bne.s     DumpRegisters_32
000018AC  4878 004E 2503          pea       78
000018B0  4E92      2504          jsr       (A2)
000018B2  584F      2505          addq.w    #4,A7
000018B4  6008      2506          bra.s     DumpRegisters_33
                    2507   DumpRegisters_32:
000018B6  4878 002D 2508          pea       45
000018BA  4E92      2509          jsr       (A2)
000018BC  584F      2510          addq.w    #4,A7
                    2511   DumpRegisters_33:
                    2512   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000018BE  3014      2513          move.w    (A4),D0
000018C0  C07C 0004 2514          and.w     #4,D0
000018C4  0C40 0004 2515          cmp.w     #4,D0
000018C8  660A      2516          bne.s     DumpRegisters_34
000018CA  4878 005A 2517          pea       90
000018CE  4E92      2518          jsr       (A2)
000018D0  584F      2519          addq.w    #4,A7
000018D2  6008      2520          bra.s     DumpRegisters_35
                    2521   DumpRegisters_34:
000018D4  4878 002D 2522          pea       45
000018D8  4E92      2523          jsr       (A2)
000018DA  584F      2524          addq.w    #4,A7
                    2525   DumpRegisters_35:
                    2526   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000018DC  3014      2527          move.w    (A4),D0
000018DE  C07C 0002 2528          and.w     #2,D0
000018E2  0C40 0002 2529          cmp.w     #2,D0
000018E6  660A      2530          bne.s     DumpRegisters_36
000018E8  4878 0056 2531          pea       86
000018EC  4E92      2532          jsr       (A2)
000018EE  584F      2533          addq.w    #4,A7
000018F0  6008      2534          bra.s     DumpRegisters_37
                    2535   DumpRegisters_36:
000018F2  4878 002D 2536          pea       45
000018F6  4E92      2537          jsr       (A2)
000018F8  584F      2538          addq.w    #4,A7
                    2539   DumpRegisters_37:
                    2540   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000018FA  3014      2541          move.w    (A4),D0
000018FC  C07C 0001 2542          and.w     #1,D0
00001900  0C40 0001 2543          cmp.w     #1,D0
00001904  660A      2544          bne.s     DumpRegisters_38
00001906  4878 0043 2545          pea       67
0000190A  4E92      2546          jsr       (A2)
0000190C  584F      2547          addq.w    #4,A7
0000190E  6008      2548          bra.s     DumpRegisters_39
                    2549   DumpRegisters_38:
00001910  4878 002D 2550          pea       45
00001914  4E92      2551          jsr       (A2)
00001916  584F      2552          addq.w    #4,A7
                    2553   DumpRegisters_39:
                    2554   ; putchar(']') ;
00001918  4878 005D 2555          pea       93
0000191C  4E92      2556          jsr       (A2)
0000191E  584F      2557          addq.w    #4,A7
                    2558   ; printf("\r\n PC = $%08X  ", PC) ;
00001920  2F39 0B00 2559          move.l    _PC.L,-(A7)
00001924  0120      
00001926  4879 0000 2560          pea       @m68kde~1_53.L
0000192A  407C      
0000192C  4E93      2561          jsr       (A3)
0000192E  504F      2562          addq.w    #8,A7
                    2563   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001930  2039 0B00 2564          move.l    _PC.L,D0
00001934  0120      
00001936  2040      2565          move.l    D0,A0
00001938  3010      2566          move.w    (A0),D0
0000193A  0C40 4E4E 2567          cmp.w     #20046,D0
0000193E  660A      2568          bne.s     DumpRegisters_40
                    2569   ; printf("[@ BREAKPOINT]") ;
00001940  4879 0000 2570          pea       @m68kde~1_54.L
00001944  408C      
00001946  4E93      2571          jsr       (A3)
00001948  584F      2572          addq.w    #4,A7
                    2573   DumpRegisters_40:
                    2574   ; printf("\r\n") ;
0000194A  4879 0000 2575          pea       @m68kde~1_1.L
0000194E  3AF0      
00001950  4E93      2576          jsr       (A3)
00001952  584F      2577          addq.w    #4,A7
                    2578   ; for(i=0; i < 8; i++)    {
00001954  4244      2579          clr.w     D4
                    2580   DumpRegisters_42:
00001956  0C44 0008 2581          cmp.w     #8,D4
0000195A  6C00 0040 2582          bge       DumpRegisters_44
                    2583   ; if(WatchPointSetOrCleared[i] == 1)
0000195E  48C4      2584          ext.l     D4
00001960  2004      2585          move.l    D4,D0
00001962  E588      2586          lsl.l     #2,D0
00001964  41F9 0B00 2587          lea       _WatchPointSetOrCleared.L,A0
00001968  01A2      
0000196A  2030 0800 2588          move.l    0(A0,D0.L),D0
0000196E  0C80 0000 2589          cmp.l     #1,D0
00001972  0001      
00001974  6622      2590          bne.s     DumpRegisters_45
                    2591   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001976  220D      2592          move.l    A5,D1
00001978  48C4      2593          ext.l     D4
0000197A  2F00      2594          move.l    D0,-(A7)
0000197C  2004      2595          move.l    D4,D0
0000197E  C1FC 0064 2596          muls      #100,D0
00001982  D280      2597          add.l     D0,D1
00001984  201F      2598          move.l    (A7)+,D0
00001986  2F01      2599          move.l    D1,-(A7)
00001988  48C4      2600          ext.l     D4
0000198A  2F04      2601          move.l    D4,-(A7)
0000198C  4879 0000 2602          pea       @m68kde~1_55.L
00001990  409C      
00001992  4E93      2603          jsr       (A3)
00001994  DEFC 000C 2604          add.w     #12,A7
                    2605   DumpRegisters_45:
00001998  5244      2606          addq.w    #1,D4
0000199A  60BA      2607          bra       DumpRegisters_42
                    2608   DumpRegisters_44:
0000199C  4CDF 3CFC 2609          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000019A0  4E75      2610          rts
                    2611   ; }
                    2612   ; }
                    2613   ; // Trace Exception Handler
                    2614   ; void DumpRegistersandPause(void)
                    2615   ; {
                    2616   _DumpRegistersandPause:
000019A2  2F0A      2617          move.l    A2,-(A7)
000019A4  45F9 0000 2618          lea       _printf.L,A2
000019A8  31DE      
                    2619   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000019AA  4879 0000 2620          pea       @m68kde~1_56.L
000019AE  40A8      
000019B0  4E92      2621          jsr       (A2)
000019B2  584F      2622          addq.w    #4,A7
                    2623   ; printf("\r\nBreak Points :[Disabled]") ;
000019B4  4879 0000 2624          pea       @m68kde~1_57.L
000019B8  40C8      
000019BA  4E92      2625          jsr       (A2)
000019BC  584F      2626          addq.w    #4,A7
                    2627   ; DumpRegisters() ;
000019BE  4EB8 14EE 2628          jsr       _DumpRegisters
                    2629   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000019C2  4879 0000 2630          pea       @m68kde~1_58.L
000019C6  40E4      
000019C8  4E92      2631          jsr       (A2)
000019CA  584F      2632          addq.w    #4,A7
                    2633   ; printf("\r\nPress <ESC> to Resume Program") ;
000019CC  4879 0000 2634          pea       @m68kde~1_59.L
000019D0  4110      
000019D2  4E92      2635          jsr       (A2)
000019D4  584F      2636          addq.w    #4,A7
                    2637   ; menu() ;
000019D6  4EB9 0000 2638          jsr       _menu
000019DA  2586      
000019DC  245F      2639          move.l    (A7)+,A2
000019DE  4E75      2640          rts
                    2641   ; }
                    2642   ; void ChangeRegisters(void)
                    2643   ; {
                    2644   _ChangeRegisters:
000019E0  4E56 FFFC 2645          link      A6,#-4
000019E4  48E7 303C 2646          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000019E8  45F9 0000 2647          lea       _printf.L,A2
000019EC  31DE      
000019EE  47EE FFFC 2648          lea       -4(A6),A3
000019F2  49F8 0CA4 2649          lea       _Get8HexDigits.L,A4
000019F6  4BF8 0B68 2650          lea       __getch.L,A5
                    2651   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2652   ; int reg_val ;
                    2653   ; char c, reg[3] ;
                    2654   ; reg[0] = tolower(_getch()) ;
000019FA  2F00      2655          move.l    D0,-(A7)
000019FC  4E95      2656          jsr       (A5)
000019FE  2200      2657          move.l    D0,D1
00001A00  201F      2658          move.l    (A7)+,D0
00001A02  2F01      2659          move.l    D1,-(A7)
00001A04  4EB9 0000 2660          jsr       _tolower
00001A08  315E      
00001A0A  584F      2661          addq.w    #4,A7
00001A0C  1680      2662          move.b    D0,(A3)
                    2663   ; reg[1] = c = tolower(_getch()) ;
00001A0E  2F00      2664          move.l    D0,-(A7)
00001A10  4E95      2665          jsr       (A5)
00001A12  2200      2666          move.l    D0,D1
00001A14  201F      2667          move.l    (A7)+,D0
00001A16  2F01      2668          move.l    D1,-(A7)
00001A18  4EB9 0000 2669          jsr       _tolower
00001A1C  315E      
00001A1E  584F      2670          addq.w    #4,A7
00001A20  1400      2671          move.b    D0,D2
00001A22  1740 0001 2672          move.b    D0,1(A3)
                    2673   ; if(reg[0] == (char)('d'))  {    // change data register
00001A26  1013      2674          move.b    (A3),D0
00001A28  0C00 0064 2675          cmp.b     #100,D0
00001A2C  6600 00AE 2676          bne       ChangeRegisters_1
                    2677   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001A30  102B 0001 2678          move.b    1(A3),D0
00001A34  0C00 0037 2679          cmp.b     #55,D0
00001A38  6E0A      2680          bgt.s     ChangeRegisters_5
00001A3A  102B 0001 2681          move.b    1(A3),D0
00001A3E  0C00 0030 2682          cmp.b     #48,D0
00001A42  6C0E      2683          bge.s     ChangeRegisters_3
                    2684   ChangeRegisters_5:
                    2685   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001A44  4879 0000 2686          pea       @m68kde~1_60.L
00001A48  4130      
00001A4A  4E92      2687          jsr       (A2)
00001A4C  584F      2688          addq.w    #4,A7
                    2689   ; return ;
00001A4E  6000 0244 2690          bra       ChangeRegisters_6
                    2691   ChangeRegisters_3:
                    2692   ; }
                    2693   ; else {
                    2694   ; printf("\r\nD%c = ", c) ;
00001A52  4882      2695          ext.w     D2
00001A54  48C2      2696          ext.l     D2
00001A56  2F02      2697          move.l    D2,-(A7)
00001A58  4879 0000 2698          pea       @m68kde~1_61.L
00001A5C  415C      
00001A5E  4E92      2699          jsr       (A2)
00001A60  504F      2700          addq.w    #8,A7
                    2701   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A62  42A7      2702          clr.l     -(A7)
00001A64  4E94      2703          jsr       (A4)
00001A66  584F      2704          addq.w    #4,A7
00001A68  2600      2705          move.l    D0,D3
                    2706   ; }
                    2707   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2708   ; if(c == (char)('0'))
00001A6A  0C02 0030 2709          cmp.b     #48,D2
00001A6E  660A      2710          bne.s     ChangeRegisters_7
                    2711   ; d0 = reg_val ;
00001A70  23C3 0B00 2712          move.l    D3,_d0.L
00001A74  00E4      
00001A76  6000 0060 2713          bra       ChangeRegisters_20
                    2714   ChangeRegisters_7:
                    2715   ; else if(c == (char)('1'))
00001A7A  0C02 0031 2716          cmp.b     #49,D2
00001A7E  660A      2717          bne.s     ChangeRegisters_9
                    2718   ; d1 = reg_val ;
00001A80  23C3 0B00 2719          move.l    D3,_d1.L
00001A84  00E8      
00001A86  6000 0050 2720          bra       ChangeRegisters_20
                    2721   ChangeRegisters_9:
                    2722   ; else if(c == (char)('2'))
00001A8A  0C02 0032 2723          cmp.b     #50,D2
00001A8E  660A      2724          bne.s     ChangeRegisters_11
                    2725   ; d2 = reg_val ;
00001A90  23C3 0B00 2726          move.l    D3,_d2.L
00001A94  00EC      
00001A96  6000 0040 2727          bra       ChangeRegisters_20
                    2728   ChangeRegisters_11:
                    2729   ; else if(c == (char)('3'))
00001A9A  0C02 0033 2730          cmp.b     #51,D2
00001A9E  6608      2731          bne.s     ChangeRegisters_13
                    2732   ; d3 = reg_val ;
00001AA0  23C3 0B00 2733          move.l    D3,_d3.L
00001AA4  00F0      
00001AA6  6030      2734          bra.s     ChangeRegisters_20
                    2735   ChangeRegisters_13:
                    2736   ; else if(c == (char)('4'))
00001AA8  0C02 0034 2737          cmp.b     #52,D2
00001AAC  6608      2738          bne.s     ChangeRegisters_15
                    2739   ; d4 = reg_val ;
00001AAE  23C3 0B00 2740          move.l    D3,_d4.L
00001AB2  00F4      
00001AB4  6022      2741          bra.s     ChangeRegisters_20
                    2742   ChangeRegisters_15:
                    2743   ; else if(c == (char)('5'))
00001AB6  0C02 0035 2744          cmp.b     #53,D2
00001ABA  6608      2745          bne.s     ChangeRegisters_17
                    2746   ; d5 = reg_val ;
00001ABC  23C3 0B00 2747          move.l    D3,_d5.L
00001AC0  00F8      
00001AC2  6014      2748          bra.s     ChangeRegisters_20
                    2749   ChangeRegisters_17:
                    2750   ; else if(c == (char)('6'))
00001AC4  0C02 0036 2751          cmp.b     #54,D2
00001AC8  6608      2752          bne.s     ChangeRegisters_19
                    2753   ; d6 = reg_val ;
00001ACA  23C3 0B00 2754          move.l    D3,_d6.L
00001ACE  00FC      
00001AD0  6006      2755          bra.s     ChangeRegisters_20
                    2756   ChangeRegisters_19:
                    2757   ; else
                    2758   ; d7 = reg_val ;
00001AD2  23C3 0B00 2759          move.l    D3,_d7.L
00001AD6  0100      
                    2760   ChangeRegisters_20:
00001AD8  6000 01B6 2761          bra       ChangeRegisters_51
                    2762   ChangeRegisters_1:
                    2763   ; }
                    2764   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001ADC  1013      2765          move.b    (A3),D0
00001ADE  0C00 0061 2766          cmp.b     #97,D0
00001AE2  6600 00A6 2767          bne       ChangeRegisters_21
                    2768   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001AE6  0C02 0037 2769          cmp.b     #55,D2
00001AEA  6E06      2770          bgt.s     ChangeRegisters_25
00001AEC  0C02 0030 2771          cmp.b     #48,D2
00001AF0  6C0E      2772          bge.s     ChangeRegisters_23
                    2773   ChangeRegisters_25:
                    2774   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001AF2  4879 0000 2775          pea       @m68kde~1_62.L
00001AF6  4166      
00001AF8  4E92      2776          jsr       (A2)
00001AFA  584F      2777          addq.w    #4,A7
                    2778   ; return ;
00001AFC  6000 0196 2779          bra       ChangeRegisters_6
                    2780   ChangeRegisters_23:
                    2781   ; }
                    2782   ; else {
                    2783   ; printf("\r\nA%c = ", c) ;
00001B00  4882      2784          ext.w     D2
00001B02  48C2      2785          ext.l     D2
00001B04  2F02      2786          move.l    D2,-(A7)
00001B06  4879 0000 2787          pea       @m68kde~1_63.L
00001B0A  4194      
00001B0C  4E92      2788          jsr       (A2)
00001B0E  504F      2789          addq.w    #8,A7
                    2790   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B10  42A7      2791          clr.l     -(A7)
00001B12  4E94      2792          jsr       (A4)
00001B14  584F      2793          addq.w    #4,A7
00001B16  2600      2794          move.l    D0,D3
                    2795   ; }
                    2796   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2797   ; if(c == (char)('0'))
00001B18  0C02 0030 2798          cmp.b     #48,D2
00001B1C  660A      2799          bne.s     ChangeRegisters_26
                    2800   ; a0 = reg_val ;
00001B1E  23C3 0B00 2801          move.l    D3,_a0.L
00001B22  0104      
00001B24  6000 0060 2802          bra       ChangeRegisters_39
                    2803   ChangeRegisters_26:
                    2804   ; else if(c == (char)('1'))
00001B28  0C02 0031 2805          cmp.b     #49,D2
00001B2C  660A      2806          bne.s     ChangeRegisters_28
                    2807   ; a1 = reg_val ;
00001B2E  23C3 0B00 2808          move.l    D3,_a1.L
00001B32  0108      
00001B34  6000 0050 2809          bra       ChangeRegisters_39
                    2810   ChangeRegisters_28:
                    2811   ; else if(c == (char)('2'))
00001B38  0C02 0032 2812          cmp.b     #50,D2
00001B3C  660A      2813          bne.s     ChangeRegisters_30
                    2814   ; a2 = reg_val ;
00001B3E  23C3 0B00 2815          move.l    D3,_a2.L
00001B42  010C      
00001B44  6000 0040 2816          bra       ChangeRegisters_39
                    2817   ChangeRegisters_30:
                    2818   ; else if(c == (char)('3'))
00001B48  0C02 0033 2819          cmp.b     #51,D2
00001B4C  6608      2820          bne.s     ChangeRegisters_32
                    2821   ; a3 = reg_val ;
00001B4E  23C3 0B00 2822          move.l    D3,_a3.L
00001B52  0110      
00001B54  6030      2823          bra.s     ChangeRegisters_39
                    2824   ChangeRegisters_32:
                    2825   ; else if(c == (char)('4'))
00001B56  0C02 0034 2826          cmp.b     #52,D2
00001B5A  6608      2827          bne.s     ChangeRegisters_34
                    2828   ; a4 = reg_val ;
00001B5C  23C3 0B00 2829          move.l    D3,_a4.L
00001B60  0114      
00001B62  6022      2830          bra.s     ChangeRegisters_39
                    2831   ChangeRegisters_34:
                    2832   ; else if(c == (char)('5'))
00001B64  0C02 0035 2833          cmp.b     #53,D2
00001B68  6608      2834          bne.s     ChangeRegisters_36
                    2835   ; a5 = reg_val ;
00001B6A  23C3 0B00 2836          move.l    D3,_a5.L
00001B6E  0118      
00001B70  6014      2837          bra.s     ChangeRegisters_39
                    2838   ChangeRegisters_36:
                    2839   ; else if(c == (char)('6'))
00001B72  0C02 0036 2840          cmp.b     #54,D2
00001B76  6608      2841          bne.s     ChangeRegisters_38
                    2842   ; a6 = reg_val ;
00001B78  23C3 0B00 2843          move.l    D3,_a6.L
00001B7C  011C      
00001B7E  6006      2844          bra.s     ChangeRegisters_39
                    2845   ChangeRegisters_38:
                    2846   ; else
                    2847   ; USP = reg_val ;
00001B80  23C3 0B00 2848          move.l    D3,_USP.L
00001B84  0128      
                    2849   ChangeRegisters_39:
00001B86  6000 0108 2850          bra       ChangeRegisters_51
                    2851   ChangeRegisters_21:
                    2852   ; }
                    2853   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001B8A  1013      2854          move.b    (A3),D0
00001B8C  0C00 0075 2855          cmp.b     #117,D0
00001B90  6600 004E 2856          bne       ChangeRegisters_40
00001B94  0C02 0073 2857          cmp.b     #115,D2
00001B98  6600 0046 2858          bne       ChangeRegisters_40
                    2859   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001B9C  2F00      2860          move.l    D0,-(A7)
00001B9E  4E95      2861          jsr       (A5)
00001BA0  2200      2862          move.l    D0,D1
00001BA2  201F      2863          move.l    (A7)+,D0
00001BA4  2F01      2864          move.l    D1,-(A7)
00001BA6  4EB9 0000 2865          jsr       _tolower
00001BAA  315E      
00001BAC  584F      2866          addq.w    #4,A7
00001BAE  0C80 0000 2867          cmp.l     #112,D0
00001BB2  0070      
00001BB4  6618      2868          bne.s     ChangeRegisters_42
                    2869   ; printf("\r\nUser SP = ") ;
00001BB6  4879 0000 2870          pea       @m68kde~1_64.L
00001BBA  419E      
00001BBC  4E92      2871          jsr       (A2)
00001BBE  584F      2872          addq.w    #4,A7
                    2873   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BC0  42A7      2874          clr.l     -(A7)
00001BC2  4E94      2875          jsr       (A4)
00001BC4  584F      2876          addq.w    #4,A7
00001BC6  23C0 0B00 2877          move.l    D0,_USP.L
00001BCA  0128      
00001BCC  600E      2878          bra.s     ChangeRegisters_43
                    2879   ChangeRegisters_42:
                    2880   ; }
                    2881   ; else {
                    2882   ; printf("\r\nIllegal Register....") ;
00001BCE  4879 0000 2883          pea       @m68kde~1_65.L
00001BD2  41AC      
00001BD4  4E92      2884          jsr       (A2)
00001BD6  584F      2885          addq.w    #4,A7
                    2886   ; return ;
00001BD8  6000 00BA 2887          bra       ChangeRegisters_6
                    2888   ChangeRegisters_43:
00001BDC  6000 00B2 2889          bra       ChangeRegisters_51
                    2890   ChangeRegisters_40:
                    2891   ; }
                    2892   ; }
                    2893   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001BE0  1013      2894          move.b    (A3),D0
00001BE2  0C00 0073 2895          cmp.b     #115,D0
00001BE6  6600 004E 2896          bne       ChangeRegisters_44
00001BEA  0C02 0073 2897          cmp.b     #115,D2
00001BEE  6600 0046 2898          bne       ChangeRegisters_44
                    2899   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001BF2  2F00      2900          move.l    D0,-(A7)
00001BF4  4E95      2901          jsr       (A5)
00001BF6  2200      2902          move.l    D0,D1
00001BF8  201F      2903          move.l    (A7)+,D0
00001BFA  2F01      2904          move.l    D1,-(A7)
00001BFC  4EB9 0000 2905          jsr       _tolower
00001C00  315E      
00001C02  584F      2906          addq.w    #4,A7
00001C04  0C80 0000 2907          cmp.l     #112,D0
00001C08  0070      
00001C0A  6618      2908          bne.s     ChangeRegisters_46
                    2909   ; printf("\r\nSystem SP = ") ;
00001C0C  4879 0000 2910          pea       @m68kde~1_66.L
00001C10  41C4      
00001C12  4E92      2911          jsr       (A2)
00001C14  584F      2912          addq.w    #4,A7
                    2913   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C16  42A7      2914          clr.l     -(A7)
00001C18  4E94      2915          jsr       (A4)
00001C1A  584F      2916          addq.w    #4,A7
00001C1C  23C0 0B00 2917          move.l    D0,_SSP.L
00001C20  0124      
00001C22  600E      2918          bra.s     ChangeRegisters_47
                    2919   ChangeRegisters_46:
                    2920   ; }
                    2921   ; else {
                    2922   ; printf("\r\nIllegal Register....") ;
00001C24  4879 0000 2923          pea       @m68kde~1_65.L
00001C28  41AC      
00001C2A  4E92      2924          jsr       (A2)
00001C2C  584F      2925          addq.w    #4,A7
                    2926   ; return ;
00001C2E  6000 0064 2927          bra       ChangeRegisters_6
                    2928   ChangeRegisters_47:
00001C32  6000 005C 2929          bra       ChangeRegisters_51
                    2930   ChangeRegisters_44:
                    2931   ; }
                    2932   ; }
                    2933   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001C36  1013      2934          move.b    (A3),D0
00001C38  0C00 0070 2935          cmp.b     #112,D0
00001C3C  6620      2936          bne.s     ChangeRegisters_48
00001C3E  0C02 0063 2937          cmp.b     #99,D2
00001C42  661A      2938          bne.s     ChangeRegisters_48
                    2939   ; printf("\r\nPC = ") ;
00001C44  4879 0000 2940          pea       @m68kde~1_67.L
00001C48  41D4      
00001C4A  4E92      2941          jsr       (A2)
00001C4C  584F      2942          addq.w    #4,A7
                    2943   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C4E  42A7      2944          clr.l     -(A7)
00001C50  4E94      2945          jsr       (A4)
00001C52  584F      2946          addq.w    #4,A7
00001C54  23C0 0B00 2947          move.l    D0,_PC.L
00001C58  0120      
00001C5A  6000 0034 2948          bra       ChangeRegisters_51
                    2949   ChangeRegisters_48:
                    2950   ; }
                    2951   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001C5E  1013      2952          move.b    (A3),D0
00001C60  0C00 0073 2953          cmp.b     #115,D0
00001C64  6620      2954          bne.s     ChangeRegisters_50
00001C66  0C02 0072 2955          cmp.b     #114,D2
00001C6A  661A      2956          bne.s     ChangeRegisters_50
                    2957   ; printf("\r\nSR = ") ;
00001C6C  4879 0000 2958          pea       @m68kde~1_68.L
00001C70  41DC      
00001C72  4E92      2959          jsr       (A2)
00001C74  584F      2960          addq.w    #4,A7
                    2961   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001C76  42A7      2962          clr.l     -(A7)
00001C78  4EB8 0C58 2963          jsr       _Get4HexDigits
00001C7C  584F      2964          addq.w    #4,A7
00001C7E  33C0 0B00 2965          move.w    D0,_SR.L
00001C82  012C      
00001C84  600A      2966          bra.s     ChangeRegisters_51
                    2967   ChangeRegisters_50:
                    2968   ; }
                    2969   ; else
                    2970   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001C86  4879 0000 2971          pea       @m68kde~1_69.L
00001C8A  41E4      
00001C8C  4E92      2972          jsr       (A2)
00001C8E  584F      2973          addq.w    #4,A7
                    2974   ChangeRegisters_51:
                    2975   ; DumpRegisters() ;
00001C90  4EB8 14EE 2976          jsr       _DumpRegisters
                    2977   ChangeRegisters_6:
00001C94  4CDF 3C0C 2978          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C98  4E5E      2979          unlk      A6
00001C9A  4E75      2980          rts
                    2981   ; }
                    2982   ; void BreakPointDisplay(void)
                    2983   ; {
                    2984   _BreakPointDisplay:
00001C9C  48E7 3030 2985          movem.l   D2/D3/A2/A3,-(A7)
00001CA0  45F9 0000 2986          lea       _printf.L,A2
00001CA4  31DE      
00001CA6  47F9 0B00 2987          lea       _BreakPointAddress.L,A3
00001CAA  012E      
                    2988   ; int i, BreakPointsSet = 0 ;
00001CAC  4283      2989          clr.l     D3
                    2990   ; // any break points  set
                    2991   ; for(i = 0; i < 8; i++)  {
00001CAE  4282      2992          clr.l     D2
                    2993   BreakPointDisplay_1:
00001CB0  0C82 0000 2994          cmp.l     #8,D2
00001CB4  0008      
00001CB6  6C1C      2995          bge.s     BreakPointDisplay_3
                    2996   ; if(BreakPointSetOrCleared[i] == 1)
00001CB8  2002      2997          move.l    D2,D0
00001CBA  E588      2998          lsl.l     #2,D0
00001CBC  41F9 0B00 2999          lea       _BreakPointSetOrCleared.L,A0
00001CC0  015E      
00001CC2  2030 0800 3000          move.l    0(A0,D0.L),D0
00001CC6  0C80 0000 3001          cmp.l     #1,D0
00001CCA  0001      
00001CCC  6602      3002          bne.s     BreakPointDisplay_4
                    3003   ; BreakPointsSet = 1;
00001CCE  7601      3004          moveq     #1,D3
                    3005   BreakPointDisplay_4:
00001CD0  5282      3006          addq.l    #1,D2
00001CD2  60DC      3007          bra       BreakPointDisplay_1
                    3008   BreakPointDisplay_3:
                    3009   ; }
                    3010   ; if(BreakPointsSet == 1) {
00001CD4  0C83 0000 3011          cmp.l     #1,D3
00001CD8  0001      
00001CDA  6616      3012          bne.s     BreakPointDisplay_6
                    3013   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001CDC  4879 0000 3014          pea       @m68kde~1_70.L
00001CE0  4220      
00001CE2  4E92      3015          jsr       (A2)
00001CE4  584F      3016          addq.w    #4,A7
                    3017   ; printf("\r\n---     ---------    -----------") ;
00001CE6  4879 0000 3018          pea       @m68kde~1_71.L
00001CEA  4246      
00001CEC  4E92      3019          jsr       (A2)
00001CEE  584F      3020          addq.w    #4,A7
00001CF0  600A      3021          bra.s     BreakPointDisplay_7
                    3022   BreakPointDisplay_6:
                    3023   ; }
                    3024   ; else
                    3025   ; printf("\r\nNo BreakPoints Set") ;
00001CF2  4879 0000 3026          pea       @m68kde~1_72.L
00001CF6  426A      
00001CF8  4E92      3027          jsr       (A2)
00001CFA  584F      3028          addq.w    #4,A7
                    3029   BreakPointDisplay_7:
                    3030   ; for(i = 0; i < 8; i++)  {
00001CFC  4282      3031          clr.l     D2
                    3032   BreakPointDisplay_8:
00001CFE  0C82 0000 3033          cmp.l     #8,D2
00001D02  0008      
00001D04  6C00 005A 3034          bge       BreakPointDisplay_10
                    3035   ; // put opcode back, then put break point back
                    3036   ; if(BreakPointSetOrCleared[i] == 1)  {
00001D08  2002      3037          move.l    D2,D0
00001D0A  E588      3038          lsl.l     #2,D0
00001D0C  41F9 0B00 3039          lea       _BreakPointSetOrCleared.L,A0
00001D10  015E      
00001D12  2030 0800 3040          move.l    0(A0,D0.L),D0
00001D16  0C80 0000 3041          cmp.l     #1,D0
00001D1A  0001      
00001D1C  6600 003E 3042          bne       BreakPointDisplay_11
                    3043   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001D20  2002      3044          move.l    D2,D0
00001D22  E388      3045          lsl.l     #1,D0
00001D24  41F9 0B00 3046          lea       _BreakPointInstruction.L,A0
00001D28  014E      
00001D2A  2202      3047          move.l    D2,D1
00001D2C  E589      3048          lsl.l     #2,D1
00001D2E  2233 1800 3049          move.l    0(A3,D1.L),D1
00001D32  2241      3050          move.l    D1,A1
00001D34  32B0 0800 3051          move.w    0(A0,D0.L),(A1)
                    3052   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001D38  2002      3053          move.l    D2,D0
00001D3A  E588      3054          lsl.l     #2,D0
00001D3C  2033 0800 3055          move.l    0(A3,D0.L),D0
00001D40  2040      3056          move.l    D0,A0
00001D42  30BC 4E4E 3057          move.w    #20046,(A0)
                    3058   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001D46  2202      3059          move.l    D2,D1
00001D48  E589      3060          lsl.l     #2,D1
00001D4A  2F33 1800 3061          move.l    0(A3,D1.L),-(A7)
00001D4E  2F02      3062          move.l    D2,-(A7)
00001D50  4879 0000 3063          pea       @m68kde~1_73.L
00001D54  4280      
00001D56  4E92      3064          jsr       (A2)
00001D58  DEFC 000C 3065          add.w     #12,A7
                    3066   BreakPointDisplay_11:
00001D5C  5282      3067          addq.l    #1,D2
00001D5E  609E      3068          bra       BreakPointDisplay_8
                    3069   BreakPointDisplay_10:
                    3070   ; }
                    3071   ; }
                    3072   ; printf("\r\n") ;
00001D60  4879 0000 3073          pea       @m68kde~1_1.L
00001D64  3AF0      
00001D66  4E92      3074          jsr       (A2)
00001D68  584F      3075          addq.w    #4,A7
00001D6A  4CDF 0C0C 3076          movem.l   (A7)+,D2/D3/A2/A3
00001D6E  4E75      3077          rts
                    3078   ; }
                    3079   ; void WatchPointDisplay(void)
                    3080   ; {
                    3081   _WatchPointDisplay:
00001D70  48E7 3020 3082          movem.l   D2/D3/A2,-(A7)
00001D74  45F9 0000 3083          lea       _printf.L,A2
00001D78  31DE      
                    3084   ; int i ;
                    3085   ; int WatchPointsSet = 0 ;
00001D7A  4283      3086          clr.l     D3
                    3087   ; // any watchpoints set
                    3088   ; for(i = 0; i < 8; i++)  {
00001D7C  4282      3089          clr.l     D2
                    3090   WatchPointDisplay_1:
00001D7E  0C82 0000 3091          cmp.l     #8,D2
00001D82  0008      
00001D84  6C1C      3092          bge.s     WatchPointDisplay_3
                    3093   ; if(WatchPointSetOrCleared[i] == 1)
00001D86  2002      3094          move.l    D2,D0
00001D88  E588      3095          lsl.l     #2,D0
00001D8A  41F9 0B00 3096          lea       _WatchPointSetOrCleared.L,A0
00001D8E  01A2      
00001D90  2030 0800 3097          move.l    0(A0,D0.L),D0
00001D94  0C80 0000 3098          cmp.l     #1,D0
00001D98  0001      
00001D9A  6602      3099          bne.s     WatchPointDisplay_4
                    3100   ; WatchPointsSet = 1;
00001D9C  7601      3101          moveq     #1,D3
                    3102   WatchPointDisplay_4:
00001D9E  5282      3103          addq.l    #1,D2
00001DA0  60DC      3104          bra       WatchPointDisplay_1
                    3105   WatchPointDisplay_3:
                    3106   ; }
                    3107   ; if(WatchPointsSet == 1) {
00001DA2  0C83 0000 3108          cmp.l     #1,D3
00001DA6  0001      
00001DA8  6616      3109          bne.s     WatchPointDisplay_6
                    3110   ; printf("\r\nNum     Address") ;
00001DAA  4879 0000 3111          pea       @m68kde~1_74.L
00001DAE  4290      
00001DB0  4E92      3112          jsr       (A2)
00001DB2  584F      3113          addq.w    #4,A7
                    3114   ; printf("\r\n---     ---------") ;
00001DB4  4879 0000 3115          pea       @m68kde~1_75.L
00001DB8  42A2      
00001DBA  4E92      3116          jsr       (A2)
00001DBC  584F      3117          addq.w    #4,A7
00001DBE  600A      3118          bra.s     WatchPointDisplay_7
                    3119   WatchPointDisplay_6:
                    3120   ; }
                    3121   ; else
                    3122   ; printf("\r\nNo WatchPoints Set") ;
00001DC0  4879 0000 3123          pea       @m68kde~1_76.L
00001DC4  42B6      
00001DC6  4E92      3124          jsr       (A2)
00001DC8  584F      3125          addq.w    #4,A7
                    3126   WatchPointDisplay_7:
                    3127   ; for(i = 0; i < 8; i++)  {
00001DCA  4282      3128          clr.l     D2
                    3129   WatchPointDisplay_8:
00001DCC  0C82 0000 3130          cmp.l     #8,D2
00001DD0  0008      
00001DD2  6C00 0038 3131          bge       WatchPointDisplay_10
                    3132   ; if(WatchPointSetOrCleared[i] == 1)
00001DD6  2002      3133          move.l    D2,D0
00001DD8  E588      3134          lsl.l     #2,D0
00001DDA  41F9 0B00 3135          lea       _WatchPointSetOrCleared.L,A0
00001DDE  01A2      
00001DE0  2030 0800 3136          move.l    0(A0,D0.L),D0
00001DE4  0C80 0000 3137          cmp.l     #1,D0
00001DE8  0001      
00001DEA  661C      3138          bne.s     WatchPointDisplay_11
                    3139   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001DEC  2202      3140          move.l    D2,D1
00001DEE  E589      3141          lsl.l     #2,D1
00001DF0  41F9 0B00 3142          lea       _WatchPointAddress.L,A0
00001DF4  0182      
00001DF6  2F30 1800 3143          move.l    0(A0,D1.L),-(A7)
00001DFA  2F02      3144          move.l    D2,-(A7)
00001DFC  4879 0000 3145          pea       @m68kde~1_73.L
00001E00  4280      
00001E02  4E92      3146          jsr       (A2)
00001E04  DEFC 000C 3147          add.w     #12,A7
                    3148   WatchPointDisplay_11:
00001E08  5282      3149          addq.l    #1,D2
00001E0A  60C0      3150          bra       WatchPointDisplay_8
                    3151   WatchPointDisplay_10:
                    3152   ; }
                    3153   ; printf("\r\n") ;
00001E0C  4879 0000 3154          pea       @m68kde~1_1.L
00001E10  3AF0      
00001E12  4E92      3155          jsr       (A2)
00001E14  584F      3156          addq.w    #4,A7
00001E16  4CDF 040C 3157          movem.l   (A7)+,D2/D3/A2
00001E1A  4E75      3158          rts
                    3159   ; }
                    3160   ; void BreakPointClear(void)
                    3161   ; {
                    3162   _BreakPointClear:
00001E1C  4E56 FFFC 3163          link      A6,#-4
00001E20  48E7 2020 3164          movem.l   D2/A2,-(A7)
00001E24  45F9 0000 3165          lea       _printf.L,A2
00001E28  31DE      
                    3166   ; unsigned int i ;
                    3167   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3168   ; BreakPointDisplay() ;
00001E2A  4EB8 1C9C 3169          jsr       _BreakPointDisplay
                    3170   ; printf("\r\nEnter Break Point Number: ") ;
00001E2E  4879 0000 3171          pea       @m68kde~1_77.L
00001E32  42CC      
00001E34  4E92      3172          jsr       (A2)
00001E36  584F      3173          addq.w    #4,A7
                    3174   ; i = xtod(_getch()) ;           // get break pointer number
00001E38  2F00      3175          move.l    D0,-(A7)
00001E3A  4EB8 0B68 3176          jsr       __getch
00001E3E  2200      3177          move.l    D0,D1
00001E40  201F      3178          move.l    (A7)+,D0
00001E42  2F01      3179          move.l    D1,-(A7)
00001E44  4EB8 0BD2 3180          jsr       _xtod
00001E48  584F      3181          addq.w    #4,A7
00001E4A  C0BC 0000 3182          and.l     #255,D0
00001E4E  00FF      
00001E50  2400      3183          move.l    D0,D2
                    3184   ; if((i < 0) || (i > 7))   {
00001E52  0C82 0000 3185          cmp.l     #0,D2
00001E56  0000      
00001E58  6508      3186          blo.s     BreakPointClear_3
00001E5A  0C82 0000 3187          cmp.l     #7,D2
00001E5E  0007      
00001E60  630E      3188          bls.s     BreakPointClear_1
                    3189   BreakPointClear_3:
                    3190   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E62  4879 0000 3191          pea       @m68kde~1_78.L
00001E66  42EA      
00001E68  4E92      3192          jsr       (A2)
00001E6A  584F      3193          addq.w    #4,A7
                    3194   ; return ;
00001E6C  6000 0080 3195          bra       BreakPointClear_4
                    3196   BreakPointClear_1:
                    3197   ; }
                    3198   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001E70  2002      3199          move.l    D2,D0
00001E72  E588      3200          lsl.l     #2,D0
00001E74  41F9 0B00 3201          lea       _BreakPointSetOrCleared.L,A0
00001E78  015E      
00001E7A  2030 0800 3202          move.l    0(A0,D0.L),D0
00001E7E  0C80 0000 3203          cmp.l     #1,D0
00001E82  0001      
00001E84  6600 005A 3204          bne       BreakPointClear_5
                    3205   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001E88  2002      3206          move.l    D2,D0
00001E8A  E588      3207          lsl.l     #2,D0
00001E8C  41F9 0B00 3208          lea       _BreakPointAddress.L,A0
00001E90  012E      
00001E92  2D70 0800 3209          move.l    0(A0,D0.L),-4(A6)
00001E96  FFFC      
                    3210   ; BreakPointAddress[i] = 0 ;
00001E98  2002      3211          move.l    D2,D0
00001E9A  E588      3212          lsl.l     #2,D0
00001E9C  41F9 0B00 3213          lea       _BreakPointAddress.L,A0
00001EA0  012E      
00001EA2  42B0 0800 3214          clr.l     0(A0,D0.L)
                    3215   ; BreakPointSetOrCleared[i] = 0 ;
00001EA6  2002      3216          move.l    D2,D0
00001EA8  E588      3217          lsl.l     #2,D0
00001EAA  41F9 0B00 3218          lea       _BreakPointSetOrCleared.L,A0
00001EAE  015E      
00001EB0  42B0 0800 3219          clr.l     0(A0,D0.L)
                    3220   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001EB4  2002      3221          move.l    D2,D0
00001EB6  E388      3222          lsl.l     #1,D0
00001EB8  41F9 0B00 3223          lea       _BreakPointInstruction.L,A0
00001EBC  014E      
00001EBE  226E FFFC 3224          move.l    -4(A6),A1
00001EC2  32B0 0800 3225          move.w    0(A0,D0.L),(A1)
                    3226   ; BreakPointInstruction[i] = 0 ;
00001EC6  2002      3227          move.l    D2,D0
00001EC8  E388      3228          lsl.l     #1,D0
00001ECA  41F9 0B00 3229          lea       _BreakPointInstruction.L,A0
00001ECE  014E      
00001ED0  4270 0800 3230          clr.w     0(A0,D0.L)
                    3231   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ED4  4879 0000 3232          pea       @m68kde~1_79.L
00001ED8  4306      
00001EDA  4E92      3233          jsr       (A2)
00001EDC  584F      3234          addq.w    #4,A7
00001EDE  600A      3235          bra.s     BreakPointClear_6
                    3236   BreakPointClear_5:
                    3237   ; }
                    3238   ; else
                    3239   ; printf("\r\nBreak Point wasn't Set.....") ;
00001EE0  4879 0000 3240          pea       @m68kde~1_80.L
00001EE4  4324      
00001EE6  4E92      3241          jsr       (A2)
00001EE8  584F      3242          addq.w    #4,A7
                    3243   BreakPointClear_6:
                    3244   ; BreakPointDisplay() ;
00001EEA  4EB8 1C9C 3245          jsr       _BreakPointDisplay
                    3246   ; return ;
                    3247   BreakPointClear_4:
00001EEE  4CDF 0404 3248          movem.l   (A7)+,D2/A2
00001EF2  4E5E      3249          unlk      A6
00001EF4  4E75      3250          rts
                    3251   ; }
                    3252   ; void WatchPointClear(void)
                    3253   ; {
                    3254   _WatchPointClear:
00001EF6  48E7 2020 3255          movem.l   D2/A2,-(A7)
00001EFA  45F9 0000 3256          lea       _printf.L,A2
00001EFE  31DE      
                    3257   ; unsigned int i ;
                    3258   ; WatchPointDisplay() ;
00001F00  4EB8 1D70 3259          jsr       _WatchPointDisplay
                    3260   ; printf("\r\nEnter Watch Point Number: ") ;
00001F04  4879 0000 3261          pea       @m68kde~1_81.L
00001F08  4342      
00001F0A  4E92      3262          jsr       (A2)
00001F0C  584F      3263          addq.w    #4,A7
                    3264   ; i = xtod(_getch()) ;           // get watch pointer number
00001F0E  2F00      3265          move.l    D0,-(A7)
00001F10  4EB8 0B68 3266          jsr       __getch
00001F14  2200      3267          move.l    D0,D1
00001F16  201F      3268          move.l    (A7)+,D0
00001F18  2F01      3269          move.l    D1,-(A7)
00001F1A  4EB8 0BD2 3270          jsr       _xtod
00001F1E  584F      3271          addq.w    #4,A7
00001F20  C0BC 0000 3272          and.l     #255,D0
00001F24  00FF      
00001F26  2400      3273          move.l    D0,D2
                    3274   ; if((i < 0) || (i > 7))   {
00001F28  0C82 0000 3275          cmp.l     #0,D2
00001F2C  0000      
00001F2E  6508      3276          blo.s     WatchPointClear_3
00001F30  0C82 0000 3277          cmp.l     #7,D2
00001F34  0007      
00001F36  630E      3278          bls.s     WatchPointClear_1
                    3279   WatchPointClear_3:
                    3280   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F38  4879 0000 3281          pea       @m68kde~1_78.L
00001F3C  42EA      
00001F3E  4E92      3282          jsr       (A2)
00001F40  584F      3283          addq.w    #4,A7
                    3284   ; return ;
00001F42  6000 004E 3285          bra       WatchPointClear_4
                    3286   WatchPointClear_1:
                    3287   ; }
                    3288   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001F46  2002      3289          move.l    D2,D0
00001F48  E588      3290          lsl.l     #2,D0
00001F4A  41F9 0B00 3291          lea       _WatchPointSetOrCleared.L,A0
00001F4E  01A2      
00001F50  2030 0800 3292          move.l    0(A0,D0.L),D0
00001F54  0C80 0000 3293          cmp.l     #1,D0
00001F58  0001      
00001F5A  6628      3294          bne.s     WatchPointClear_5
                    3295   ; WatchPointAddress[i] = 0 ;
00001F5C  2002      3296          move.l    D2,D0
00001F5E  E588      3297          lsl.l     #2,D0
00001F60  41F9 0B00 3298          lea       _WatchPointAddress.L,A0
00001F64  0182      
00001F66  42B0 0800 3299          clr.l     0(A0,D0.L)
                    3300   ; WatchPointSetOrCleared[i] = 0 ;
00001F6A  2002      3301          move.l    D2,D0
00001F6C  E588      3302          lsl.l     #2,D0
00001F6E  41F9 0B00 3303          lea       _WatchPointSetOrCleared.L,A0
00001F72  01A2      
00001F74  42B0 0800 3304          clr.l     0(A0,D0.L)
                    3305   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001F78  4879 0000 3306          pea       @m68kde~1_82.L
00001F7C  4360      
00001F7E  4E92      3307          jsr       (A2)
00001F80  584F      3308          addq.w    #4,A7
00001F82  600A      3309          bra.s     WatchPointClear_6
                    3310   WatchPointClear_5:
                    3311   ; }
                    3312   ; else
                    3313   ; printf("\r\nWatch Point Was not Set.....") ;
00001F84  4879 0000 3314          pea       @m68kde~1_83.L
00001F88  437E      
00001F8A  4E92      3315          jsr       (A2)
00001F8C  584F      3316          addq.w    #4,A7
                    3317   WatchPointClear_6:
                    3318   ; WatchPointDisplay() ;
00001F8E  4EB8 1D70 3319          jsr       _WatchPointDisplay
                    3320   ; return ;
                    3321   WatchPointClear_4:
00001F92  4CDF 0404 3322          movem.l   (A7)+,D2/A2
00001F96  4E75      3323          rts
                    3324   ; }
                    3325   ; void DisableBreakPoints(void)
                    3326   ; {
                    3327   _DisableBreakPoints:
00001F98  4E56 FFFC 3328          link      A6,#-4
00001F9C  2F02      3329          move.l    D2,-(A7)
                    3330   ; int i ;
                    3331   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3332   ; for(i = 0; i < 8; i++)  {
00001F9E  4282      3333          clr.l     D2
                    3334   DisableBreakPoints_1:
00001FA0  0C82 0000 3335          cmp.l     #8,D2
00001FA4  0008      
00001FA6  6C00 003E 3336          bge       DisableBreakPoints_3
                    3337   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001FAA  2002      3338          move.l    D2,D0
00001FAC  E588      3339          lsl.l     #2,D0
00001FAE  41F9 0B00 3340          lea       _BreakPointSetOrCleared.L,A0
00001FB2  015E      
00001FB4  2030 0800 3341          move.l    0(A0,D0.L),D0
00001FB8  0C80 0000 3342          cmp.l     #1,D0
00001FBC  0001      
00001FBE  6622      3343          bne.s     DisableBreakPoints_4
                    3344   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FC0  2002      3345          move.l    D2,D0
00001FC2  E588      3346          lsl.l     #2,D0
00001FC4  41F9 0B00 3347          lea       _BreakPointAddress.L,A0
00001FC8  012E      
00001FCA  2D70 0800 3348          move.l    0(A0,D0.L),-4(A6)
00001FCE  FFFC      
                    3349   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001FD0  2002      3350          move.l    D2,D0
00001FD2  E388      3351          lsl.l     #1,D0
00001FD4  41F9 0B00 3352          lea       _BreakPointInstruction.L,A0
00001FD8  014E      
00001FDA  226E FFFC 3353          move.l    -4(A6),A1
00001FDE  32B0 0800 3354          move.w    0(A0,D0.L),(A1)
                    3355   DisableBreakPoints_4:
00001FE2  5282      3356          addq.l    #1,D2
00001FE4  60BA      3357          bra       DisableBreakPoints_1
                    3358   DisableBreakPoints_3:
00001FE6  241F      3359          move.l    (A7)+,D2
00001FE8  4E5E      3360          unlk      A6
00001FEA  4E75      3361          rts
                    3362   ; }
                    3363   ; }
                    3364   ; }
                    3365   ; void EnableBreakPoints(void)
                    3366   ; {
                    3367   _EnableBreakPoints:
00001FEC  4E56 FFFC 3368          link      A6,#-4
00001FF0  2F02      3369          move.l    D2,-(A7)
                    3370   ; int i ;
                    3371   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3372   ; for(i = 0; i < 8; i++)  {
00001FF2  4282      3373          clr.l     D2
                    3374   EnableBreakPoints_1:
00001FF4  0C82 0000 3375          cmp.l     #8,D2
00001FF8  0008      
00001FFA  6C32      3376          bge.s     EnableBreakPoints_3
                    3377   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001FFC  2002      3378          move.l    D2,D0
00001FFE  E588      3379          lsl.l     #2,D0
00002000  41F9 0B00 3380          lea       _BreakPointSetOrCleared.L,A0
00002004  015E      
00002006  2030 0800 3381          move.l    0(A0,D0.L),D0
0000200A  0C80 0000 3382          cmp.l     #1,D0
0000200E  0001      
00002010  6618      3383          bne.s     EnableBreakPoints_4
                    3384   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002012  2002      3385          move.l    D2,D0
00002014  E588      3386          lsl.l     #2,D0
00002016  41F9 0B00 3387          lea       _BreakPointAddress.L,A0
0000201A  012E      
0000201C  2D70 0800 3388          move.l    0(A0,D0.L),-4(A6)
00002020  FFFC      
                    3389   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002022  206E FFFC 3390          move.l    -4(A6),A0
00002026  30BC 4E4E 3391          move.w    #20046,(A0)
                    3392   EnableBreakPoints_4:
0000202A  5282      3393          addq.l    #1,D2
0000202C  60C6      3394          bra       EnableBreakPoints_1
                    3395   EnableBreakPoints_3:
0000202E  241F      3396          move.l    (A7)+,D2
00002030  4E5E      3397          unlk      A6
00002032  4E75      3398          rts
                    3399   ; }
                    3400   ; }
                    3401   ; }
                    3402   ; void KillAllBreakPoints(void)
                    3403   ; {
                    3404   _KillAllBreakPoints:
00002034  4E56 FFFC 3405          link      A6,#-4
00002038  2F02      3406          move.l    D2,-(A7)
                    3407   ; int i ;
                    3408   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3409   ; for(i = 0; i < 8; i++)  {
0000203A  4282      3410          clr.l     D2
                    3411   KillAllBreakPoints_1:
0000203C  0C82 0000 3412          cmp.l     #8,D2
00002040  0008      
00002042  6C00 0052 3413          bge       KillAllBreakPoints_3
                    3414   ; // clear BP
                    3415   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002046  2002      3416          move.l    D2,D0
00002048  E588      3417          lsl.l     #2,D0
0000204A  41F9 0B00 3418          lea       _BreakPointAddress.L,A0
0000204E  012E      
00002050  2D70 0800 3419          move.l    0(A0,D0.L),-4(A6)
00002054  FFFC      
                    3420   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002056  2002      3421          move.l    D2,D0
00002058  E388      3422          lsl.l     #1,D0
0000205A  41F9 0B00 3423          lea       _BreakPointInstruction.L,A0
0000205E  014E      
00002060  226E FFFC 3424          move.l    -4(A6),A1
00002064  32B0 0800 3425          move.w    0(A0,D0.L),(A1)
                    3426   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002068  2002      3427          move.l    D2,D0
0000206A  E588      3428          lsl.l     #2,D0
0000206C  41F9 0B00 3429          lea       _BreakPointAddress.L,A0
00002070  012E      
00002072  42B0 0800 3430          clr.l     0(A0,D0.L)
                    3431   ; BreakPointInstruction[i] = 0 ;
00002076  2002      3432          move.l    D2,D0
00002078  E388      3433          lsl.l     #1,D0
0000207A  41F9 0B00 3434          lea       _BreakPointInstruction.L,A0
0000207E  014E      
00002080  4270 0800 3435          clr.w     0(A0,D0.L)
                    3436   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002084  2002      3437          move.l    D2,D0
00002086  E588      3438          lsl.l     #2,D0
00002088  41F9 0B00 3439          lea       _BreakPointSetOrCleared.L,A0
0000208C  015E      
0000208E  42B0 0800 3440          clr.l     0(A0,D0.L)
00002092  5282      3441          addq.l    #1,D2
00002094  60A6      3442          bra       KillAllBreakPoints_1
                    3443   KillAllBreakPoints_3:
00002096  241F      3444          move.l    (A7)+,D2
00002098  4E5E      3445          unlk      A6
0000209A  4E75      3446          rts
                    3447   ; }
                    3448   ; //BreakPointDisplay() ;       // display the break points
                    3449   ; }
                    3450   ; void KillAllWatchPoints(void)
                    3451   ; {
                    3452   _KillAllWatchPoints:
0000209C  2F02      3453          move.l    D2,-(A7)
                    3454   ; int i ;
                    3455   ; for(i = 0; i < 8; i++)  {
0000209E  4282      3456          clr.l     D2
                    3457   KillAllWatchPoints_1:
000020A0  0C82 0000 3458          cmp.l     #8,D2
000020A4  0008      
000020A6  6C20      3459          bge.s     KillAllWatchPoints_3
                    3460   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
000020A8  2002      3461          move.l    D2,D0
000020AA  E588      3462          lsl.l     #2,D0
000020AC  41F9 0B00 3463          lea       _WatchPointAddress.L,A0
000020B0  0182      
000020B2  42B0 0800 3464          clr.l     0(A0,D0.L)
                    3465   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000020B6  2002      3466          move.l    D2,D0
000020B8  E588      3467          lsl.l     #2,D0
000020BA  41F9 0B00 3468          lea       _WatchPointSetOrCleared.L,A0
000020BE  01A2      
000020C0  42B0 0800 3469          clr.l     0(A0,D0.L)
000020C4  5282      3470          addq.l    #1,D2
000020C6  60D8      3471          bra       KillAllWatchPoints_1
                    3472   KillAllWatchPoints_3:
000020C8  241F      3473          move.l    (A7)+,D2
000020CA  4E75      3474          rts
                    3475   ; }
                    3476   ; //WatchPointDisplay() ;       // display the break points
                    3477   ; }
                    3478   ; void SetBreakPoint(void)
                    3479   ; {
                    3480   _SetBreakPoint:
000020CC  4E56 FFFC 3481          link      A6,#-4
000020D0  48E7 3830 3482          movem.l   D2/D3/D4/A2/A3,-(A7)
000020D4  45F9 0000 3483          lea       _printf.L,A2
000020D8  31DE      
000020DA  47F9 0B00 3484          lea       _BreakPointSetOrCleared.L,A3
000020DE  015E      
                    3485   ; int i ;
                    3486   ; int BPNumber;
                    3487   ; int BPAddress;
                    3488   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3489   ; // see if any free break points
                    3490   ; for(i = 0; i < 8; i ++) {
000020E0  4282      3491          clr.l     D2
                    3492   SetBreakPoint_1:
000020E2  0C82 0000 3493          cmp.l     #8,D2
000020E6  0008      
000020E8  6C10      3494          bge.s     SetBreakPoint_3
                    3495   ; if( BreakPointSetOrCleared[i] == 0)
000020EA  2002      3496          move.l    D2,D0
000020EC  E588      3497          lsl.l     #2,D0
000020EE  2033 0800 3498          move.l    0(A3,D0.L),D0
000020F2  6602      3499          bne.s     SetBreakPoint_4
                    3500   ; break ;         // if spare BP found allow user to set it
000020F4  6004      3501          bra.s     SetBreakPoint_3
                    3502   SetBreakPoint_4:
000020F6  5282      3503          addq.l    #1,D2
000020F8  60E8      3504          bra       SetBreakPoint_1
                    3505   SetBreakPoint_3:
                    3506   ; }
                    3507   ; if(i == 8) {
000020FA  0C82 0000 3508          cmp.l     #8,D2
000020FE  0008      
00002100  660E      3509          bne.s     SetBreakPoint_6
                    3510   ; printf("\r\nNo FREE Break Points.....") ;
00002102  4879 0000 3511          pea       @m68kde~1_84.L
00002106  439E      
00002108  4E92      3512          jsr       (A2)
0000210A  584F      3513          addq.w    #4,A7
                    3514   ; return ;
0000210C  6000 00D6 3515          bra       SetBreakPoint_15
                    3516   SetBreakPoint_6:
                    3517   ; }
                    3518   ; printf("\r\nBreak Point Address: ") ;
00002110  4879 0000 3519          pea       @m68kde~1_85.L
00002114  43BA      
00002116  4E92      3520          jsr       (A2)
00002118  584F      3521          addq.w    #4,A7
                    3522   ; BPAddress = Get8HexDigits(0) ;
0000211A  42A7      3523          clr.l     -(A7)
0000211C  4EB8 0CA4 3524          jsr       _Get8HexDigits
00002120  584F      3525          addq.w    #4,A7
00002122  2600      3526          move.l    D0,D3
                    3527   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002124  2803      3528          move.l    D3,D4
                    3529   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002126  2003      3530          move.l    D3,D0
00002128  C0BC 0000 3531          and.l     #1,D0
0000212C  0001      
0000212E  0C80 0000 3532          cmp.l     #1,D0
00002132  0001      
00002134  660E      3533          bne.s     SetBreakPoint_9
                    3534   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002136  4879 0000 3535          pea       @m68kde~1_86.L
0000213A  43D2      
0000213C  4E92      3536          jsr       (A2)
0000213E  584F      3537          addq.w    #4,A7
                    3538   ; return ;
00002140  6000 00A2 3539          bra       SetBreakPoint_15
                    3540   SetBreakPoint_9:
                    3541   ; }
                    3542   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002144  0C83 0000 3543          cmp.l     #32768,D3
00002148  8000      
0000214A  640E      3544          bhs.s     SetBreakPoint_11
                    3545   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000214C  4879 0000 3546          pea       @m68kde~1_87.L
00002150  4408      
00002152  4E92      3547          jsr       (A2)
00002154  584F      3548          addq.w    #4,A7
                    3549   ; return ;
00002156  6000 008C 3550          bra       SetBreakPoint_15
                    3551   SetBreakPoint_11:
                    3552   ; }
                    3553   ; // search for first free bp or existing same BP
                    3554   ; for(i = 0; i < 8; i++)  {
0000215A  4282      3555          clr.l     D2
                    3556   SetBreakPoint_13:
0000215C  0C82 0000 3557          cmp.l     #8,D2
00002160  0008      
00002162  6C00 0080 3558          bge       SetBreakPoint_15
                    3559   ; if(BreakPointAddress[i] == BPAddress)   {
00002166  2002      3560          move.l    D2,D0
00002168  E588      3561          lsl.l     #2,D0
0000216A  41F9 0B00 3562          lea       _BreakPointAddress.L,A0
0000216E  012E      
00002170  B6B0 0800 3563          cmp.l     0(A0,D0.L),D3
00002174  6610      3564          bne.s     SetBreakPoint_16
                    3565   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002176  2F03      3566          move.l    D3,-(A7)
00002178  4879 0000 3567          pea       @m68kde~1_88.L
0000217C  4450      
0000217E  4E92      3568          jsr       (A2)
00002180  504F      3569          addq.w    #8,A7
                    3570   ; return ;
00002182  6000 0060 3571          bra       SetBreakPoint_15
                    3572   SetBreakPoint_16:
                    3573   ; }
                    3574   ; if(BreakPointSetOrCleared[i] == 0) {
00002186  2002      3575          move.l    D2,D0
00002188  E588      3576          lsl.l     #2,D0
0000218A  2033 0800 3577          move.l    0(A3,D0.L),D0
0000218E  6600 004E 3578          bne       SetBreakPoint_18
                    3579   ; // set BP here
                    3580   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002192  2002      3581          move.l    D2,D0
00002194  E588      3582          lsl.l     #2,D0
00002196  27BC 0000 3583          move.l    #1,0(A3,D0.L)
0000219A  0001 0800 
                    3584   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000219E  2044      3585          move.l    D4,A0
000021A0  2002      3586          move.l    D2,D0
000021A2  E388      3587          lsl.l     #1,D0
000021A4  43F9 0B00 3588          lea       _BreakPointInstruction.L,A1
000021A8  014E      
000021AA  3390 0800 3589          move.w    (A0),0(A1,D0.L)
                    3590   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
000021AE  2F04      3591          move.l    D4,-(A7)
000021B0  4879 0000 3592          pea       @m68kde~1_89.L
000021B4  4488      
000021B6  4E92      3593          jsr       (A2)
000021B8  504F      3594          addq.w    #8,A7
                    3595   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000021BA  2044      3596          move.l    D4,A0
000021BC  30BC 4E4E 3597          move.w    #20046,(A0)
                    3598   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000021C0  2002      3599          move.l    D2,D0
000021C2  E588      3600          lsl.l     #2,D0
000021C4  41F9 0B00 3601          lea       _BreakPointAddress.L,A0
000021C8  012E      
000021CA  2183 0800 3602          move.l    D3,0(A0,D0.L)
                    3603   ; printf("\r\n") ;
000021CE  4879 0000 3604          pea       @m68kde~1_1.L
000021D2  3AF0      
000021D4  4E92      3605          jsr       (A2)
000021D6  584F      3606          addq.w    #4,A7
                    3607   ; BreakPointDisplay() ;       // display the break points
000021D8  4EB8 1C9C 3608          jsr       _BreakPointDisplay
                    3609   ; return ;
000021DC  6006      3610          bra.s     SetBreakPoint_15
                    3611   SetBreakPoint_18:
000021DE  5282      3612          addq.l    #1,D2
000021E0  6000 FF7A 3613          bra       SetBreakPoint_13
                    3614   SetBreakPoint_15:
000021E4  4CDF 0C1C 3615          movem.l   (A7)+,D2/D3/D4/A2/A3
000021E8  4E5E      3616          unlk      A6
000021EA  4E75      3617          rts
                    3618   ; }
                    3619   ; }
                    3620   ; }
                    3621   ; void SetWatchPoint(void)
                    3622   ; {
                    3623   _SetWatchPoint:
000021EC  4E56 FFF8 3624          link      A6,#-8
000021F0  48E7 3030 3625          movem.l   D2/D3/A2/A3,-(A7)
000021F4  45F9 0000 3626          lea       _printf.L,A2
000021F8  31DE      
000021FA  47F9 0B00 3627          lea       _WatchPointSetOrCleared.L,A3
000021FE  01A2      
                    3628   ; int i ;
                    3629   ; int WPNumber;
                    3630   ; int WPAddress;
                    3631   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3632   ; // see if any free break points
                    3633   ; for(i = 0; i < 8; i ++) {
00002200  4282      3634          clr.l     D2
                    3635   SetWatchPoint_1:
00002202  0C82 0000 3636          cmp.l     #8,D2
00002206  0008      
00002208  6C10      3637          bge.s     SetWatchPoint_3
                    3638   ; if( WatchPointSetOrCleared[i] == 0)
0000220A  2002      3639          move.l    D2,D0
0000220C  E588      3640          lsl.l     #2,D0
0000220E  2033 0800 3641          move.l    0(A3,D0.L),D0
00002212  6602      3642          bne.s     SetWatchPoint_4
                    3643   ; break ;         // if spare WP found allow user to set it
00002214  6004      3644          bra.s     SetWatchPoint_3
                    3645   SetWatchPoint_4:
00002216  5282      3646          addq.l    #1,D2
00002218  60E8      3647          bra       SetWatchPoint_1
                    3648   SetWatchPoint_3:
                    3649   ; }
                    3650   ; if(i == 8) {
0000221A  0C82 0000 3651          cmp.l     #8,D2
0000221E  0008      
00002220  660E      3652          bne.s     SetWatchPoint_6
                    3653   ; printf("\r\nNo FREE Watch Points.....") ;
00002222  4879 0000 3654          pea       @m68kde~1_90.L
00002226  44AE      
00002228  4E92      3655          jsr       (A2)
0000222A  584F      3656          addq.w    #4,A7
                    3657   ; return ;
0000222C  6000 008C 3658          bra       SetWatchPoint_11
                    3659   SetWatchPoint_6:
                    3660   ; }
                    3661   ; printf("\r\nWatch Point Address: ") ;
00002230  4879 0000 3662          pea       @m68kde~1_91.L
00002234  44CA      
00002236  4E92      3663          jsr       (A2)
00002238  584F      3664          addq.w    #4,A7
                    3665   ; WPAddress = Get8HexDigits(0) ;
0000223A  42A7      3666          clr.l     -(A7)
0000223C  4EB8 0CA4 3667          jsr       _Get8HexDigits
00002240  584F      3668          addq.w    #4,A7
00002242  2600      3669          move.l    D0,D3
                    3670   ; // search for first free wp or existing same wp
                    3671   ; for(i = 0; i < 8; i++)  {
00002244  4282      3672          clr.l     D2
                    3673   SetWatchPoint_9:
00002246  0C82 0000 3674          cmp.l     #8,D2
0000224A  0008      
0000224C  6C00 006C 3675          bge       SetWatchPoint_11
                    3676   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002250  2002      3677          move.l    D2,D0
00002252  E588      3678          lsl.l     #2,D0
00002254  41F9 0B00 3679          lea       _WatchPointAddress.L,A0
00002258  0182      
0000225A  B6B0 0800 3680          cmp.l     0(A0,D0.L),D3
0000225E  6614      3681          bne.s     SetWatchPoint_12
00002260  4A83      3682          tst.l     D3
00002262  6710      3683          beq.s     SetWatchPoint_12
                    3684   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002264  2F03      3685          move.l    D3,-(A7)
00002266  4879 0000 3686          pea       @m68kde~1_92.L
0000226A  44E2      
0000226C  4E92      3687          jsr       (A2)
0000226E  504F      3688          addq.w    #8,A7
                    3689   ; return ;
00002270  6000 0048 3690          bra       SetWatchPoint_11
                    3691   SetWatchPoint_12:
                    3692   ; }
                    3693   ; if(WatchPointSetOrCleared[i] == 0) {
00002274  2002      3694          move.l    D2,D0
00002276  E588      3695          lsl.l     #2,D0
00002278  2033 0800 3696          move.l    0(A3,D0.L),D0
0000227C  6600 0038 3697          bne       SetWatchPoint_14
                    3698   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002280  2002      3699          move.l    D2,D0
00002282  E588      3700          lsl.l     #2,D0
00002284  27BC 0000 3701          move.l    #1,0(A3,D0.L)
00002288  0001 0800 
                    3702   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000228C  2F03      3703          move.l    D3,-(A7)
0000228E  4879 0000 3704          pea       @m68kde~1_93.L
00002292  4518      
00002294  4E92      3705          jsr       (A2)
00002296  504F      3706          addq.w    #8,A7
                    3707   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002298  2002      3708          move.l    D2,D0
0000229A  E588      3709          lsl.l     #2,D0
0000229C  41F9 0B00 3710          lea       _WatchPointAddress.L,A0
000022A0  0182      
000022A2  2183 0800 3711          move.l    D3,0(A0,D0.L)
                    3712   ; printf("\r\n") ;
000022A6  4879 0000 3713          pea       @m68kde~1_1.L
000022AA  3AF0      
000022AC  4E92      3714          jsr       (A2)
000022AE  584F      3715          addq.w    #4,A7
                    3716   ; WatchPointDisplay() ;       // display the break points
000022B0  4EB8 1D70 3717          jsr       _WatchPointDisplay
                    3718   ; return ;
000022B4  6004      3719          bra.s     SetWatchPoint_11
                    3720   SetWatchPoint_14:
000022B6  5282      3721          addq.l    #1,D2
000022B8  608C      3722          bra       SetWatchPoint_9
                    3723   SetWatchPoint_11:
000022BA  4CDF 0C0C 3724          movem.l   (A7)+,D2/D3/A2/A3
000022BE  4E5E      3725          unlk      A6
000022C0  4E75      3726          rts
                    3727   ; }
                    3728   ; }
                    3729   ; }
                    3730   ; void HandleBreakPoint(void)
                    3731   ; {
                    3732   _HandleBreakPoint:
000022C2  4E56 FFFC 3733          link      A6,#-4
000022C6  48E7 0038 3734          movem.l   A2/A3/A4,-(A7)
000022CA  45F9 0B00 3735          lea       _i.L,A2
000022CE  00C4      
000022D0  47F9 0000 3736          lea       _printf.L,A3
000022D4  31DE      
000022D6  49F9 0B00 3737          lea       _PC.L,A4
000022DA  0120      
                    3738   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3739   ; // now we have to put the break point back to run the instruction
                    3740   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3741   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000022DC  5594      3742          subq.l    #2,(A4)
                    3743   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000022DE  4879 0000 3744          pea       @m68kde~1_94.L
000022E2  453E      
000022E4  4E93      3745          jsr       (A3)
000022E6  584F      3746          addq.w    #4,A7
                    3747   ; printf("\r\nSingle Step : [ON]") ;
000022E8  4879 0000 3748          pea       @m68kde~1_95.L
000022EC  4552      
000022EE  4E93      3749          jsr       (A3)
000022F0  584F      3750          addq.w    #4,A7
                    3751   ; printf("\r\nBreakPoints : [Enabled]") ;
000022F2  4879 0000 3752          pea       @m68kde~1_96.L
000022F6  4568      
000022F8  4E93      3753          jsr       (A3)
000022FA  584F      3754          addq.w    #4,A7
                    3755   ; // now clear the break point (put original instruction back)
                    3756   ; ProgramBreakPointAddress = PC ;
000022FC  2D54 FFFC 3757          move.l    (A4),-4(A6)
                    3758   ; for(i = 0; i < 8; i ++) {
00002300  4292      3759          clr.l     (A2)
                    3760   HandleBreakPoint_1:
00002302  2012      3761          move.l    (A2),D0
00002304  0C80 0000 3762          cmp.l     #8,D0
00002308  0008      
0000230A  6400 0056 3763          bhs       HandleBreakPoint_3
                    3764   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
0000230E  2012      3765          move.l    (A2),D0
00002310  E588      3766          lsl.l     #2,D0
00002312  41F9 0B00 3767          lea       _BreakPointAddress.L,A0
00002316  012E      
00002318  2230 0800 3768          move.l    0(A0,D0.L),D1
0000231C  B294      3769          cmp.l     (A4),D1
0000231E  6600 003E 3770          bne       HandleBreakPoint_4
                    3771   ; BreakPointAddress[i] = 0 ;
00002322  2012      3772          move.l    (A2),D0
00002324  E588      3773          lsl.l     #2,D0
00002326  41F9 0B00 3774          lea       _BreakPointAddress.L,A0
0000232A  012E      
0000232C  42B0 0800 3775          clr.l     0(A0,D0.L)
                    3776   ; BreakPointSetOrCleared[i] = 0 ;
00002330  2012      3777          move.l    (A2),D0
00002332  E588      3778          lsl.l     #2,D0
00002334  41F9 0B00 3779          lea       _BreakPointSetOrCleared.L,A0
00002338  015E      
0000233A  42B0 0800 3780          clr.l     0(A0,D0.L)
                    3781   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000233E  2012      3782          move.l    (A2),D0
00002340  E388      3783          lsl.l     #1,D0
00002342  41F9 0B00 3784          lea       _BreakPointInstruction.L,A0
00002346  014E      
00002348  226E FFFC 3785          move.l    -4(A6),A1
0000234C  32B0 0800 3786          move.w    0(A0,D0.L),(A1)
                    3787   ; BreakPointInstruction[i] = 0 ;
00002350  2012      3788          move.l    (A2),D0
00002352  E388      3789          lsl.l     #1,D0
00002354  41F9 0B00 3790          lea       _BreakPointInstruction.L,A0
00002358  014E      
0000235A  4270 0800 3791          clr.w     0(A0,D0.L)
                    3792   HandleBreakPoint_4:
0000235E  5292      3793          addq.l    #1,(A2)
00002360  60A0      3794          bra       HandleBreakPoint_1
                    3795   HandleBreakPoint_3:
                    3796   ; }
                    3797   ; }
                    3798   ; DumpRegisters() ;
00002362  4EB8 14EE 3799          jsr       _DumpRegisters
                    3800   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002366  4879 0000 3801          pea       @m68kde~1_58.L
0000236A  40E4      
0000236C  4E93      3802          jsr       (A3)
0000236E  584F      3803          addq.w    #4,A7
                    3804   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002370  4879 0000 3805          pea       @m68kde~1_97.L
00002374  4582      
00002376  4E93      3806          jsr       (A3)
00002378  584F      3807          addq.w    #4,A7
                    3808   ; menu() ;
0000237A  4EB9 0000 3809          jsr       _menu
0000237E  2586      
00002380  4CDF 1C00 3810          movem.l   (A7)+,A2/A3/A4
00002384  4E5E      3811          unlk      A6
00002386  4E75      3812          rts
                    3813   ; }
                    3814   ; void UnknownCommand()
                    3815   ; {
                    3816   _UnknownCommand:
                    3817   ; printf("\r\nUnknown Command.....\r\n") ;
00002388  4879 0000 3818          pea       @m68kde~1_98.L
0000238C  45AA      
0000238E  4EB9 0000 3819          jsr       _printf
00002392  31DE      
00002394  584F      3820          addq.w    #4,A7
                    3821   ; Help() ;
00002396  4EB9 0000 3822          jsr       _Help
0000239A  24AC      
0000239C  4E75      3823          rts
                    3824   ; }
                    3825   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3826   ; void CallDebugMonitor(void)
                    3827   ; {
                    3828   _CallDebugMonitor:
                    3829   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000239E  4879 0000 3830          pea       @m68kde~1_99.L
000023A2  45C4      
000023A4  4EB9 0000 3831          jsr       _printf
000023A8  31DE      
000023AA  584F      3832          addq.w    #4,A7
                    3833   ; menu();
000023AC  4EB9 0000 3834          jsr       _menu
000023B0  2586      
000023B2  4E75      3835          rts
                    3836   ; }
                    3837   ; void Breakpoint(void)
                    3838   ; {
                    3839   _Breakpoint:
000023B4  2F02      3840          move.l    D2,-(A7)
                    3841   ; char c;
                    3842   ; c = toupper(_getch());
000023B6  2F00      3843          move.l    D0,-(A7)
000023B8  4EB8 0B68 3844          jsr       __getch
000023BC  2200      3845          move.l    D0,D1
000023BE  201F      3846          move.l    (A7)+,D0
000023C0  2F01      3847          move.l    D1,-(A7)
000023C2  4EB9 0000 3848          jsr       _toupper
000023C6  31C2      
000023C8  584F      3849          addq.w    #4,A7
000023CA  1400      3850          move.b    D0,D2
                    3851   ; if( c == (char)('D'))                                      // BreakPoint Display
000023CC  0C02 0044 3852          cmp.b     #68,D2
000023D0  6608      3853          bne.s     Breakpoint_1
                    3854   ; BreakPointDisplay() ;
000023D2  4EB8 1C9C 3855          jsr       _BreakPointDisplay
000023D6  6000 0054 3856          bra       Breakpoint_10
                    3857   Breakpoint_1:
                    3858   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000023DA  0C02 004B 3859          cmp.b     #75,D2
000023DE  6630      3860          bne.s     Breakpoint_3
                    3861   ; printf("\r\nKill All Break Points...(y/n)?") ;
000023E0  4879 0000 3862          pea       @m68kde~1_100.L
000023E4  45E4      
000023E6  4EB9 0000 3863          jsr       _printf
000023EA  31DE      
000023EC  584F      3864          addq.w    #4,A7
                    3865   ; c = toupper(_getch());
000023EE  2F00      3866          move.l    D0,-(A7)
000023F0  4EB8 0B68 3867          jsr       __getch
000023F4  2200      3868          move.l    D0,D1
000023F6  201F      3869          move.l    (A7)+,D0
000023F8  2F01      3870          move.l    D1,-(A7)
000023FA  4EB9 0000 3871          jsr       _toupper
000023FE  31C2      
00002400  584F      3872          addq.w    #4,A7
00002402  1400      3873          move.b    D0,D2
                    3874   ; if(c == (char)('Y'))
00002404  0C02 0059 3875          cmp.b     #89,D2
00002408  6604      3876          bne.s     Breakpoint_5
                    3877   ; KillAllBreakPoints() ;
0000240A  4EB8 2034 3878          jsr       _KillAllBreakPoints
                    3879   Breakpoint_5:
0000240E  601C      3880          bra.s     Breakpoint_10
                    3881   Breakpoint_3:
                    3882   ; }
                    3883   ; else if(c == (char)('S')) {
00002410  0C02 0053 3884          cmp.b     #83,D2
00002414  6606      3885          bne.s     Breakpoint_7
                    3886   ; SetBreakPoint() ;
00002416  4EB8 20CC 3887          jsr       _SetBreakPoint
0000241A  6010      3888          bra.s     Breakpoint_10
                    3889   Breakpoint_7:
                    3890   ; }
                    3891   ; else if(c == (char)('C')) {
0000241C  0C02 0043 3892          cmp.b     #67,D2
00002420  6606      3893          bne.s     Breakpoint_9
                    3894   ; BreakPointClear() ;
00002422  4EB8 1E1C 3895          jsr       _BreakPointClear
00002426  6004      3896          bra.s     Breakpoint_10
                    3897   Breakpoint_9:
                    3898   ; }
                    3899   ; else
                    3900   ; UnknownCommand() ;
00002428  4EB8 2388 3901          jsr       _UnknownCommand
                    3902   Breakpoint_10:
0000242C  241F      3903          move.l    (A7)+,D2
0000242E  4E75      3904          rts
                    3905   ; }
                    3906   ; void Watchpoint(void)
                    3907   ; {
                    3908   _Watchpoint:
00002430  2F02      3909          move.l    D2,-(A7)
                    3910   ; char c;
                    3911   ; c = toupper(_getch());
00002432  2F00      3912          move.l    D0,-(A7)
00002434  4EB8 0B68 3913          jsr       __getch
00002438  2200      3914          move.l    D0,D1
0000243A  201F      3915          move.l    (A7)+,D0
0000243C  2F01      3916          move.l    D1,-(A7)
0000243E  4EB9 0000 3917          jsr       _toupper
00002442  31C2      
00002444  584F      3918          addq.w    #4,A7
00002446  1400      3919          move.b    D0,D2
                    3920   ; if( c == (char)('D'))                                      // WatchPoint Display
00002448  0C02 0044 3921          cmp.b     #68,D2
0000244C  6608      3922          bne.s     Watchpoint_1
                    3923   ; WatchPointDisplay() ;
0000244E  4EB8 1D70 3924          jsr       _WatchPointDisplay
00002452  6000 0054 3925          bra       Watchpoint_10
                    3926   Watchpoint_1:
                    3927   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002456  0C02 004B 3928          cmp.b     #75,D2
0000245A  6630      3929          bne.s     Watchpoint_3
                    3930   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000245C  4879 0000 3931          pea       @m68kde~1_101.L
00002460  4606      
00002462  4EB9 0000 3932          jsr       _printf
00002466  31DE      
00002468  584F      3933          addq.w    #4,A7
                    3934   ; c = toupper(_getch());
0000246A  2F00      3935          move.l    D0,-(A7)
0000246C  4EB8 0B68 3936          jsr       __getch
00002470  2200      3937          move.l    D0,D1
00002472  201F      3938          move.l    (A7)+,D0
00002474  2F01      3939          move.l    D1,-(A7)
00002476  4EB9 0000 3940          jsr       _toupper
0000247A  31C2      
0000247C  584F      3941          addq.w    #4,A7
0000247E  1400      3942          move.b    D0,D2
                    3943   ; if(c == (char)('Y'))
00002480  0C02 0059 3944          cmp.b     #89,D2
00002484  6604      3945          bne.s     Watchpoint_5
                    3946   ; KillAllWatchPoints() ;
00002486  4EB8 209C 3947          jsr       _KillAllWatchPoints
                    3948   Watchpoint_5:
0000248A  601C      3949          bra.s     Watchpoint_10
                    3950   Watchpoint_3:
                    3951   ; }
                    3952   ; else if(c == (char)('S')) {
0000248C  0C02 0053 3953          cmp.b     #83,D2
00002490  6606      3954          bne.s     Watchpoint_7
                    3955   ; SetWatchPoint() ;
00002492  4EB8 21EC 3956          jsr       _SetWatchPoint
00002496  6010      3957          bra.s     Watchpoint_10
                    3958   Watchpoint_7:
                    3959   ; }
                    3960   ; else if(c == (char)('C')) {
00002498  0C02 0043 3961          cmp.b     #67,D2
0000249C  6606      3962          bne.s     Watchpoint_9
                    3963   ; WatchPointClear() ;
0000249E  4EB8 1EF6 3964          jsr       _WatchPointClear
000024A2  6004      3965          bra.s     Watchpoint_10
                    3966   Watchpoint_9:
                    3967   ; }
                    3968   ; else
                    3969   ; UnknownCommand() ;
000024A4  4EB8 2388 3970          jsr       _UnknownCommand
                    3971   Watchpoint_10:
000024A8  241F      3972          move.l    (A7)+,D2
000024AA  4E75      3973          rts
                    3974   ; }
                    3975   ; void Help(void)
                    3976   ; {
                    3977   _Help:
000024AC  48E7 2020 3978          movem.l   D2/A2,-(A7)
000024B0  45F9 0000 3979          lea       _printf.L,A2
000024B4  31DE      
                    3980   ; char *banner = "\r\n----------------------------------------------------------------" ;
000024B6  41F9 0000 3981          lea       @m68kde~1_102.L,A0
000024BA  4628      
000024BC  2408      3982          move.l    A0,D2
                    3983   ; printf(banner) ;
000024BE  2F02      3984          move.l    D2,-(A7)
000024C0  4E92      3985          jsr       (A2)
000024C2  584F      3986          addq.w    #4,A7
                    3987   ; printf("\r\n  Debugger Command Summary") ;
000024C4  4879 0000 3988          pea       @m68kde~1_103.L
000024C8  466C      
000024CA  4E92      3989          jsr       (A2)
000024CC  584F      3990          addq.w    #4,A7
                    3991   ; printf(banner) ;
000024CE  2F02      3992          move.l    D2,-(A7)
000024D0  4E92      3993          jsr       (A2)
000024D2  584F      3994          addq.w    #4,A7
                    3995   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000024D4  4879 0000 3996          pea       @m68kde~1_104.L
000024D8  468A      
000024DA  4E92      3997          jsr       (A2)
000024DC  584F      3998          addq.w    #4,A7
                    3999   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000024DE  4879 0000 4000          pea       @m68kde~1_105.L
000024E2  46CE      
000024E4  4E92      4001          jsr       (A2)
000024E6  584F      4002          addq.w    #4,A7
                    4003   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000024E8  4879 0000 4004          pea       @m68kde~1_106.L
000024EC  4706      
000024EE  4E92      4005          jsr       (A2)
000024F0  584F      4006          addq.w    #4,A7
                    4007   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000024F2  4879 0000 4008          pea       @m68kde~1_107.L
000024F6  4740      
000024F8  4E92      4009          jsr       (A2)
000024FA  584F      4010          addq.w    #4,A7
                    4011   ; printf("\r\n  E            - Enter String into Memory") ;
000024FC  4879 0000 4012          pea       @m68kde~1_108.L
00002500  4772      
00002502  4E92      4013          jsr       (A2)
00002504  584F      4014          addq.w    #4,A7
                    4015   ; printf("\r\n  F            - Fill Memory with Data") ;
00002506  4879 0000 4016          pea       @m68kde~1_109.L
0000250A  479E      
0000250C  4E92      4017          jsr       (A2)
0000250E  584F      4018          addq.w    #4,A7
                    4019   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002510  2F39 0B00 4020          move.l    _PC.L,-(A7)
00002514  0120      
00002516  4879 0000 4021          pea       @m68kde~1_110.L
0000251A  47C8      
0000251C  4E92      4022          jsr       (A2)
0000251E  504F      4023          addq.w    #8,A7
                    4024   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002520  4879 0000 4025          pea       @m68kde~1_111.L
00002524  4802      
00002526  4E92      4026          jsr       (A2)
00002528  584F      4027          addq.w    #4,A7
                    4028   ; printf("\r\n  M            - Memory Examine and Change");
0000252A  4879 0000 4029          pea       @m68kde~1_112.L
0000252E  483A      
00002530  4E92      4030          jsr       (A2)
00002532  584F      4031          addq.w    #4,A7
                    4032   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002534  4879 0000 4033          pea       @m68kde~1_113.L
00002538  4868      
0000253A  4E92      4034          jsr       (A2)
0000253C  584F      4035          addq.w    #4,A7
                    4036   ; printf("\r\n  R            - Display 68000 Registers") ;
0000253E  4879 0000 4037          pea       @m68kde~1_114.L
00002542  48A2      
00002544  4E92      4038          jsr       (A2)
00002546  584F      4039          addq.w    #4,A7
                    4040   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002548  4879 0000 4041          pea       @m68kde~1_115.L
0000254C  48CE      
0000254E  4E92      4042          jsr       (A2)
00002550  584F      4043          addq.w    #4,A7
                    4044   ; printf("\r\n  TM           - Test Memory") ;
00002552  4879 0000 4045          pea       @m68kde~1_116.L
00002556  4900      
00002558  4E92      4046          jsr       (A2)
0000255A  584F      4047          addq.w    #4,A7
                    4048   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000255C  4879 0000 4049          pea       @m68kde~1_117.L
00002560  4920      
00002562  4E92      4050          jsr       (A2)
00002564  584F      4051          addq.w    #4,A7
                    4052   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002566  4879 0000 4053          pea       @m68kde~1_118.L
0000256A  4948      
0000256C  4E92      4054          jsr       (A2)
0000256E  584F      4055          addq.w    #4,A7
                    4056   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002570  4879 0000 4057          pea       @m68kde~1_119.L
00002574  497E      
00002576  4E92      4058          jsr       (A2)
00002578  584F      4059          addq.w    #4,A7
                    4060   ; printf(banner) ;
0000257A  2F02      4061          move.l    D2,-(A7)
0000257C  4E92      4062          jsr       (A2)
0000257E  584F      4063          addq.w    #4,A7
00002580  4CDF 0404 4064          movem.l   (A7)+,D2/A2
00002584  4E75      4065          rts
                    4066   ; }
                    4067   ; void menu(void)
                    4068   ; {
                    4069   _menu:
00002586  48E7 303C 4070          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000258A  45F9 0000 4071          lea       _printf.L,A2
0000258E  31DE      
00002590  47F9 0B00 4072          lea       _Trace.L,A3
00002594  00D8      
00002596  49F9 0B00 4073          lea       _x.L,A4
0000259A  00C8      
0000259C  4BF9 0B00 4074          lea       _SR.L,A5
000025A0  012C      
                    4075   ; char c,c1 ;
                    4076   ; while(1)    {
                    4077   menu_1:
                    4078   ; FlushKeyboard() ;               // dump unread characters from keyboard
000025A2  4EB8 0BA6 4079          jsr       _FlushKeyboard
                    4080   ; printf("\r\n#") ;
000025A6  4879 0000 4081          pea       @m68kde~1_120.L
000025AA  49B6      
000025AC  4E92      4082          jsr       (A2)
000025AE  584F      4083          addq.w    #4,A7
                    4084   ; c = toupper(_getch());
000025B0  2F00      4085          move.l    D0,-(A7)
000025B2  4EB8 0B68 4086          jsr       __getch
000025B6  2200      4087          move.l    D0,D1
000025B8  201F      4088          move.l    (A7)+,D0
000025BA  2F01      4089          move.l    D1,-(A7)
000025BC  4EB9 0000 4090          jsr       _toupper
000025C0  31C2      
000025C2  584F      4091          addq.w    #4,A7
000025C4  1400      4092          move.b    D0,D2
                    4093   ; if( c == (char)('L'))                  // load s record file
000025C6  0C02 004C 4094          cmp.b     #76,D2
000025CA  6608      4095          bne.s     menu_4
                    4096   ; Load_SRecordFile() ;
000025CC  4EB8 0E36 4097          jsr       _Load_SRecordFile
000025D0  6000 021E 4098          bra       menu_46
                    4099   menu_4:
                    4100   ; else if( c == (char)('D'))             // dump memory
000025D4  0C02 0044 4101          cmp.b     #68,D2
000025D8  6608      4102          bne.s     menu_6
                    4103   ; DumpMemory() ;
000025DA  4EB8 0CCC 4104          jsr       _DumpMemory
000025DE  6000 0210 4105          bra       menu_46
                    4106   menu_6:
                    4107   ; else if( c == (char)('E'))             // Enter String into memory
000025E2  0C02 0045 4108          cmp.b     #69,D2
000025E6  660A      4109          bne.s     menu_8
                    4110   ; EnterString() ;
000025E8  4EB9 0000 4111          jsr       _EnterString
000025EC  2938      
000025EE  6000 0200 4112          bra       menu_46
                    4113   menu_8:
                    4114   ; else if( c == (char)('F'))             // fill memory
000025F2  0C02 0046 4115          cmp.b     #70,D2
000025F6  6608      4116          bne.s     menu_10
                    4117   ; FillMemory() ;
000025F8  4EB8 0DBC 4118          jsr       _FillMemory
000025FC  6000 01F2 4119          bra       menu_46
                    4120   menu_10:
                    4121   ; else if( c == (char)('G'))  {           // go user program
00002600  0C02 0047 4122          cmp.b     #71,D2
00002604  6626      4123          bne.s     menu_12
                    4124   ; printf("\r\nProgram Running.....") ;
00002606  4879 0000 4125          pea       @m68kde~1_121.L
0000260A  49BA      
0000260C  4E92      4126          jsr       (A2)
0000260E  584F      4127          addq.w    #4,A7
                    4128   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002610  4879 0000 4129          pea       @m68kde~1_122.L
00002614  49D2      
00002616  4E92      4130          jsr       (A2)
00002618  584F      4131          addq.w    #4,A7
                    4132   ; GoFlag = 1 ;
0000261A  23FC 0000 4133          move.l    #1,_GoFlag.L
0000261E  0001 0B00 
00002622  00DC      
                    4134   ; go() ;
00002624  4EB8 08B8 4135          jsr       _go
00002628  6000 01C6 4136          bra       menu_46
                    4137   menu_12:
                    4138   ; }
                    4139   ; else if( c == (char)('M'))           // memory examine and modify
0000262C  0C02 004D 4140          cmp.b     #77,D2
00002630  6608      4141          bne.s     menu_14
                    4142   ; MemoryChange() ;
00002632  4EB8 0FC4 4143          jsr       _MemoryChange
00002636  6000 01B8 4144          bra       menu_46
                    4145   menu_14:
                    4146   ; else if( c == (char)('P'))            // Program Flash Chip
0000263A  0C02 0050 4147          cmp.b     #80,D2
0000263E  6608      4148          bne.s     menu_16
                    4149   ; ProgramFlashChip() ;
00002640  4EB8 12C6 4150          jsr       _ProgramFlashChip
00002644  6000 01AA 4151          bra       menu_46
                    4152   menu_16:
                    4153   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002648  0C02 0043 4154          cmp.b     #67,D2
0000264C  6608      4155          bne.s     menu_18
                    4156   ; LoadFromFlashChip();
0000264E  4EB8 1440 4157          jsr       _LoadFromFlashChip
00002652  6000 019C 4158          bra       menu_46
                    4159   menu_18:
                    4160   ; else if( c == (char)('R'))             // dump registers
00002656  0C02 0052 4161          cmp.b     #82,D2
0000265A  6608      4162          bne.s     menu_20
                    4163   ; DumpRegisters() ;
0000265C  4EB8 14EE 4164          jsr       _DumpRegisters
00002660  6000 018E 4165          bra       menu_46
                    4166   menu_20:
                    4167   ; else if( c == (char)('.'))           // change registers
00002664  0C02 002E 4168          cmp.b     #46,D2
00002668  6608      4169          bne.s     menu_22
                    4170   ; ChangeRegisters() ;
0000266A  4EB8 19E0 4171          jsr       _ChangeRegisters
0000266E  6000 0180 4172          bra       menu_46
                    4173   menu_22:
                    4174   ; else if( c == (char)('B'))              // breakpoint command
00002672  0C02 0042 4175          cmp.b     #66,D2
00002676  6608      4176          bne.s     menu_24
                    4177   ; Breakpoint() ;
00002678  4EB8 23B4 4178          jsr       _Breakpoint
0000267C  6000 0172 4179          bra       menu_46
                    4180   menu_24:
                    4181   ; else if( c == (char)('T'))  {          // Test command
00002680  0C02 0054 4182          cmp.b     #84,D2
00002684  6600 0046 4183          bne       menu_26
                    4184   ; c1 = toupper(_getch()) ;
00002688  2F00      4185          move.l    D0,-(A7)
0000268A  4EB8 0B68 4186          jsr       __getch
0000268E  2200      4187          move.l    D0,D1
00002690  201F      4188          move.l    (A7)+,D0
00002692  2F01      4189          move.l    D1,-(A7)
00002694  4EB9 0000 4190          jsr       _toupper
00002698  31C2      
0000269A  584F      4191          addq.w    #4,A7
0000269C  1600      4192          move.b    D0,D3
                    4193   ; if(c1 == (char)('M'))                    // memory test
0000269E  0C03 004D 4194          cmp.b     #77,D3
000026A2  6608      4195          bne.s     menu_28
                    4196   ; MemoryTest() ;
000026A4  4EB9 0000 4197          jsr       _MemoryTest
000026A8  2988      
000026AA  601C      4198          bra.s     menu_33
                    4199   menu_28:
                    4200   ; else if( c1 == (char)('S'))              // Switch Test command
000026AC  0C03 0053 4201          cmp.b     #83,D3
000026B0  6606      4202          bne.s     menu_30
                    4203   ; SwitchTest() ;
000026B2  4EB8 0AA4 4204          jsr       _SwitchTest
000026B6  6010      4205          bra.s     menu_33
                    4206   menu_30:
                    4207   ; else if( c1 == (char)('D'))              // display Test command
000026B8  0C03 0044 4208          cmp.b     #68,D3
000026BC  6606      4209          bne.s     menu_32
                    4210   ; TestLEDS() ;
000026BE  4EB8 0A50 4211          jsr       _TestLEDS
000026C2  6004      4212          bra.s     menu_33
                    4213   menu_32:
                    4214   ; else
                    4215   ; UnknownCommand() ;
000026C4  4EB8 2388 4216          jsr       _UnknownCommand
                    4217   menu_33:
000026C8  6000 0126 4218          bra       menu_46
                    4219   menu_26:
                    4220   ; }
                    4221   ; else if( c == (char)(' ')) {             // Next instruction command
000026CC  0C02 0020 4222          cmp.b     #32,D2
000026D0  6636      4223          bne.s     menu_34
                    4224   ; DisableBreakPoints() ;
000026D2  4EB8 1F98 4225          jsr       _DisableBreakPoints
                    4226   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000026D6  2013      4227          move.l    (A3),D0
000026D8  0C80 0000 4228          cmp.l     #1,D0
000026DC  0001      
000026DE  661A      4229          bne.s     menu_36
000026E0  2039 0B00 4230          move.l    _GoFlag.L,D0
000026E4  00DC      
000026E6  0C80 0000 4231          cmp.l     #1,D0
000026EA  0001      
000026EC  660C      4232          bne.s     menu_36
                    4233   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000026EE  13FC 0001 4234          move.b    #1,4194314
000026F2  0040 000A 
                    4235   ; return ;
000026F6  6000 00FC 4236          bra       menu_38
                    4237   menu_36:
                    4238   ; }
                    4239   ; else
                    4240   ; printf("\r\nError: Press 'G' first to start program") ;
000026FA  4879 0000 4241          pea       @m68kde~1_123.L
000026FE  4A00      
00002700  4E92      4242          jsr       (A2)
00002702  584F      4243          addq.w    #4,A7
00002704  6000 00EA 4244          bra       menu_46
                    4245   menu_34:
                    4246   ; }
                    4247   ; else if( c == (char)('S')) {             // single step
00002708  0C02 0053 4248          cmp.b     #83,D2
0000270C  6600 008C 4249          bne       menu_39
                    4250   ; if(Trace == 0) {
00002710  2013      4251          move.l    (A3),D0
00002712  6600 0050 4252          bne       menu_41
                    4253   ; DisableBreakPoints() ;
00002716  4EB8 1F98 4254          jsr       _DisableBreakPoints
                    4255   ; printf("\r\nSingle Step  :[ON]") ;
0000271A  4879 0000 4256          pea       @m68kde~1_124.L
0000271E  4A2A      
00002720  4E92      4257          jsr       (A2)
00002722  584F      4258          addq.w    #4,A7
                    4259   ; printf("\r\nBreak Points :[Disabled]") ;
00002724  4879 0000 4260          pea       @m68kde~1_57.L
00002728  40C8      
0000272A  4E92      4261          jsr       (A2)
0000272C  584F      4262          addq.w    #4,A7
                    4263   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000272E  0055 8000 4264          or.w      #32768,(A5)
                    4265   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002732  2F39 0B00 4266          move.l    _PC.L,-(A7)
00002736  0120      
00002738  4879 0000 4267          pea       @m68kde~1_125.L
0000273C  4A40      
0000273E  4E92      4268          jsr       (A2)
00002740  504F      4269          addq.w    #8,A7
                    4270   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002742  4879 0000 4271          pea       @m68kde~1_126.L
00002746  4A74      
00002748  4E92      4272          jsr       (A2)
0000274A  584F      4273          addq.w    #4,A7
                    4274   ; DumpRegisters() ;
0000274C  4EB8 14EE 4275          jsr       _DumpRegisters
                    4276   ; Trace = 1;
00002750  26BC 0000 4277          move.l    #1,(A3)
00002754  0001      
                    4278   ; TraceException = 1;
00002756  13FC 0001 4279          move.b    #1,4194314
0000275A  0040 000A 
                    4280   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000275E  28B8 0074 4281          move.l    116,(A4)
00002762  6032      4282          bra.s     menu_42
                    4283   menu_41:
                    4284   ; }
                    4285   ; else {
                    4286   ; Trace = 0 ;
00002764  4293      4287          clr.l     (A3)
                    4288   ; TraceException = 0 ;
00002766  4239 0040 4289          clr.b     4194314
0000276A  000A      
                    4290   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000276C  28B8 0074 4291          move.l    116,(A4)
                    4292   ; EnableBreakPoints() ;
00002770  4EB8 1FEC 4293          jsr       _EnableBreakPoints
                    4294   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002774  0255 7FFF 4295          and.w     #32767,(A5)
                    4296   ; printf("\r\nSingle Step : [OFF]") ;
00002778  4879 0000 4297          pea       @m68kde~1_127.L
0000277C  4A98      
0000277E  4E92      4298          jsr       (A2)
00002780  584F      4299          addq.w    #4,A7
                    4300   ; printf("\r\nBreak Points :[Enabled]") ;
00002782  4879 0000 4301          pea       @m68kde~1_128.L
00002786  4AAE      
00002788  4E92      4302          jsr       (A2)
0000278A  584F      4303          addq.w    #4,A7
                    4304   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000278C  4879 0000 4305          pea       @m68kde~1_129.L
00002790  4AC8      
00002792  4E92      4306          jsr       (A2)
00002794  584F      4307          addq.w    #4,A7
                    4308   menu_42:
00002796  6000 0058 4309          bra       menu_46
                    4310   menu_39:
                    4311   ; }
                    4312   ; }
                    4313   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
0000279A  0C02 001B 4314          cmp.b     #27,D2
0000279E  6600 0040 4315          bne       menu_43
                    4316   ; Trace = 0;
000027A2  4293      4317          clr.l     (A3)
                    4318   ; TraceException = 0;
000027A4  4239 0040 4319          clr.b     4194314
000027A8  000A      
                    4320   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000027AA  28B8 0074 4321          move.l    116,(A4)
                    4322   ; EnableBreakPoints() ;
000027AE  4EB8 1FEC 4323          jsr       _EnableBreakPoints
                    4324   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000027B2  0255 7FFF 4325          and.w     #32767,(A5)
                    4326   ; printf("\r\nSingle Step  :[OFF]") ;
000027B6  4879 0000 4327          pea       @m68kde~1_130.L
000027BA  4AF2      
000027BC  4E92      4328          jsr       (A2)
000027BE  584F      4329          addq.w    #4,A7
                    4330   ; printf("\r\nBreak Points :[Enabled]");
000027C0  4879 0000 4331          pea       @m68kde~1_128.L
000027C4  4AAE      
000027C6  4E92      4332          jsr       (A2)
000027C8  584F      4333          addq.w    #4,A7
                    4334   ; printf("\r\nProgram Running.....") ;
000027CA  4879 0000 4335          pea       @m68kde~1_121.L
000027CE  49BA      
000027D0  4E92      4336          jsr       (A2)
000027D2  584F      4337          addq.w    #4,A7
                    4338   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000027D4  4879 0000 4339          pea       @m68kde~1_122.L
000027D8  49D2      
000027DA  4E92      4340          jsr       (A2)
000027DC  584F      4341          addq.w    #4,A7
                    4342   ; return ;
000027DE  6014      4343          bra.s     menu_38
                    4344   menu_43:
                    4345   ; }
                    4346   ; else if( c == (char)('W'))              // Watchpoint command
000027E0  0C02 0057 4347          cmp.b     #87,D2
000027E4  6606      4348          bne.s     menu_45
                    4349   ; Watchpoint() ;
000027E6  4EB8 2430 4350          jsr       _Watchpoint
000027EA  6004      4351          bra.s     menu_46
                    4352   menu_45:
                    4353   ; else
                    4354   ; UnknownCommand() ;
000027EC  4EB8 2388 4355          jsr       _UnknownCommand
                    4356   menu_46:
000027F0  6000 FDB0 4357          bra       menu_1
                    4358   menu_38:
000027F4  4CDF 3C0C 4359          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000027F8  4E75      4360          rts
                    4361   ; }
                    4362   ; }
                    4363   ; void PrintErrorMessageandAbort(char *string) {
                    4364   _PrintErrorMessageandAbort:
000027FA  4E56 0000 4365          link      A6,#0
                    4366   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000027FE  4879 0000 4367          pea       @m68kde~1_131.L
00002802  4B08      
00002804  4EB9 0000 4368          jsr       _printf
00002808  31DE      
0000280A  584F      4369          addq.w    #4,A7
                    4370   ; printf("%s\r\n", string) ;
0000280C  2F2E 0008 4371          move.l    8(A6),-(A7)
00002810  4879 0000 4372          pea       @m68kde~1_132.L
00002814  4B24      
00002816  4EB9 0000 4373          jsr       _printf
0000281A  31DE      
0000281C  504F      4374          addq.w    #8,A7
                    4375   ; menu() ;
0000281E  4EB8 2586 4376          jsr       _menu
00002822  4E5E      4377          unlk      A6
00002824  4E75      4378          rts
                    4379   ; }
                    4380   ; void IRQMessage(int level) {
                    4381   _IRQMessage:
00002826  4E56 0000 4382          link      A6,#0
                    4383   ; printf("\r\n\r\nProgram ABORT !!!!!");
0000282A  4879 0000 4384          pea       @m68kde~1_133.L
0000282E  4B2A      
00002830  4EB9 0000 4385          jsr       _printf
00002834  31DE      
00002836  584F      4386          addq.w    #4,A7
                    4387   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002838  2F2E 0008 4388          move.l    8(A6),-(A7)
0000283C  4879 0000 4389          pea       @m68kde~1_134.L
00002840  4B42      
00002842  4EB9 0000 4390          jsr       _printf
00002846  31DE      
00002848  504F      4391          addq.w    #8,A7
                    4392   ; menu() ;
0000284A  4EB8 2586 4393          jsr       _menu
0000284E  4E5E      4394          unlk      A6
00002850  4E75      4395          rts
                    4396   ; }
                    4397   ; void UnhandledIRQ1(void) {
                    4398   _UnhandledIRQ1:
                    4399   ; IRQMessage(1);
00002852  4878 0001 4400          pea       1
00002856  4EB8 2826 4401          jsr       _IRQMessage
0000285A  584F      4402          addq.w    #4,A7
0000285C  4E75      4403          rts
                    4404   ; }
                    4405   ; void UnhandledIRQ2(void) {
                    4406   _UnhandledIRQ2:
                    4407   ; IRQMessage(2);
0000285E  4878 0002 4408          pea       2
00002862  4EB8 2826 4409          jsr       _IRQMessage
00002866  584F      4410          addq.w    #4,A7
00002868  4E75      4411          rts
                    4412   ; }
                    4413   ; void UnhandledIRQ3(void){
                    4414   _UnhandledIRQ3:
                    4415   ; IRQMessage(3);
0000286A  4878 0003 4416          pea       3
0000286E  4EB8 2826 4417          jsr       _IRQMessage
00002872  584F      4418          addq.w    #4,A7
00002874  4E75      4419          rts
                    4420   ; }
                    4421   ; void UnhandledIRQ4(void) {
                    4422   _UnhandledIRQ4:
                    4423   ; IRQMessage(4);
00002876  4878 0004 4424          pea       4
0000287A  4EB8 2826 4425          jsr       _IRQMessage
0000287E  584F      4426          addq.w    #4,A7
00002880  4E75      4427          rts
                    4428   ; }
                    4429   ; void UnhandledIRQ5(void) {
                    4430   _UnhandledIRQ5:
                    4431   ; IRQMessage(5);
00002882  4878 0005 4432          pea       5
00002886  4EB8 2826 4433          jsr       _IRQMessage
0000288A  584F      4434          addq.w    #4,A7
0000288C  4E75      4435          rts
                    4436   ; }
                    4437   ; void UnhandledIRQ6(void) {
                    4438   _UnhandledIRQ6:
                    4439   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000288E  4879 0000 4440          pea       @m68kde~1_135.L
00002892  4B66      
00002894  4EB8 27FA 4441          jsr       _PrintErrorMessageandAbort
00002898  584F      4442          addq.w    #4,A7
                    4443   ; menu() ;
0000289A  4EB8 2586 4444          jsr       _menu
0000289E  4E75      4445          rts
                    4446   ; }
                    4447   ; void UnhandledIRQ7(void) {
                    4448   _UnhandledIRQ7:
                    4449   ; IRQMessage(7);
000028A0  4878 0007 4450          pea       7
000028A4  4EB8 2826 4451          jsr       _IRQMessage
000028A8  584F      4452          addq.w    #4,A7
000028AA  4E75      4453          rts
                    4454   ; }
                    4455   ; void UnhandledTrap(void) {
                    4456   _UnhandledTrap:
                    4457   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000028AC  4879 0000 4458          pea       @m68kde~1_136.L
000028B0  4BA6      
000028B2  4EB8 27FA 4459          jsr       _PrintErrorMessageandAbort
000028B6  584F      4460          addq.w    #4,A7
000028B8  4E75      4461          rts
                    4462   ; }
                    4463   ; void BusError() {
                    4464   _BusError:
                    4465   ; PrintErrorMessageandAbort("BUS Error!") ;
000028BA  4879 0000 4466          pea       @m68kde~1_137.L
000028BE  4BBC      
000028C0  4EB8 27FA 4467          jsr       _PrintErrorMessageandAbort
000028C4  584F      4468          addq.w    #4,A7
000028C6  4E75      4469          rts
                    4470   ; }
                    4471   ; void AddressError() {
                    4472   _AddressError:
                    4473   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000028C8  4879 0000 4474          pea       @m68kde~1_138.L
000028CC  4BC8      
000028CE  4EB8 27FA 4475          jsr       _PrintErrorMessageandAbort
000028D2  584F      4476          addq.w    #4,A7
000028D4  4E75      4477          rts
                    4478   ; }
                    4479   ; void IllegalInstruction() {
                    4480   _IllegalInstruction:
                    4481   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000028D6  4879 0000 4482          pea       @m68kde~1_139.L
000028DA  4BD8      
000028DC  4EB8 27FA 4483          jsr       _PrintErrorMessageandAbort
000028E0  584F      4484          addq.w    #4,A7
000028E2  4E75      4485          rts
                    4486   ; }
                    4487   ; void Dividebyzero() {
                    4488   _Dividebyzero:
                    4489   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000028E4  4879 0000 4490          pea       @m68kde~1_140.L
000028E8  4BEC      
000028EA  4EB8 27FA 4491          jsr       _PrintErrorMessageandAbort
000028EE  584F      4492          addq.w    #4,A7
000028F0  4E75      4493          rts
                    4494   ; }
                    4495   ; void Check() {
                    4496   _Check:
                    4497   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000028F2  4879 0000 4498          pea       @m68kde~1_141.L
000028F6  4BFC      
000028F8  4EB8 27FA 4499          jsr       _PrintErrorMessageandAbort
000028FC  584F      4500          addq.w    #4,A7
000028FE  4E75      4501          rts
                    4502   ; }
                    4503   ; void Trapv() {
                    4504   _Trapv:
                    4505   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002900  4879 0000 4506          pea       @m68kde~1_142.L
00002904  4C0E      
00002906  4EB8 27FA 4507          jsr       _PrintErrorMessageandAbort
0000290A  584F      4508          addq.w    #4,A7
0000290C  4E75      4509          rts
                    4510   ; }
                    4511   ; void PrivError() {
                    4512   _PrivError:
                    4513   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
0000290E  4879 0000 4514          pea       @m68kde~1_143.L
00002912  4C20      
00002914  4EB8 27FA 4515          jsr       _PrintErrorMessageandAbort
00002918  584F      4516          addq.w    #4,A7
0000291A  4E75      4517          rts
                    4518   ; }
                    4519   ; void UnitIRQ() {
                    4520   _UnitIRQ:
                    4521   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000291C  4879 0000 4522          pea       @m68kde~1_144.L
00002920  4C34      
00002922  4EB8 27FA 4523          jsr       _PrintErrorMessageandAbort
00002926  584F      4524          addq.w    #4,A7
00002928  4E75      4525          rts
                    4526   ; }
                    4527   ; void Spurious() {
                    4528   _Spurious:
                    4529   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
0000292A  4879 0000 4530          pea       @m68kde~1_145.L
0000292E  4C46      
00002930  4EB8 27FA 4531          jsr       _PrintErrorMessageandAbort
00002934  584F      4532          addq.w    #4,A7
00002936  4E75      4533          rts
                    4534   ; }
                    4535   ; void EnterString(void)
                    4536   ; {
                    4537   _EnterString:
00002938  4E56 FFFC 4538          link      A6,#-4
0000293C  2F02      4539          move.l    D2,-(A7)
                    4540   ; unsigned char *Start;
                    4541   ; unsigned char c;
                    4542   ; printf("\r\nStart Address in Memory: ") ;
0000293E  4879 0000 4543          pea       @m68kde~1_146.L
00002942  4C54      
00002944  4EB9 0000 4544          jsr       _printf
00002948  31DE      
0000294A  584F      4545          addq.w    #4,A7
                    4546   ; Start = Get8HexDigits(0) ;
0000294C  42A7      4547          clr.l     -(A7)
0000294E  4EB8 0CA4 4548          jsr       _Get8HexDigits
00002952  584F      4549          addq.w    #4,A7
00002954  2400      4550          move.l    D0,D2
                    4551   ; printf("\r\nEnter String (ESC to end) :") ;
00002956  4879 0000 4552          pea       @m68kde~1_147.L
0000295A  4C70      
0000295C  4EB9 0000 4553          jsr       _printf
00002960  31DE      
00002962  584F      4554          addq.w    #4,A7
                    4555   ; while((c = getchar()) != 0x1b)
                    4556   EnterString_1:
00002964  4EB9 0000 4557          jsr       _getch
00002968  3126      
0000296A  1D40 FFFF 4558          move.b    D0,-1(A6)
0000296E  0C00 001B 4559          cmp.b     #27,D0
00002972  670A      4560          beq.s     EnterString_3
                    4561   ; *Start++ = c ;
00002974  2042      4562          move.l    D2,A0
00002976  5282      4563          addq.l    #1,D2
00002978  10AE FFFF 4564          move.b    -1(A6),(A0)
0000297C  60E6      4565          bra       EnterString_1
                    4566   EnterString_3:
                    4567   ; *Start = 0x00;  // terminate with a null
0000297E  2042      4568          move.l    D2,A0
00002980  4210      4569          clr.b     (A0)
00002982  241F      4570          move.l    (A7)+,D2
00002984  4E5E      4571          unlk      A6
00002986  4E75      4572          rts
                    4573   ; }
                    4574   ; void MemoryTest(void)
                    4575   ; {
                    4576   _MemoryTest:
00002988  4E56 FFF8 4577          link      A6,#-8
0000298C  48E7 3F3C 4578          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002990  45F9 0000 4579          lea       _printf.L,A2
00002994  31DE      
00002996  4BF8 0B68 4580          lea       __getch.L,A5
                    4581   ; unsigned char   data_option = 'U';  //Char U will be unassigned value in case system reset without sram cleaned
0000299A  7C55      4582          moveq     #85,D6
                    4583   ; unsigned char   data_pattern = 'U';
0000299C  7855      4584          moveq     #85,D4
                    4585   ; unsigned int    input_data = NULL;
0000299E  4283      4586          clr.l     D3
                    4587   ; unsigned int    num_of_bits = NULL;
000029A0  7E00      4588          moveq     #0,D7
                    4589   ; unsigned int    start_address = NULL;
000029A2  387C 0000 4590          move.w    #0,A4
                    4591   ; unsigned int    start_address_valid = 0;
000029A6  42AE FFF8 4592          clr.l     -8(A6)
                    4593   ; unsigned int    end_address = NULL;
000029AA  367C 0000 4594          move.w    #0,A3
                    4595   ; unsigned int    end_address_valid = 0;
000029AE  42AE FFFC 4596          clr.l     -4(A6)
                    4597   ; unsigned char    *address_ptr = NULL;
000029B2  4282      4598          clr.l     D2
                    4599   ; unsigned int    address_counter = 0;
000029B4  4285      4600          clr.l     D5
                    4601   ; //Option of carrying out a test using byte words or longwords
                    4602   ; while((data_option != 'A' && data_option != 'B' && data_option != 'C') || data_option == 'U')
                    4603   MemoryTest_1:
000029B6  0C06 0041 4604          cmp.b     #65,D6
000029BA  670C      4605          beq.s     MemoryTest_5
000029BC  0C06 0042 4606          cmp.b     #66,D6
000029C0  6706      4607          beq.s     MemoryTest_5
000029C2  0C06 0043 4608          cmp.b     #67,D6
000029C6  6608      4609          bne.s     MemoryTest_4
                    4610   MemoryTest_5:
000029C8  0C06 0055 4611          cmp.b     #85,D6
000029CC  6600 0038 4612          bne       MemoryTest_3
                    4613   MemoryTest_4:
                    4614   ; {
                    4615   ; printf("\r\nChoose the data type you want to test\n");
000029D0  4879 0000 4616          pea       @m68kde~1_148.L
000029D4  4C8E      
000029D6  4E92      4617          jsr       (A2)
000029D8  584F      4618          addq.w    #4,A7
                    4619   ; printf("A-BYTES    B-WORDS    C-LONG WORDS\n");
000029DA  4879 0000 4620          pea       @m68kde~1_149.L
000029DE  4CB8      
000029E0  4E92      4621          jsr       (A2)
000029E2  584F      4622          addq.w    #4,A7
                    4623   ; //scanf("%c", &data_option);
                    4624   ; data_option = _getch();
000029E4  4E95      4625          jsr       (A5)
000029E6  1C00      4626          move.b    D0,D6
                    4627   ; if(data_option != 'A' && data_option != 'B' && data_option != 'C')
000029E8  0C06 0041 4628          cmp.b     #65,D6
000029EC  6716      4629          beq.s     MemoryTest_6
000029EE  0C06 0042 4630          cmp.b     #66,D6
000029F2  6710      4631          beq.s     MemoryTest_6
000029F4  0C06 0043 4632          cmp.b     #67,D6
000029F8  670A      4633          beq.s     MemoryTest_6
                    4634   ; printf("Input Not Valid\n");
000029FA  4879 0000 4635          pea       @m68kde~1_150.L
000029FE  4CDC      
00002A00  4E92      4636          jsr       (A2)
00002A02  584F      4637          addq.w    #4,A7
                    4638   MemoryTest_6:
00002A04  60B0      4639          bra       MemoryTest_1
                    4640   MemoryTest_3:
                    4641   ; }
                    4642   ; switch(data_option)
00002A06  CCBC 0000 4643          and.l     #255,D6
00002A0A  00FF      
00002A0C  0C86 0000 4644          cmp.l     #66,D6
00002A10  0042      
00002A12  671A      4645          beq.s     MemoryTest_11
00002A14  620A      4646          bhi.s     MemoryTest_14
00002A16  0C86 0000 4647          cmp.l     #65,D6
00002A1A  0041      
00002A1C  670C      4648          beq.s     MemoryTest_10
00002A1E  6016      4649          bra.s     MemoryTest_8
                    4650   MemoryTest_14:
00002A20  0C86 0000 4651          cmp.l     #67,D6
00002A24  0043      
00002A26  670A      4652          beq.s     MemoryTest_12
00002A28  600C      4653          bra.s     MemoryTest_8
                    4654   MemoryTest_10:
                    4655   ; {
                    4656   ; case 'A':
                    4657   ; num_of_bits = 8;
00002A2A  7E08      4658          moveq     #8,D7
                    4659   ; break;
00002A2C  6012      4660          bra.s     MemoryTest_9
                    4661   MemoryTest_11:
                    4662   ; case 'B':
                    4663   ; num_of_bits = 16;
00002A2E  7E10      4664          moveq     #16,D7
                    4665   ; break;
00002A30  600E      4666          bra.s     MemoryTest_9
                    4667   MemoryTest_12:
                    4668   ; case 'C':
                    4669   ; num_of_bits = 32;
00002A32  7E20      4670          moveq     #32,D7
                    4671   ; break;
00002A34  600A      4672          bra.s     MemoryTest_9
                    4673   MemoryTest_8:
                    4674   ; default:
                    4675   ; printf("\r\nFunction Exception of Wrong Data type");
00002A36  4879 0000 4676          pea       @m68kde~1_151.L
00002A3A  4CEE      
00002A3C  4E92      4677          jsr       (A2)
00002A3E  584F      4678          addq.w    #4,A7
                    4679   ; break;
                    4680   MemoryTest_9:
                    4681   ; }
                    4682   ; printf("\r\nData Option Choosen. # of bits is %i\n", num_of_bits);
00002A40  2F07      4683          move.l    D7,-(A7)
00002A42  4879 0000 4684          pea       @m68kde~1_152.L
00002A46  4D16      
00002A48  4E92      4685          jsr       (A2)
00002A4A  504F      4686          addq.w    #8,A7
                    4687   ; //Option of choosing data patterns
                    4688   ; while((data_pattern != 'A' && data_pattern != 'B' && data_pattern != 'C' && data_pattern != 'D') || data_pattern == 'U')
                    4689   MemoryTest_15:
00002A4C  0C04 0041 4690          cmp.b     #65,D4
00002A50  6712      4691          beq.s     MemoryTest_19
00002A52  0C04 0042 4692          cmp.b     #66,D4
00002A56  670C      4693          beq.s     MemoryTest_19
00002A58  0C04 0043 4694          cmp.b     #67,D4
00002A5C  6706      4695          beq.s     MemoryTest_19
00002A5E  0C04 0044 4696          cmp.b     #68,D4
00002A62  6608      4697          bne.s     MemoryTest_18
                    4698   MemoryTest_19:
00002A64  0C04 0055 4699          cmp.b     #85,D4
00002A68  6600 003E 4700          bne       MemoryTest_17
                    4701   MemoryTest_18:
                    4702   ; {
                    4703   ; printf("\r\nChoose the data pattern you want to use\n");
00002A6C  4879 0000 4704          pea       @m68kde~1_153.L
00002A70  4D3E      
00002A72  4E92      4705          jsr       (A2)
00002A74  584F      4706          addq.w    #4,A7
                    4707   ; printf("A-55    B-AA    C-FF    D-00\n");
00002A76  4879 0000 4708          pea       @m68kde~1_154.L
00002A7A  4D6A      
00002A7C  4E92      4709          jsr       (A2)
00002A7E  584F      4710          addq.w    #4,A7
                    4711   ; //scanf("%c", &data_pattern);
                    4712   ; data_pattern = _getch();
00002A80  4E95      4713          jsr       (A5)
00002A82  1800      4714          move.b    D0,D4
                    4715   ; if(data_pattern != 'A' && data_pattern != 'B' && data_pattern != 'C' && data_pattern != 'D')
00002A84  0C04 0041 4716          cmp.b     #65,D4
00002A88  671C      4717          beq.s     MemoryTest_20
00002A8A  0C04 0042 4718          cmp.b     #66,D4
00002A8E  6716      4719          beq.s     MemoryTest_20
00002A90  0C04 0043 4720          cmp.b     #67,D4
00002A94  6710      4721          beq.s     MemoryTest_20
00002A96  0C04 0044 4722          cmp.b     #68,D4
00002A9A  670A      4723          beq.s     MemoryTest_20
                    4724   ; printf("\r\nInput Not Valid\n");
00002A9C  4879 0000 4725          pea       @m68kde~1_155.L
00002AA0  4D88      
00002AA2  4E92      4726          jsr       (A2)
00002AA4  584F      4727          addq.w    #4,A7
                    4728   MemoryTest_20:
00002AA6  60A4      4729          bra       MemoryTest_15
                    4730   MemoryTest_17:
                    4731   ; }
                    4732   ; switch(data_pattern)
00002AA8  C8BC 0000 4733          and.l     #255,D4
00002AAC  00FF      
00002AAE  2004      4734          move.l    D4,D0
00002AB0  0480 0000 4735          sub.l     #65,D0
00002AB4  0041      
00002AB6  6500 0034 4736          blo       MemoryTest_22
00002ABA  0C80 0000 4737          cmp.l     #4,D0
00002ABE  0004      
00002AC0  642A      4738          bhs.s     MemoryTest_22
00002AC2  E380      4739          asl.l     #1,D0
00002AC4  303B 0806 4740          move.w    MemoryTest_24(PC,D0.L),D0
00002AC8  4EFB 0002 4741          jmp       MemoryTest_24(PC,D0.W)
                    4742   MemoryTest_24:
00002ACC  0008      4743          dc.w      MemoryTest_25-MemoryTest_24
00002ACE  000C      4744          dc.w      MemoryTest_26-MemoryTest_24
00002AD0  0014      4745          dc.w      MemoryTest_27-MemoryTest_24
00002AD2  001C      4746          dc.w      MemoryTest_28-MemoryTest_24
                    4747   MemoryTest_25:
                    4748   ; {
                    4749   ; case 'A':
                    4750   ; input_data = 0x55;
00002AD4  7655      4751          moveq     #85,D3
                    4752   ; break;
00002AD6  601E      4753          bra.s     MemoryTest_23
                    4754   MemoryTest_26:
                    4755   ; case 'B':
                    4756   ; input_data = 0xAA;
00002AD8  263C 0000 4757          move.l    #170,D3
00002ADC  00AA      
                    4758   ; break;
00002ADE  6016      4759          bra.s     MemoryTest_23
                    4760   MemoryTest_27:
                    4761   ; case 'C':
                    4762   ; input_data = 0xFF;
00002AE0  263C 0000 4763          move.l    #255,D3
00002AE4  00FF      
                    4764   ; break;
00002AE6  600E      4765          bra.s     MemoryTest_23
                    4766   MemoryTest_28:
                    4767   ; case 'D':
                    4768   ; input_data = 0x00;
00002AE8  4283      4769          clr.l     D3
                    4770   ; break;
00002AEA  600A      4771          bra.s     MemoryTest_23
                    4772   MemoryTest_22:
                    4773   ; default:
                    4774   ; printf("\r\nFucntion Exception of Wrong Data Pattern");
00002AEC  4879 0000 4775          pea       @m68kde~1_156.L
00002AF0  4D9C      
00002AF2  4E92      4776          jsr       (A2)
00002AF4  584F      4777          addq.w    #4,A7
                    4778   ; break;
                    4779   MemoryTest_23:
                    4780   ; }
                    4781   ; printf("\r\nData Pattern Choosen. The Pattern is %02X\n", input_data);
00002AF6  2F03      4782          move.l    D3,-(A7)
00002AF8  4879 0000 4783          pea       @m68kde~1_157.L
00002AFC  4DC8      
00002AFE  4E92      4784          jsr       (A2)
00002B00  504F      4785          addq.w    #8,A7
                    4786   ; //Prompt for a start and end address 
                    4787   ; while(!start_address_valid)
                    4788   MemoryTest_30:
00002B02  4AAE FFF8 4789          tst.l     -8(A6)
00002B06  6600 0060 4790          bne       MemoryTest_32
                    4791   ; {
                    4792   ; printf("\r\nPlease enter Start Address\n");
00002B0A  4879 0000 4793          pea       @m68kde~1_158.L
00002B0E  4DF6      
00002B10  4E92      4794          jsr       (A2)
00002B12  584F      4795          addq.w    #4,A7
                    4796   ; //scanf("%x", &start_address);
                    4797   ; start_address = Get8HexDigits(0);
00002B14  42A7      4798          clr.l     -(A7)
00002B16  4EB8 0CA4 4799          jsr       _Get8HexDigits
00002B1A  584F      4800          addq.w    #4,A7
00002B1C  2840      4801          move.l    D0,A4
                    4802   ; if(start_address < 0x08020000)
00002B1E  200C      4803          move.l    A4,D0
00002B20  0C80 0802 4804          cmp.l     #134348800,D0
00002B24  0000      
00002B26  640C      4805          bhs.s     MemoryTest_33
                    4806   ; printf("\r\nStart Address must > 0x08020000");
00002B28  4879 0000 4807          pea       @m68kde~1_159.L
00002B2C  4E14      
00002B2E  4E92      4808          jsr       (A2)
00002B30  584F      4809          addq.w    #4,A7
00002B32  6032      4810          bra.s     MemoryTest_36
                    4811   MemoryTest_33:
                    4812   ; else if((num_of_bits >= 16) && (start_address % 2 != 0))
00002B34  0C87 0000 4813          cmp.l     #16,D7
00002B38  0010      
00002B3A  6522      4814          blo.s     MemoryTest_35
00002B3C  2F0C      4815          move.l    A4,-(A7)
00002B3E  4878 0002 4816          pea       2
00002B42  4EB9 0000 4817          jsr       ULDIV
00002B46  301C      
00002B48  202F 0004 4818          move.l    4(A7),D0
00002B4C  504F      4819          addq.w    #8,A7
00002B4E  4A80      4820          tst.l     D0
00002B50  670C      4821          beq.s     MemoryTest_35
                    4822   ; printf("\r\nFor data type WORDS & LONG WORDS, address must be even");
00002B52  4879 0000 4823          pea       @m68kde~1_160.L
00002B56  4E36      
00002B58  4E92      4824          jsr       (A2)
00002B5A  584F      4825          addq.w    #4,A7
00002B5C  6008      4826          bra.s     MemoryTest_36
                    4827   MemoryTest_35:
                    4828   ; else
                    4829   ; start_address_valid = 1;  
00002B5E  2D7C 0000 4830          move.l    #1,-8(A6)
00002B62  0001 FFF8 
                    4831   MemoryTest_36:
00002B66  609A      4832          bra       MemoryTest_30
                    4833   MemoryTest_32:
                    4834   ; }
                    4835   ; while(!end_address_valid)
                    4836   MemoryTest_37:
00002B68  4AAE FFFC 4837          tst.l     -4(A6)
00002B6C  6600 0060 4838          bne       MemoryTest_39
                    4839   ; {
                    4840   ; printf("\r\nPlease enter End Address\n");
00002B70  4879 0000 4841          pea       @m68kde~1_161.L
00002B74  4E70      
00002B76  4E92      4842          jsr       (A2)
00002B78  584F      4843          addq.w    #4,A7
                    4844   ; //scanf("%x", &end_address);
                    4845   ; end_address = Get8HexDigits(0);
00002B7A  42A7      4846          clr.l     -(A7)
00002B7C  4EB8 0CA4 4847          jsr       _Get8HexDigits
00002B80  584F      4848          addq.w    #4,A7
00002B82  2640      4849          move.l    D0,A3
                    4850   ; if(end_address > 0x08030000)
00002B84  200B      4851          move.l    A3,D0
00002B86  0C80 0803 4852          cmp.l     #134414336,D0
00002B8A  0000      
00002B8C  630C      4853          bls.s     MemoryTest_40
                    4854   ; printf("End Address must < 0x08030000\n");
00002B8E  4879 0000 4855          pea       @m68kde~1_162.L
00002B92  4E8C      
00002B94  4E92      4856          jsr       (A2)
00002B96  584F      4857          addq.w    #4,A7
00002B98  6032      4858          bra.s     MemoryTest_43
                    4859   MemoryTest_40:
                    4860   ; else if((num_of_bits >= 16) && (end_address % 2 != 0))
00002B9A  0C87 0000 4861          cmp.l     #16,D7
00002B9E  0010      
00002BA0  6522      4862          blo.s     MemoryTest_42
00002BA2  2F0B      4863          move.l    A3,-(A7)
00002BA4  4878 0002 4864          pea       2
00002BA8  4EB9 0000 4865          jsr       ULDIV
00002BAC  301C      
00002BAE  202F 0004 4866          move.l    4(A7),D0
00002BB2  504F      4867          addq.w    #8,A7
00002BB4  4A80      4868          tst.l     D0
00002BB6  670C      4869          beq.s     MemoryTest_42
                    4870   ; printf("For data type WORDS & LONG WORDS, address must be even\n");
00002BB8  4879 0000 4871          pea       @m68kde~1_163.L
00002BBC  4EAC      
00002BBE  4E92      4872          jsr       (A2)
00002BC0  584F      4873          addq.w    #4,A7
00002BC2  6008      4874          bra.s     MemoryTest_43
                    4875   MemoryTest_42:
                    4876   ; else
                    4877   ; end_address_valid = 1;  
00002BC4  2D7C 0000 4878          move.l    #1,-4(A6)
00002BC8  0001 FFFC 
                    4879   MemoryTest_43:
00002BCC  609A      4880          bra       MemoryTest_37
                    4881   MemoryTest_39:
                    4882   ; }
                    4883   ; //READ AND WRITE BIT
                    4884   ; switch(num_of_bits)
00002BCE  0C87 0000 4885          cmp.l     #16,D7
00002BD2  0010      
00002BD4  6700 0066 4886          beq       MemoryTest_47
00002BD8  620C      4887          bhi.s     MemoryTest_50
00002BDA  0C87 0000 4888          cmp.l     #8,D7
00002BDE  0008      
00002BE0  6712      4889          beq.s     MemoryTest_46
00002BE2  6000 014A 4890          bra       MemoryTest_44
                    4891   MemoryTest_50:
00002BE6  0C87 0000 4892          cmp.l     #32,D7
00002BEA  0020      
00002BEC  6700 00AE 4893          beq       MemoryTest_48
00002BF0  6000 013C 4894          bra       MemoryTest_44
                    4895   MemoryTest_46:
                    4896   ; {
                    4897   ; case 8:
                    4898   ; for(address_ptr = start_address; address_ptr <= end_address; address_ptr += 1)
00002BF4  240C      4899          move.l    A4,D2
                    4900   MemoryTest_51:
00002BF6  B48B      4901          cmp.l     A3,D2
00002BF8  6200 003E 4902          bhi       MemoryTest_53
                    4903   ; {
                    4904   ; *address_ptr = input_data;
00002BFC  2042      4905          move.l    D2,A0
00002BFE  1083      4906          move.b    D3,(A0)
                    4907   ; if(address_counter % 1280 == 0)
00002C00  2F05      4908          move.l    D5,-(A7)
00002C02  4878 0500 4909          pea       1280
00002C06  4EB9 0000 4910          jsr       ULDIV
00002C0A  301C      
00002C0C  202F 0004 4911          move.l    4(A7),D0
00002C10  504F      4912          addq.w    #8,A7
00002C12  4A80      4913          tst.l     D0
00002C14  661C      4914          bne.s     MemoryTest_54
                    4915   ; {
                    4916   ; printf("\r\nCurrent Progress: Address %08x Write Data %02X Read Data %02X",
00002C16  2042      4917          move.l    D2,A0
00002C18  1210      4918          move.b    (A0),D1
00002C1A  C2BC 0000 4919          and.l     #255,D1
00002C1E  00FF      
00002C20  2F01      4920          move.l    D1,-(A7)
00002C22  2F03      4921          move.l    D3,-(A7)
00002C24  2F02      4922          move.l    D2,-(A7)
00002C26  4879 0000 4923          pea       @m68kde~1_164.L
00002C2A  4EE4      
00002C2C  4E92      4924          jsr       (A2)
00002C2E  DEFC 0010 4925          add.w     #16,A7
                    4926   MemoryTest_54:
                    4927   ; address_ptr, input_data, *address_ptr);
                    4928   ; }
                    4929   ; address_counter++;
00002C32  5285      4930          addq.l    #1,D5
00002C34  5282      4931          addq.l    #1,D2
00002C36  60BE      4932          bra       MemoryTest_51
                    4933   MemoryTest_53:
                    4934   ; }
                    4935   ; break;
00002C38  6000 00FE 4936          bra       MemoryTest_45
                    4937   MemoryTest_47:
                    4938   ; case 16:
                    4939   ; for(address_ptr = start_address; address_ptr <= end_address; address_ptr += 2)
00002C3C  240C      4940          move.l    A4,D2
                    4941   MemoryTest_56:
00002C3E  B48B      4942          cmp.l     A3,D2
00002C40  6200 0056 4943          bhi       MemoryTest_58
                    4944   ; {
                    4945   ; *address_ptr = input_data;
00002C44  2042      4946          move.l    D2,A0
00002C46  1083      4947          move.b    D3,(A0)
                    4948   ; *(address_ptr + 1) = input_data;
00002C48  2042      4949          move.l    D2,A0
00002C4A  1143 0001 4950          move.b    D3,1(A0)
                    4951   ; if(address_counter % 1280 == 0)
00002C4E  2F05      4952          move.l    D5,-(A7)
00002C50  4878 0500 4953          pea       1280
00002C54  4EB9 0000 4954          jsr       ULDIV
00002C58  301C      
00002C5A  202F 0004 4955          move.l    4(A7),D0
00002C5E  504F      4956          addq.w    #8,A7
00002C60  4A80      4957          tst.l     D0
00002C62  662C      4958          bne.s     MemoryTest_59
                    4959   ; {
                    4960   ; printf("\r\nCurrent Progress: Address %08x Write Data %02X%02X Read Data %02X%02X",
00002C64  2042      4961          move.l    D2,A0
00002C66  1228 0001 4962          move.b    1(A0),D1
00002C6A  C2BC 0000 4963          and.l     #255,D1
00002C6E  00FF      
00002C70  2F01      4964          move.l    D1,-(A7)
00002C72  2042      4965          move.l    D2,A0
00002C74  1210      4966          move.b    (A0),D1
00002C76  C2BC 0000 4967          and.l     #255,D1
00002C7A  00FF      
00002C7C  2F01      4968          move.l    D1,-(A7)
00002C7E  2F03      4969          move.l    D3,-(A7)
00002C80  2F03      4970          move.l    D3,-(A7)
00002C82  2F02      4971          move.l    D2,-(A7)
00002C84  4879 0000 4972          pea       @m68kde~1_165.L
00002C88  4F24      
00002C8A  4E92      4973          jsr       (A2)
00002C8C  DEFC 0018 4974          add.w     #24,A7
                    4975   MemoryTest_59:
                    4976   ; address_ptr, input_data, input_data, *address_ptr, *(address_ptr + 1));
                    4977   ; }
                    4978   ; address_counter++;
00002C90  5285      4979          addq.l    #1,D5
                    4980   ; address_counter++;
00002C92  5285      4981          addq.l    #1,D5
00002C94  5482      4982          addq.l    #2,D2
00002C96  60A6      4983          bra       MemoryTest_56
                    4984   MemoryTest_58:
                    4985   ; }
                    4986   ; break;
00002C98  6000 009E 4987          bra       MemoryTest_45
                    4988   MemoryTest_48:
                    4989   ; case 32:
                    4990   ; for(address_ptr = start_address; address_ptr <= end_address; address_ptr += 4)
00002C9C  240C      4991          move.l    A4,D2
                    4992   MemoryTest_61:
00002C9E  B48B      4993          cmp.l     A3,D2
00002CA0  6200 008A 4994          bhi       MemoryTest_63
                    4995   ; {
                    4996   ; *address_ptr = input_data;
00002CA4  2042      4997          move.l    D2,A0
00002CA6  1083      4998          move.b    D3,(A0)
                    4999   ; *(address_ptr + 1) = input_data;
00002CA8  2042      5000          move.l    D2,A0
00002CAA  1143 0001 5001          move.b    D3,1(A0)
                    5002   ; *(address_ptr + 2) = input_data;
00002CAE  2042      5003          move.l    D2,A0
00002CB0  1143 0002 5004          move.b    D3,2(A0)
                    5005   ; *(address_ptr + 3) = input_data;
00002CB4  2042      5006          move.l    D2,A0
00002CB6  1143 0003 5007          move.b    D3,3(A0)
                    5008   ; if(address_counter % 1280 == 0)
00002CBA  2F05      5009          move.l    D5,-(A7)
00002CBC  4878 0500 5010          pea       1280
00002CC0  4EB9 0000 5011          jsr       ULDIV
00002CC4  301C      
00002CC6  202F 0004 5012          move.l    4(A7),D0
00002CCA  504F      5013          addq.w    #8,A7
00002CCC  4A80      5014          tst.l     D0
00002CCE  6600 004E 5015          bne       MemoryTest_64
                    5016   ; {
                    5017   ; printf("\r\nCurrent Progress: Address %08x Write Data %02X%02X%02X%02X Read Data %02X%02X%02X%02X",
00002CD2  2042      5018          move.l    D2,A0
00002CD4  1228 0003 5019          move.b    3(A0),D1
00002CD8  C2BC 0000 5020          and.l     #255,D1
00002CDC  00FF      
00002CDE  2F01      5021          move.l    D1,-(A7)
00002CE0  2042      5022          move.l    D2,A0
00002CE2  1228 0002 5023          move.b    2(A0),D1
00002CE6  C2BC 0000 5024          and.l     #255,D1
00002CEA  00FF      
00002CEC  2F01      5025          move.l    D1,-(A7)
00002CEE  2042      5026          move.l    D2,A0
00002CF0  1228 0001 5027          move.b    1(A0),D1
00002CF4  C2BC 0000 5028          and.l     #255,D1
00002CF8  00FF      
00002CFA  2F01      5029          move.l    D1,-(A7)
00002CFC  2042      5030          move.l    D2,A0
00002CFE  1210      5031          move.b    (A0),D1
00002D00  C2BC 0000 5032          and.l     #255,D1
00002D04  00FF      
00002D06  2F01      5033          move.l    D1,-(A7)
00002D08  2F03      5034          move.l    D3,-(A7)
00002D0A  2F03      5035          move.l    D3,-(A7)
00002D0C  2F03      5036          move.l    D3,-(A7)
00002D0E  2F03      5037          move.l    D3,-(A7)
00002D10  2F02      5038          move.l    D2,-(A7)
00002D12  4879 0000 5039          pea       @m68kde~1_166.L
00002D16  4F6C      
00002D18  4E92      5040          jsr       (A2)
00002D1A  DEFC 0028 5041          add.w     #40,A7
                    5042   MemoryTest_64:
                    5043   ; address_ptr, input_data, input_data, input_data, input_data, *address_ptr, *(address_ptr + 1), *(address_ptr + 2), *(address_ptr + 3));
                    5044   ; }
                    5045   ; address_counter++;
00002D1E  5285      5046          addq.l    #1,D5
                    5047   ; address_counter++;
00002D20  5285      5048          addq.l    #1,D5
                    5049   ; address_counter++;
00002D22  5285      5050          addq.l    #1,D5
                    5051   ; address_counter++;
00002D24  5285      5052          addq.l    #1,D5
00002D26  5882      5053          addq.l    #4,D2
00002D28  6000 FF74 5054          bra       MemoryTest_61
                    5055   MemoryTest_63:
                    5056   ; }
                    5057   ; break;
00002D2C  600A      5058          bra.s     MemoryTest_45
                    5059   MemoryTest_44:
                    5060   ; default:
                    5061   ; printf("\r\nFucntion Exception on READ and WRITE stage");
00002D2E  4879 0000 5062          pea       @m68kde~1_167.L
00002D32  4FC4      
00002D34  4E92      5063          jsr       (A2)
00002D36  584F      5064          addq.w    #4,A7
                    5065   ; break;
                    5066   MemoryTest_45:
                    5067   ; }
                    5068   ; printf("\r\nTest Completed. Press ESC to Abort");
00002D38  4879 0000 5069          pea       @m68kde~1_168.L
00002D3C  4FF2      
00002D3E  4E92      5070          jsr       (A2)
00002D40  584F      5071          addq.w    #4,A7
                    5072   ; while(1)
                    5073   MemoryTest_66:
                    5074   ; {
                    5075   ; if(_getch() == 0x1b)          // break on ESC
00002D42  4E95      5076          jsr       (A5)
00002D44  0C80 0000 5077          cmp.l     #27,D0
00002D48  001B      
00002D4A  6602      5078          bne.s     MemoryTest_69
                    5079   ; break;
00002D4C  6002      5080          bra.s     MemoryTest_68
                    5081   MemoryTest_69:
00002D4E  60F2      5082          bra       MemoryTest_66
                    5083   MemoryTest_68:
00002D50  4CDF 3CFC 5084          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002D54  4E5E      5085          unlk      A6
00002D56  4E75      5086          rts
                    5087   ; }
                    5088   ; }
                    5089   ; void main(void)
                    5090   ; {
                    5091   _main:
00002D58  4E56 FFF4 5092          link      A6,#-12
00002D5C  48E7 3030 5093          movem.l   D2/D3/A2/A3,-(A7)
00002D60  45F8 0A30 5094          lea       _InstallExceptionHandler.L,A2
00002D64  47F9 0000 5095          lea       _printf.L,A3
00002D68  31DE      
                    5096   ; char c ;
                    5097   ; int i, j ;
                    5098   ; char *BugMessage = "DE1-68k Bug V1.77";
00002D6A  41F9 0000 5099          lea       @m68kde~1_169.L,A0
00002D6E  5018      
00002D70  2608      5100          move.l    A0,D3
                    5101   ; char *CopyrightMessage = "Xingwei Su 72979917\nYuqian Hu 64133713";
00002D72  41F9 0000 5102          lea       @m68kde~1_170.L,A0
00002D76  502A      
00002D78  2D48 FFFC 5103          move.l    A0,-4(A6)
                    5104   ; KillAllBreakPoints() ;
00002D7C  4EB8 2034 5105          jsr       _KillAllBreakPoints
                    5106   ; SPI_Init();
00002D80  4EB8 10DC 5107          jsr       _SPI_Init
                    5108   ; i = x = y = z = PortA_Count = 0;
00002D84  42B9 0B00 5109          clr.l     _PortA_Count.L
00002D88  00D4      
00002D8A  42B9 0B00 5110          clr.l     _z.L
00002D8E  00D0      
00002D90  42B9 0B00 5111          clr.l     _y.L
00002D94  00CC      
00002D96  42B9 0B00 5112          clr.l     _x.L
00002D9A  00C8      
00002D9C  4282      5113          clr.l     D2
                    5114   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002D9E  42B9 0B00 5115          clr.l     _GoFlag.L
00002DA2  00DC      
00002DA4  42B9 0B00 5116          clr.l     _Trace.L
00002DA8  00D8      
                    5117   ; Echo = 1 ;
00002DAA  23FC 0000 5118          move.l    #1,_Echo.L
00002DAE  0001 0B00 
00002DB2  00E0      
                    5119   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002DB4  42B9 0B00 5120          clr.l     _d7.L
00002DB8  0100      
00002DBA  42B9 0B00 5121          clr.l     _d6.L
00002DBE  00FC      
00002DC0  42B9 0B00 5122          clr.l     _d5.L
00002DC4  00F8      
00002DC6  42B9 0B00 5123          clr.l     _d4.L
00002DCA  00F4      
00002DCC  42B9 0B00 5124          clr.l     _d3.L
00002DD0  00F0      
00002DD2  42B9 0B00 5125          clr.l     _d2.L
00002DD6  00EC      
00002DD8  42B9 0B00 5126          clr.l     _d1.L
00002DDC  00E8      
00002DDE  42B9 0B00 5127          clr.l     _d0.L
00002DE2  00E4      
                    5128   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002DE4  42B9 0B00 5129          clr.l     _a6.L
00002DE8  011C      
00002DEA  42B9 0B00 5130          clr.l     _a5.L
00002DEE  0118      
00002DF0  42B9 0B00 5131          clr.l     _a4.L
00002DF4  0114      
00002DF6  42B9 0B00 5132          clr.l     _a3.L
00002DFA  0110      
00002DFC  42B9 0B00 5133          clr.l     _a2.L
00002E00  010C      
00002E02  42B9 0B00 5134          clr.l     _a1.L
00002E06  0108      
00002E08  42B9 0B00 5135          clr.l     _a0.L
00002E0C  0104      
                    5136   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002E0E  23FC 0800 5137          move.l    #134217728,_PC.L
00002E12  0000 0B00 
00002E16  0120      
00002E18  23FC 0C00 5138          move.l    #201326592,_SSP.L
00002E1C  0000 0B00 
00002E20  0124      
00002E22  23FC 0C00 5139          move.l    #201326592,_USP.L
00002E26  0000 0B00 
00002E2A  0128      
                    5140   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002E2C  33FC 2000 5141          move.w    #8192,_SR.L
00002E30  0B00 012C 
                    5142   ; // Initialise Breakpoint variables
                    5143   ; for(i = 0; i < 8; i++)  {
00002E34  4282      5144          clr.l     D2
                    5145   main_1:
00002E36  0C82 0000 5146          cmp.l     #8,D2
00002E3A  0008      
00002E3C  6C00 004C 5147          bge       main_3
                    5148   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002E40  2002      5149          move.l    D2,D0
00002E42  E588      5150          lsl.l     #2,D0
00002E44  41F9 0B00 5151          lea       _BreakPointAddress.L,A0
00002E48  012E      
00002E4A  42B0 0800 5152          clr.l     0(A0,D0.L)
                    5153   ; WatchPointAddress[i] = 0 ;
00002E4E  2002      5154          move.l    D2,D0
00002E50  E588      5155          lsl.l     #2,D0
00002E52  41F9 0B00 5156          lea       _WatchPointAddress.L,A0
00002E56  0182      
00002E58  42B0 0800 5157          clr.l     0(A0,D0.L)
                    5158   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002E5C  2002      5159          move.l    D2,D0
00002E5E  E388      5160          lsl.l     #1,D0
00002E60  41F9 0B00 5161          lea       _BreakPointInstruction.L,A0
00002E64  014E      
00002E66  4270 0800 5162          clr.w     0(A0,D0.L)
                    5163   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002E6A  2002      5164          move.l    D2,D0
00002E6C  E588      5165          lsl.l     #2,D0
00002E6E  41F9 0B00 5166          lea       _BreakPointSetOrCleared.L,A0
00002E72  015E      
00002E74  42B0 0800 5167          clr.l     0(A0,D0.L)
                    5168   ; WatchPointSetOrCleared[i] = 0;
00002E78  2002      5169          move.l    D2,D0
00002E7A  E588      5170          lsl.l     #2,D0
00002E7C  41F9 0B00 5171          lea       _WatchPointSetOrCleared.L,A0
00002E80  01A2      
00002E82  42B0 0800 5172          clr.l     0(A0,D0.L)
00002E86  5282      5173          addq.l    #1,D2
00002E88  60AC      5174          bra       main_1
                    5175   main_3:
                    5176   ; }
                    5177   ; Init_RS232() ;     // initialise the RS232 port
00002E8A  4EB8 0B12 5178          jsr       _Init_RS232
                    5179   ; Init_LCD() ;
00002E8E  4EB8 095E 5180          jsr       _Init_LCD
                    5181   ; for( i = 32; i < 48; i++)
00002E92  7420      5182          moveq     #32,D2
                    5183   main_4:
00002E94  0C82 0000 5184          cmp.l     #48,D2
00002E98  0030      
00002E9A  6C0E      5185          bge.s     main_6
                    5186   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002E9C  2F02      5187          move.l    D2,-(A7)
00002E9E  4878 28AC 5188          pea       _UnhandledTrap.L
00002EA2  4E92      5189          jsr       (A2)
00002EA4  504F      5190          addq.w    #8,A7
00002EA6  5282      5191          addq.l    #1,D2
00002EA8  60EA      5192          bra       main_4
                    5193   main_6:
                    5194   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002EAA  4878 002F 5195          pea       47
00002EAE  4878 2586 5196          pea       _menu.L
00002EB2  4E92      5197          jsr       (A2)
00002EB4  504F      5198          addq.w    #8,A7
                    5199   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002EB6  4878 0019 5200          pea       25
00002EBA  4878 2852 5201          pea       _UnhandledIRQ1.L
00002EBE  4E92      5202          jsr       (A2)
00002EC0  504F      5203          addq.w    #8,A7
                    5204   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002EC2  4878 001A 5205          pea       26
00002EC6  4878 285E 5206          pea       _UnhandledIRQ2.L
00002ECA  4E92      5207          jsr       (A2)
00002ECC  504F      5208          addq.w    #8,A7
                    5209   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002ECE  4878 001B 5210          pea       27
00002ED2  4878 286A 5211          pea       _UnhandledIRQ3.L
00002ED6  4E92      5212          jsr       (A2)
00002ED8  504F      5213          addq.w    #8,A7
                    5214   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002EDA  4878 001C 5215          pea       28
00002EDE  4878 2876 5216          pea       _UnhandledIRQ4.L
00002EE2  4E92      5217          jsr       (A2)
00002EE4  504F      5218          addq.w    #8,A7
                    5219   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002EE6  4878 001D 5220          pea       29
00002EEA  4878 2882 5221          pea       _UnhandledIRQ5.L
00002EEE  4E92      5222          jsr       (A2)
00002EF0  504F      5223          addq.w    #8,A7
                    5224   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002EF2  4878 001E 5225          pea       30
00002EF6  4878 288E 5226          pea       _UnhandledIRQ6.L
00002EFA  4E92      5227          jsr       (A2)
00002EFC  504F      5228          addq.w    #8,A7
                    5229   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002EFE  4878 001F 5230          pea       31
00002F02  4878 28A0 5231          pea       _UnhandledIRQ7.L
00002F06  4E92      5232          jsr       (A2)
00002F08  504F      5233          addq.w    #8,A7
                    5234   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002F0A  4878 002E 5235          pea       46
00002F0E  4878 22C2 5236          pea       _HandleBreakPoint.L
00002F12  4E92      5237          jsr       (A2)
00002F14  504F      5238          addq.w    #8,A7
                    5239   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002F16  4878 001D 5240          pea       29
00002F1A  4878 19A2 5241          pea       _DumpRegistersandPause.L
00002F1E  4E92      5242          jsr       (A2)
00002F20  504F      5243          addq.w    #8,A7
                    5244   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002F22  4878 0002 5245          pea       2
00002F26  4878 28BA 5246          pea       _BusError.L
00002F2A  4E92      5247          jsr       (A2)
00002F2C  504F      5248          addq.w    #8,A7
                    5249   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002F2E  4878 0003 5250          pea       3
00002F32  4878 28C8 5251          pea       _AddressError.L
00002F36  4E92      5252          jsr       (A2)
00002F38  504F      5253          addq.w    #8,A7
                    5254   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002F3A  4878 0004 5255          pea       4
00002F3E  4878 28D6 5256          pea       _IllegalInstruction.L
00002F42  4E92      5257          jsr       (A2)
00002F44  504F      5258          addq.w    #8,A7
                    5259   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002F46  4878 0005 5260          pea       5
00002F4A  4878 28E4 5261          pea       _Dividebyzero.L
00002F4E  4E92      5262          jsr       (A2)
00002F50  504F      5263          addq.w    #8,A7
                    5264   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002F52  4878 0006 5265          pea       6
00002F56  4878 28F2 5266          pea       _Check.L
00002F5A  4E92      5267          jsr       (A2)
00002F5C  504F      5268          addq.w    #8,A7
                    5269   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002F5E  4878 0007 5270          pea       7
00002F62  4878 2900 5271          pea       _Trapv.L
00002F66  4E92      5272          jsr       (A2)
00002F68  504F      5273          addq.w    #8,A7
                    5274   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002F6A  4878 0008 5275          pea       8
00002F6E  4878 290E 5276          pea       _PrivError.L
00002F72  4E92      5277          jsr       (A2)
00002F74  504F      5278          addq.w    #8,A7
                    5279   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002F76  4878 000F 5280          pea       15
00002F7A  4878 291C 5281          pea       _UnitIRQ.L
00002F7E  4E92      5282          jsr       (A2)
00002F80  504F      5283          addq.w    #8,A7
                    5284   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002F82  4878 0018 5285          pea       24
00002F86  4878 28F2 5286          pea       _Check.L
00002F8A  4E92      5287          jsr       (A2)
00002F8C  504F      5288          addq.w    #8,A7
                    5289   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002F8E  4EB8 0BA6 5290          jsr       _FlushKeyboard
                    5291   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002F92  4239 0040 5292          clr.b     4194314
00002F96  000A      
                    5293   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5294   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5295   main_7:
00002F98  1039 0040 5296          move.b    4194306,D0
00002F9C  0002      
00002F9E  C03C 0002 5297          and.b     #2,D0
00002FA2  0C00 0002 5298          cmp.b     #2,D0
00002FA6  662A      5299          bne.s     main_9
                    5300   ; LoadFromFlashChip();
00002FA8  4EB8 1440 5301          jsr       _LoadFromFlashChip
                    5302   ; printf("\r\nRunning.....") ;
00002FAC  4879 0000 5303          pea       @m68kde~1_171.L
00002FB0  5052      
00002FB2  4E93      5304          jsr       (A3)
00002FB4  584F      5305          addq.w    #4,A7
                    5306   ; Oline1("Running.....") ;
00002FB6  4879 0000 5307          pea       @m68kde~1_172.L
00002FBA  5062      
00002FBC  4EB8 0A02 5308          jsr       _Oline1
00002FC0  584F      5309          addq.w    #4,A7
                    5310   ; GoFlag = 1;
00002FC2  23FC 0000 5311          move.l    #1,_GoFlag.L
00002FC6  0001 0B00 
00002FCA  00DC      
                    5312   ; go() ;
00002FCC  4EB8 08B8 5313          jsr       _go
00002FD0  60C6      5314          bra       main_7
                    5315   main_9:
                    5316   ; }
                    5317   ; // otherwise start the debug monitor
                    5318   ; Oline0(BugMessage) ;
00002FD2  2F03      5319          move.l    D3,-(A7)
00002FD4  4EB8 09D4 5320          jsr       _Oline0
00002FD8  584F      5321          addq.w    #4,A7
                    5322   ; Oline1("By: PJ Davies") ;
00002FDA  4879 0000 5323          pea       @m68kde~1_173.L
00002FDE  5070      
00002FE0  4EB8 0A02 5324          jsr       _Oline1
00002FE4  584F      5325          addq.w    #4,A7
                    5326   ; printf("\r\n%s", BugMessage) ;
00002FE6  2F03      5327          move.l    D3,-(A7)
00002FE8  4879 0000 5328          pea       @m68kde~1_174.L
00002FEC  507E      
00002FEE  4E93      5329          jsr       (A3)
00002FF0  504F      5330          addq.w    #8,A7
                    5331   ; printf("\r\n%s", CopyrightMessage) ;
00002FF2  2F2E FFFC 5332          move.l    -4(A6),-(A7)
00002FF6  4879 0000 5333          pea       @m68kde~1_174.L
00002FFA  507E      
00002FFC  4E93      5334          jsr       (A3)
00002FFE  504F      5335          addq.w    #8,A7
                    5336   ; menu();
00003000  4EB8 2586 5337          jsr       _menu
00003004  4CDF 0C0C 5338          movem.l   (A7)+,D2/D3/A2/A3
00003008  4E5E      5339          unlk      A6
0000300A  4E75      5340          rts
                    5341   ; }
                    5342   _strcpy:
0000300C  206F 0004 5343          move.l    (4,A7),A0
00003010  226F 0008 5344          move.l    (8,A7),A1
00003014  2008      5345          move.l    A0,D0
                    5346   strcpy_1:
00003016  10D9      5347          move.b    (A1)+,(A0)+
00003018  66FC      5348          bne.s     strcpy_1
0000301A  4E75      5349          rts
                    5350   ULDIV:
0000301C  4E56 0000 5351          link    A6,#0
00003020  48E7 C000 5352          movem.l D0/D1,-(A7)
00003024  222E 0008 5353          move.l  8(A6),D1
00003028  202E 000C 5354          move.l  12(A6),D0
0000302C  6036      5355          bra.s   ldiv_3
                    5356   LDIV:
0000302E  4E56 0000 5357          link    A6,#0
00003032  48E7 C000 5358          movem.l D0/D1,-(A7)
00003036  222E 0008 5359          move.l  8(A6),D1
0000303A  202E 000C 5360          move.l  12(A6),D0
0000303E  4A80      5361          tst.l   D0
00003040  6A0E      5362          bpl.s   ldiv_1
00003042  4480      5363          neg.l   D0
00003044  4A81      5364          tst.l   D1
00003046  6A14      5365          bpl.s   ldiv_2
00003048  4481      5366          neg.l   D1
0000304A  612A      5367          bsr.s   dodiv
0000304C  4481      5368          neg.l   D1
0000304E  6016      5369          bra.s   ldiv_4
                    5370   ldiv_1:
00003050  4A81      5371          tst.l   D1
00003052  6A10      5372          bpl.s   ldiv_3
00003054  4481      5373          neg.l   D1
00003056  611E      5374          bsr.s   dodiv
00003058  4480      5375          neg.l   D0
0000305A  600A      5376          bra.s   ldiv_4
                    5377   ldiv_2:
0000305C  6118      5378          bsr.s   dodiv
0000305E  4480      5379          neg.l   D0
00003060  4481      5380          neg.l   D1
00003062  6002      5381          bra.s   ldiv_4
                    5382   ldiv_3:
00003064  6110      5383          bsr.s   dodiv
                    5384   ldiv_4:
00003066  2D40 0008 5385          move.l  D0,8(A6)
0000306A  2D41 000C 5386          move.l  D1,12(A6)
0000306E  4CDF 0003 5387          movem.l (A7)+,D0/D1
00003072  4E5E      5388          unlk    A6
00003074  4E75      5389          rts
                    5390   dodiv:
00003076  0C81 0000 5391          cmpi.l  #$FFFF,D1
0000307A  FFFF      
0000307C  6236      5392          bhi.s   dodiv_2
0000307E  0C80 0000 5393          cmpi.l  #$FFFF,D0
00003082  FFFF      
00003084  6210      5394          bhi.s   dodiv_1
00003086  80C1      5395          divu    D1,D0
00003088  2200      5396          move.l  D0,D1
0000308A  4241      5397          clr.w   D1
0000308C  4841      5398          swap    D1
0000308E  0280 0000 5399          andi.l  #$FFFF,D0
00003092  FFFF      
00003094  4E75      5400          rts
                    5401   dodiv_1:
00003096  48A7 A000 5402          movem.w D0/D2,-(A7)
0000309A  4240      5403          clr.w   D0
0000309C  4840      5404          swap    D0
0000309E  80C1      5405          divu    D1,D0
000030A0  3400      5406          move.w  D0,D2
000030A2  301F      5407          move.w  (A7)+,D0
000030A4  80C1      5408          divu    D1,D0
000030A6  4840      5409          swap    D0
000030A8  4281      5410          clr.l   D1
000030AA  3200      5411          move.w  D0,D1
000030AC  3002      5412          move.w  D2,D0
000030AE  4840      5413          swap    D0
000030B0  341F      5414          move.w  (A7)+,D2
000030B2  4E75      5415          rts
                    5416   dodiv_2:
000030B4  48E7 3800 5417          movem.l D2/D3/D4,-(A7)
000030B8  2401      5418          move.l  D1,D2
000030BA  4242      5419          clr.w   D2
000030BC  4842      5420          swap    D2
000030BE  5282      5421          addq.l  #1,D2
000030C0  2600      5422          move.l  D0,D3
000030C2  2801      5423          move.l  D1,D4
000030C4  2202      5424          move.l  D2,D1
000030C6  61CE      5425          bsr.s   dodiv_1
000030C8  2204      5426          move.l  D4,D1
000030CA  82C2      5427          divu    D2,D1
000030CC  80C1      5428          divu    D1,D0
000030CE  0280 0000 5429          andi.l  #$FFFF,D0
000030D2  FFFF      
                    5430   dodiv_3:
000030D4  2204      5431          move.l  D4,D1
000030D6  2404      5432          move.l  D4,D2
000030D8  4842      5433          swap    D2
000030DA  C2C0      5434          mulu    D0,D1
000030DC  C4C0      5435          mulu    D0,D2
000030DE  4842      5436          swap    D2
000030E0  D282      5437          add.l   D2,D1
000030E2  9283      5438          sub.l   D3,D1
000030E4  620A      5439          bhi.s   dodiv_4
000030E6  4481      5440          neg.l   D1
000030E8  B881      5441          cmp.l   D1,D4
000030EA  6208      5442          bhi.s   dodiv_5
000030EC  5280      5443          addq.l  #1,D0
000030EE  60E4      5444          bra.s   dodiv_3
                    5445   dodiv_4:
000030F0  5380      5446          subq.l  #1,D0
000030F2  60E0      5447          bra.s   dodiv_3
                    5448   dodiv_5:
000030F4  4CDF 001C 5449          movem.l (A7)+,D2/D3/D4
000030F8  4E75      5450          rts
                    5451   _putch:
000030FA  4E56 0000 5452          link      A6,#0
000030FE  2F02      5453          move.l    D2,-(A7)
00003100  242E 0008 5454          move.l    8(A6),D2
00003104  0C82 0000 5455          cmp.l     #10,D2
00003108  000A      
0000310A  660A      5456          bne.s     putch_1
0000310C  4878 000D 5457          pea       13
00003110  4EB8 0B3C 5458          jsr       __putch
00003114  584F      5459          addq.w    #4,A7
                    5460   putch_1:
00003116  2F02      5461          move.l    D2,-(A7)
00003118  4EB8 0B3C 5462          jsr       __putch
0000311C  584F      5463          addq.w    #4,A7
0000311E  2002      5464          move.l    D2,D0
00003120  241F      5465          move.l    (A7)+,D2
00003122  4E5E      5466          unlk      A6
00003124  4E75      5467          rts
                    5468   _getch:
00003126  2F02      5469          move.l    D2,-(A7)
00003128  2439 0B00 5470          move.l    __ungetbuf.L,D2
0000312C  00C0      
0000312E  2039 0B00 5471          move.l    __ungetbuf.L,D0
00003132  00C0      
00003134  0C80 FFFF 5472          cmp.l     #-1,D0
00003138  FFFF      
0000313A  670C      5473          beq.s     getch_1
0000313C  23FC FFFF 5474          move.l    #-1,__ungetbuf.L
00003140  FFFF 0B00 
00003144  00C0      
00003146  6010      5475          bra.s     getch_3
                    5476   getch_1:
00003148  4EB8 0B68 5477          jsr       __getch
0000314C  2400      5478          move.l    D0,D2
0000314E  0C80 0000 5479          cmp.l     #13,D0
00003152  000D      
00003154  6602      5480          bne.s     getch_3
00003156  740A      5481          moveq     #10,D2
                    5482   getch_3:
00003158  2002      5483          move.l    D2,D0
0000315A  241F      5484          move.l    (A7)+,D2
0000315C  4E75      5485          rts
                    5486   _tolower:
0000315E  202F 0004 5487          move.l    4(A7),D0
00003162  0C80 0000 5488          cmp.l     #'A',D0
00003166  0041      
00003168  6D0E      5489          blt.s     tolower_1
0000316A  0C80 0000 5490          cmp.l     #'Z',D0
0000316E  005A      
00003170  6E06      5491          bgt.s     tolower_1
00003172  0680 0000 5492          add.l     #$20,D0
00003176  0020      
                    5493   tolower_1:
00003178  4E75      5494          rts
                    5495   _sprintf:
0000317A  4E56 FFFC 5496          link      A6,#-4
0000317E  2F02      5497          move.l    D2,-(A7)
00003180  41EE 000C 5498          lea       12(A6),A0
00003184  5848      5499          addq.w    #4,A0
00003186  2408      5500          move.l    A0,D2
00003188  2F02      5501          move.l    D2,-(A7)
0000318A  2F2E 000C 5502          move.l    12(A6),-(A7)
0000318E  2F2E 0008 5503          move.l    8(A6),-(A7)
00003192  4EB9 0000 5504          jsr       _doprint
00003196  32B4      
00003198  DEFC 000C 5505          add.w     #12,A7
0000319C  2D40 FFFC 5506          move.l    D0,-4(A6)
000031A0  4282      5507          clr.l     D2
000031A2  202E FFFC 5508          move.l    -4(A6),D0
000031A6  241F      5509          move.l    (A7)+,D2
000031A8  4E5E      5510          unlk      A6
000031AA  4E75      5511          rts
                    5512   _strcat:
000031AC  206F 0004 5513          move.l    (4,A7),A0
000031B0  226F 0008 5514          move.l    (8,A7),A1
000031B4  2008      5515          move.l    A0,D0
                    5516   strcat_1:
000031B6  4A18      5517          tst.b     (A0)+
000031B8  66FC      5518          bne.s     strcat_1
000031BA  5388      5519          subq.l    #1,A0
                    5520   strcat_2:
000031BC  10D9      5521          move.b    (A1)+,(A0)+
000031BE  66FC      5522          bne.s     strcat_2
000031C0  4E75      5523          rts
                    5524   _toupper:
000031C2  202F 0004 5525          move.l    4(A7),D0
000031C6  0C80 0000 5526          cmp.l     #'a',D0
000031CA  0061      
000031CC  6D0E      5527          blt.s     toupper_1
000031CE  0C80 0000 5528          cmp.l     #'z',D0
000031D2  007A      
000031D4  6E06      5529          bgt.s     toupper_1
000031D6  0480 0000 5530          sub.l     #$20,D0
000031DA  0020      
                    5531   toupper_1:
000031DC  4E75      5532          rts
                    5533   _printf:
000031DE  4E56 FFFC 5534          link      A6,#-4
000031E2  2F02      5535          move.l    D2,-(A7)
000031E4  41EE 0008 5536          lea       8(A6),A0
000031E8  5848      5537          addq.w    #4,A0
000031EA  2408      5538          move.l    A0,D2
000031EC  2F02      5539          move.l    D2,-(A7)
000031EE  2F2E 0008 5540          move.l    8(A6),-(A7)
000031F2  42A7      5541          clr.l     -(A7)
000031F4  4EB9 0000 5542          jsr       _doprint
000031F8  32B4      
000031FA  DEFC 000C 5543          add.w     #12,A7
000031FE  2D40 FFFC 5544          move.l    D0,-4(A6)
00003202  4282      5545          clr.l     D2
00003204  202E FFFC 5546          move.l    -4(A6),D0
00003208  241F      5547          move.l    (A7)+,D2
0000320A  4E5E      5548          unlk      A6
0000320C  4E75      5549          rts
                    5550   @doprint_copy:
0000320E  4E56 0000 5551          link      A6,#0
00003212  206E 0008 5552          move.l    8(A6),A0
00003216  4A90      5553          tst.l     (A0)
00003218  6710      5554          beq.s     @doprint_copy_1
0000321A  202E 000C 5555          move.l    12(A6),D0
0000321E  206E 0008 5556          move.l    8(A6),A0
00003222  2250      5557          move.l    (A0),A1
00003224  5290      5558          addq.l    #1,(A0)
00003226  1280      5559          move.b    D0,(A1)
00003228  600A      5560          bra.s     @doprint_copy_2
                    5561   @doprint_copy_1:
0000322A  2F2E 000C 5562          move.l    12(A6),-(A7)
0000322E  4EB8 30FA 5563          jsr       _putch
00003232  584F      5564          addq.w    #4,A7
                    5565   @doprint_copy_2:
00003234  4E5E      5566          unlk      A6
00003236  4E75      5567          rts
                    5568   @doprint_getval:
00003238  4E56 0000 5569          link      A6,#0
0000323C  48E7 3000 5570          movem.l   D2/D3,-(A7)
00003240  262E 0008 5571          move.l    8(A6),D3
00003244  4282      5572          clr.l     D2
00003246  2043      5573          move.l    D3,A0
00003248  2050      5574          move.l    (A0),A0
0000324A  1010      5575          move.b    (A0),D0
0000324C  0C00 002A 5576          cmp.b     #42,D0
00003250  6612      5577          bne.s     @doprint_getval_1
00003252  206E 000C 5578          move.l    12(A6),A0
00003256  2250      5579          move.l    (A0),A1
00003258  5890      5580          addq.l    #4,(A0)
0000325A  2411      5581          move.l    (A1),D2
0000325C  2043      5582          move.l    D3,A0
0000325E  5290      5583          addq.l    #1,(A0)
00003260  6000 0048 5584          bra       @doprint_getval_5
                    5585   @doprint_getval_1:
00003264  7001      5586          moveq     #1,D0
00003266  2043      5587          move.l    D3,A0
00003268  2050      5588          move.l    (A0),A0
0000326A  1210      5589          move.b    (A0),D1
0000326C  4881      5590          ext.w     D1
0000326E  48C1      5591          ext.l     D1
00003270  D081      5592          add.l     D1,D0
00003272  41F9 0000 5593          lea       __ctype.L,A0
00003276  5090      
00003278  1030 0800 5594          move.b    0(A0,D0.L),D0
0000327C  C03C 0004 5595          and.b     #4,D0
00003280  6728      5596          beq.s     @doprint_getval_5
00003282  2F02      5597          move.l    D2,-(A7)
00003284  4878 000A 5598          pea       10
00003288  4EB9 0000 5599          jsr       LMUL
0000328C  3A50      
0000328E  2017      5600          move.l    (A7),D0
00003290  504F      5601          addq.w    #8,A7
00003292  2043      5602          move.l    D3,A0
00003294  2250      5603          move.l    (A0),A1
00003296  5290      5604          addq.l    #1,(A0)
00003298  1211      5605          move.b    (A1),D1
0000329A  4881      5606          ext.w     D1
0000329C  48C1      5607          ext.l     D1
0000329E  D081      5608          add.l     D1,D0
000032A0  0480 0000 5609          sub.l     #48,D0
000032A4  0030      
000032A6  2400      5610          move.l    D0,D2
000032A8  60BA      5611          bra       @doprint_getval_1
                    5612   @doprint_getval_5:
000032AA  2002      5613          move.l    D2,D0
000032AC  4CDF 000C 5614          movem.l   (A7)+,D2/D3
000032B0  4E5E      5615          unlk      A6
000032B2  4E75      5616          rts
                    5617   _doprint:
000032B4  4E56 FFCC 5618          link      A6,#-52
000032B8  48E7 3F3C 5619          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000032BC  45EE 0008 5620          lea       8(A6),A2
000032C0  47F8 320E 5621          lea       @doprint_copy.L,A3
000032C4  49F9 0000 5622          lea       _ultoa.L,A4
000032C8  39DC      
000032CA  4286      5623          clr.l     D6
                    5624   doprint_1:
000032CC  206E 000C 5625          move.l    12(A6),A0
000032D0  4A10      5626          tst.b     (A0)
000032D2  6700 05EA 5627          beq       doprint_3
000032D6  206E 000C 5628          move.l    12(A6),A0
000032DA  1010      5629          move.b    (A0),D0
000032DC  0C00 0025 5630          cmp.b     #37,D0
000032E0  671C      5631          beq.s     doprint_4
000032E2  206E 000C 5632          move.l    12(A6),A0
000032E6  52AE 000C 5633          addq.l    #1,12(A6)
000032EA  1210      5634          move.b    (A0),D1
000032EC  4881      5635          ext.w     D1
000032EE  48C1      5636          ext.l     D1
000032F0  2F01      5637          move.l    D1,-(A7)
000032F2  2F0A      5638          move.l    A2,-(A7)
000032F4  4E93      5639          jsr       (A3)
000032F6  504F      5640          addq.w    #8,A7
000032F8  5286      5641          addq.l    #1,D6
000032FA  6000 05BE 5642          bra       doprint_2
                    5643   doprint_4:
000032FE  52AE 000C 5644          addq.l    #1,12(A6)
00003302  422E FFD3 5645          clr.b     -45(A6)
00003306  422E FFD2 5646          clr.b     -46(A6)
0000330A  422E FFD0 5647          clr.b     -48(A6)
0000330E  422E FFCF 5648          clr.b     -49(A6)
00003312  422E FFCE 5649          clr.b     -50(A6)
00003316  422E FFCD 5650          clr.b     -51(A6)
0000331A  42AE FFFC 5651          clr.l     -4(A6)
0000331E  7AFF      5652          moveq     #-1,D5
00003320  41EE FFDC 5653          lea       -36(A6),A0
00003324  2608      5654          move.l    A0,D3
00003326  2408      5655          move.l    A0,D2
                    5656   doprint_6:
00003328  206E 000C 5657          move.l    12(A6),A0
0000332C  1010      5658          move.b    (A0),D0
0000332E  4880      5659          ext.w     D0
00003330  48C0      5660          ext.l     D0
00003332  0C80 0000 5661          cmp.l     #43,D0
00003336  002B      
00003338  6730      5662          beq.s     doprint_12
0000333A  6E18      5663          bgt.s     doprint_15
0000333C  0C80 0000 5664          cmp.l     #35,D0
00003340  0023      
00003342  6700 003E 5665          beq       doprint_14
00003346  6E00 0046 5666          bgt       doprint_9
0000334A  0C80 0000 5667          cmp.l     #32,D0
0000334E  0020      
00003350  6724      5668          beq.s     doprint_13
00003352  603A      5669          bra.s     doprint_9
                    5670   doprint_15:
00003354  0C80 0000 5671          cmp.l     #45,D0
00003358  002D      
0000335A  6702      5672          beq.s     doprint_11
0000335C  6030      5673          bra.s     doprint_9
                    5674   doprint_11:
0000335E  1D7C 0001 5675          move.b    #1,-51(A6)
00003362  FFCD      
00003364  52AE 000C 5676          addq.l    #1,12(A6)
00003368  6026      5677          bra.s     doprint_7
                    5678   doprint_12:
0000336A  1D7C 0001 5679          move.b    #1,-50(A6)
0000336E  FFCE      
00003370  52AE 000C 5680          addq.l    #1,12(A6)
00003374  601A      5681          bra.s     doprint_7
                    5682   doprint_13:
00003376  1D7C 0001 5683          move.b    #1,-49(A6)
0000337A  FFCF      
0000337C  52AE 000C 5684          addq.l    #1,12(A6)
00003380  600E      5685          bra.s     doprint_7
                    5686   doprint_14:
00003382  1D7C 0001 5687          move.b    #1,-48(A6)
00003386  FFD0      
00003388  52AE 000C 5688          addq.l    #1,12(A6)
0000338C  6002      5689          bra.s     doprint_7
                    5690   doprint_9:
0000338E  6002      5691          bra.s     doprint_8
                    5692   doprint_7:
00003390  6096      5693          bra       doprint_6
                    5694   doprint_8:
00003392  206E 000C 5695          move.l    12(A6),A0
00003396  1010      5696          move.b    (A0),D0
00003398  0C00 0030 5697          cmp.b     #48,D0
0000339C  660A      5698          bne.s     doprint_16
0000339E  52AE 000C 5699          addq.l    #1,12(A6)
000033A2  1D7C 0001 5700          move.b    #1,-46(A6)
000033A6  FFD2      
                    5701   doprint_16:
000033A8  486E 0010 5702          pea       16(A6)
000033AC  486E 000C 5703          pea       12(A6)
000033B0  4EB8 3238 5704          jsr       @doprint_getval
000033B4  504F      5705          addq.w    #8,A7
000033B6  2A40      5706          move.l    D0,A5
000033B8  206E 000C 5707          move.l    12(A6),A0
000033BC  1010      5708          move.b    (A0),D0
000033BE  0C00 002E 5709          cmp.b     #46,D0
000033C2  6614      5710          bne.s     doprint_18
000033C4  52AE 000C 5711          addq.l    #1,12(A6)
000033C8  486E 0010 5712          pea       16(A6)
000033CC  486E 000C 5713          pea       12(A6)
000033D0  4EB8 3238 5714          jsr       @doprint_getval
000033D4  504F      5715          addq.w    #8,A7
000033D6  2A00      5716          move.l    D0,D5
                    5717   doprint_18:
000033D8  206E 000C 5718          move.l    12(A6),A0
000033DC  1010      5719          move.b    (A0),D0
000033DE  0C00 006C 5720          cmp.b     #108,D0
000033E2  660A      5721          bne.s     doprint_20
000033E4  52AE 000C 5722          addq.l    #1,12(A6)
000033E8  1D7C 0001 5723          move.b    #1,-45(A6)
000033EC  FFD3      
                    5724   doprint_20:
000033EE  206E 000C 5725          move.l    12(A6),A0
000033F2  1010      5726          move.b    (A0),D0
000033F4  4880      5727          ext.w     D0
000033F6  48C0      5728          ext.l     D0
000033F8  0C80 0000 5729          cmp.l     #111,D0
000033FC  006F      
000033FE  6700 00D8 5730          beq       doprint_27
00003402  6E34      5731          bgt.s     doprint_33
00003404  0C80 0000 5732          cmp.l     #100,D0
00003408  0064      
0000340A  6700 0054 5733          beq       doprint_24
0000340E  6E1C      5734          bgt.s     doprint_34
00003410  0C80 0000 5735          cmp.l     #99,D0
00003414  0063      
00003416  6700 0130 5736          beq       doprint_30
0000341A  6E00 0174 5737          bgt       doprint_22
0000341E  0C80 0000 5738          cmp.l     #88,D0
00003422  0058      
00003424  6700 00EA 5739          beq       doprint_28
00003428  6000 0166 5740          bra       doprint_22
                    5741   doprint_34:
0000342C  0C80 0000 5742          cmp.l     #105,D0
00003430  0069      
00003432  672C      5743          beq.s     doprint_24
00003434  6000 015A 5744          bra       doprint_22
                    5745   doprint_33:
00003438  0C80 0000 5746          cmp.l     #117,D0
0000343C  0075      
0000343E  6700 0060 5747          beq       doprint_26
00003442  6E0E      5748          bgt.s     doprint_35
00003444  0C80 0000 5749          cmp.l     #115,D0
00003448  0073      
0000344A  6700 0124 5750          beq       doprint_31
0000344E  6000 0140 5751          bra       doprint_22
                    5752   doprint_35:
00003452  0C80 0000 5753          cmp.l     #120,D0
00003456  0078      
00003458  6700 00B6 5754          beq       doprint_28
0000345C  6000 0132 5755          bra       doprint_22
                    5756   doprint_24:
00003460  4A2E FFD3 5757          tst.b     -45(A6)
00003464  671C      5758          beq.s     doprint_36
00003466  4878 000A 5759          pea       10
0000346A  2F03      5760          move.l    D3,-(A7)
0000346C  206E 0010 5761          move.l    16(A6),A0
00003470  58AE 0010 5762          addq.l    #4,16(A6)
00003474  2F10      5763          move.l    (A0),-(A7)
00003476  4EB9 0000 5764          jsr       _ltoa
0000347A  3958      
0000347C  DEFC 000C 5765          add.w     #12,A7
00003480  601A      5766          bra.s     doprint_37
                    5767   doprint_36:
00003482  4878 000A 5768          pea       10
00003486  2F03      5769          move.l    D3,-(A7)
00003488  206E 0010 5770          move.l    16(A6),A0
0000348C  58AE 0010 5771          addq.l    #4,16(A6)
00003490  2F10      5772          move.l    (A0),-(A7)
00003492  4EB9 0000 5773          jsr       _ltoa
00003496  3958      
00003498  DEFC 000C 5774          add.w     #12,A7
                    5775   doprint_37:
0000349C  6000 0100 5776          bra       doprint_23
                    5777   doprint_26:
000034A0  4A2E FFD3 5778          tst.b     -45(A6)
000034A4  6718      5779          beq.s     doprint_38
000034A6  4878 000A 5780          pea       10
000034AA  2F03      5781          move.l    D3,-(A7)
000034AC  206E 0010 5782          move.l    16(A6),A0
000034B0  58AE 0010 5783          addq.l    #4,16(A6)
000034B4  2F10      5784          move.l    (A0),-(A7)
000034B6  4E94      5785          jsr       (A4)
000034B8  DEFC 000C 5786          add.w     #12,A7
000034BC  6016      5787          bra.s     doprint_39
                    5788   doprint_38:
000034BE  4878 000A 5789          pea       10
000034C2  2F03      5790          move.l    D3,-(A7)
000034C4  206E 0010 5791          move.l    16(A6),A0
000034C8  58AE 0010 5792          addq.l    #4,16(A6)
000034CC  2F10      5793          move.l    (A0),-(A7)
000034CE  4E94      5794          jsr       (A4)
000034D0  DEFC 000C 5795          add.w     #12,A7
                    5796   doprint_39:
000034D4  6000 00C8 5797          bra       doprint_23
                    5798   doprint_27:
000034D8  4A2E FFD3 5799          tst.b     -45(A6)
000034DC  6718      5800          beq.s     doprint_40
000034DE  4878 0008 5801          pea       8
000034E2  2F03      5802          move.l    D3,-(A7)
000034E4  206E 0010 5803          move.l    16(A6),A0
000034E8  58AE 0010 5804          addq.l    #4,16(A6)
000034EC  2F10      5805          move.l    (A0),-(A7)
000034EE  4E94      5806          jsr       (A4)
000034F0  DEFC 000C 5807          add.w     #12,A7
000034F4  6016      5808          bra.s     doprint_41
                    5809   doprint_40:
000034F6  4878 0008 5810          pea       8
000034FA  2F03      5811          move.l    D3,-(A7)
000034FC  206E 0010 5812          move.l    16(A6),A0
00003500  58AE 0010 5813          addq.l    #4,16(A6)
00003504  2F10      5814          move.l    (A0),-(A7)
00003506  4E94      5815          jsr       (A4)
00003508  DEFC 000C 5816          add.w     #12,A7
                    5817   doprint_41:
0000350C  6000 0090 5818          bra       doprint_23
                    5819   doprint_28:
00003510  4A2E FFD3 5820          tst.b     -45(A6)
00003514  6718      5821          beq.s     doprint_42
00003516  4878 0010 5822          pea       16
0000351A  2F03      5823          move.l    D3,-(A7)
0000351C  206E 0010 5824          move.l    16(A6),A0
00003520  58AE 0010 5825          addq.l    #4,16(A6)
00003524  2F10      5826          move.l    (A0),-(A7)
00003526  4E94      5827          jsr       (A4)
00003528  DEFC 000C 5828          add.w     #12,A7
0000352C  6016      5829          bra.s     doprint_43
                    5830   doprint_42:
0000352E  4878 0010 5831          pea       16
00003532  2F03      5832          move.l    D3,-(A7)
00003534  206E 0010 5833          move.l    16(A6),A0
00003538  58AE 0010 5834          addq.l    #4,16(A6)
0000353C  2F10      5835          move.l    (A0),-(A7)
0000353E  4E94      5836          jsr       (A4)
00003540  DEFC 000C 5837          add.w     #12,A7
                    5838   doprint_43:
00003544  6000 0058 5839          bra       doprint_23
                    5840   doprint_30:
00003548  206E 0010 5841          move.l    16(A6),A0
0000354C  58AE 0010 5842          addq.l    #4,16(A6)
00003550  2010      5843          move.l    (A0),D0
00003552  2042      5844          move.l    D2,A0
00003554  5282      5845          addq.l    #1,D2
00003556  1080      5846          move.b    D0,(A0)
00003558  2042      5847          move.l    D2,A0
0000355A  4210      5848          clr.b     (A0)
0000355C  200D      5849          move.l    A5,D0
0000355E  6704      5850          beq.s     doprint_44
00003560  200D      5851          move.l    A5,D0
00003562  6006      5852          bra.s     doprint_45
                    5853   doprint_44:
00003564  7001      5854          moveq     #1,D0
00003566  4880      5855          ext.w     D0
00003568  48C0      5856          ext.l     D0
                    5857   doprint_45:
0000356A  2A00      5858          move.l    D0,D5
0000356C  6000 0030 5859          bra       doprint_23
                    5860   doprint_31:
00003570  206E 0010 5861          move.l    16(A6),A0
00003574  58AE 0010 5862          addq.l    #4,16(A6)
00003578  2610      5863          move.l    (A0),D3
0000357A  0C85 FFFF 5864          cmp.l     #-1,D5
0000357E  FFFF      
00003580  660C      5865          bne.s     doprint_46
00003582  2F03      5866          move.l    D3,-(A7)
00003584  4EB9 0000 5867          jsr       _strlen
00003588  3ADE      
0000358A  584F      5868          addq.w    #4,A7
0000358C  2A00      5869          move.l    D0,D5
                    5870   doprint_46:
0000358E  600E      5871          bra.s     doprint_23
                    5872   doprint_22:
00003590  206E 000C 5873          move.l    12(A6),A0
00003594  2242      5874          move.l    D2,A1
00003596  5282      5875          addq.l    #1,D2
00003598  1290      5876          move.b    (A0),(A1)
0000359A  2042      5877          move.l    D2,A0
0000359C  4210      5878          clr.b     (A0)
                    5879   doprint_23:
0000359E  2F03      5880          move.l    D3,-(A7)
000035A0  4EB9 0000 5881          jsr       _strlen
000035A4  3ADE      
000035A6  584F      5882          addq.w    #4,A7
000035A8  1800      5883          move.b    D0,D4
000035AA  206E 000C 5884          move.l    12(A6),A0
000035AE  1010      5885          move.b    (A0),D0
000035B0  0C00 0073 5886          cmp.b     #115,D0
000035B4  661C      5887          bne.s     doprint_48
000035B6  0C85 0000 5888          cmp.l     #0,D5
000035BA  0000      
000035BC  6D14      5889          blt.s     doprint_48
000035BE  4884      5890          ext.w     D4
000035C0  48C4      5891          ext.l     D4
000035C2  B885      5892          cmp.l     D5,D4
000035C4  6F04      5893          ble.s     doprint_50
000035C6  2005      5894          move.l    D5,D0
000035C8  6006      5895          bra.s     doprint_51
                    5896   doprint_50:
000035CA  1004      5897          move.b    D4,D0
000035CC  4880      5898          ext.w     D0
000035CE  48C0      5899          ext.l     D0
                    5900   doprint_51:
000035D0  1800      5901          move.b    D0,D4
                    5902   doprint_48:
000035D2  206E 000C 5903          move.l    12(A6),A0
000035D6  1010      5904          move.b    (A0),D0
000035D8  0C00 0058 5905          cmp.b     #88,D0
000035DC  6600 0026 5906          bne       doprint_56
000035E0  41EE FFDC 5907          lea       -36(A6),A0
000035E4  2408      5908          move.l    A0,D2
                    5909   doprint_54:
000035E6  2042      5910          move.l    D2,A0
000035E8  4A10      5911          tst.b     (A0)
000035EA  6718      5912          beq.s     doprint_56
000035EC  2042      5913          move.l    D2,A0
000035EE  1210      5914          move.b    (A0),D1
000035F0  4881      5915          ext.w     D1
000035F2  48C1      5916          ext.l     D1
000035F4  2F01      5917          move.l    D1,-(A7)
000035F6  4EB8 31C2 5918          jsr       _toupper
000035FA  584F      5919          addq.w    #4,A7
000035FC  2042      5920          move.l    D2,A0
000035FE  1080      5921          move.b    D0,(A0)
00003600  5282      5922          addq.l    #1,D2
00003602  60E2      5923          bra       doprint_54
                    5924   doprint_56:
00003604  7E00      5925          moveq     #0,D7
00003606  41EE FFD4 5926          lea       -44(A6),A0
0000360A  2408      5927          move.l    A0,D2
0000360C  206E 000C 5928          move.l    12(A6),A0
00003610  1010      5929          move.b    (A0),D0
00003612  0C00 0064 5930          cmp.b     #100,D0
00003616  670E      5931          beq.s     doprint_59
00003618  206E 000C 5932          move.l    12(A6),A0
0000361C  1010      5933          move.b    (A0),D0
0000361E  0C00 0069 5934          cmp.b     #105,D0
00003622  6600 0068 5935          bne       doprint_65
                    5936   doprint_59:
00003626  102E FFCE 5937          move.b    -50(A6),D0
0000362A  4880      5938          ext.w     D0
0000362C  48C0      5939          ext.l     D0
0000362E  4A80      5940          tst.l     D0
00003630  660C      5941          bne.s     doprint_62
00003632  2043      5942          move.l    D3,A0
00003634  1010      5943          move.b    (A0),D0
00003636  0C00 002D 5944          cmp.b     #45,D0
0000363A  6600 0028 5945          bne       doprint_60
                    5946   doprint_62:
0000363E  2043      5947          move.l    D3,A0
00003640  1010      5948          move.b    (A0),D0
00003642  0C00 002D 5949          cmp.b     #45,D0
00003646  660E      5950          bne.s     doprint_63
00003648  2043      5951          move.l    D3,A0
0000364A  5283      5952          addq.l    #1,D3
0000364C  2242      5953          move.l    D2,A1
0000364E  5282      5954          addq.l    #1,D2
00003650  1290      5955          move.b    (A0),(A1)
00003652  5304      5956          subq.b    #1,D4
00003654  6008      5957          bra.s     doprint_64
                    5958   doprint_63:
00003656  2042      5959          move.l    D2,A0
00003658  5282      5960          addq.l    #1,D2
0000365A  10BC 002B 5961          move.b    #43,(A0)
                    5962   doprint_64:
0000365E  5287      5963          addq.l    #1,D7
00003660  6000 002A 5964          bra       doprint_65
                    5965   doprint_60:
00003664  4A2E FFCF 5966          tst.b     -49(A6)
00003668  6722      5967          beq.s     doprint_65
0000366A  2043      5968          move.l    D3,A0
0000366C  1010      5969          move.b    (A0),D0
0000366E  0C00 002D 5970          cmp.b     #45,D0
00003672  660E      5971          bne.s     doprint_67
00003674  2043      5972          move.l    D3,A0
00003676  5283      5973          addq.l    #1,D3
00003678  2242      5974          move.l    D2,A1
0000367A  5282      5975          addq.l    #1,D2
0000367C  1290      5976          move.b    (A0),(A1)
0000367E  5304      5977          subq.b    #1,D4
00003680  6008      5978          bra.s     doprint_68
                    5979   doprint_67:
00003682  2042      5980          move.l    D2,A0
00003684  5282      5981          addq.l    #1,D2
00003686  10BC 0020 5982          move.b    #32,(A0)
                    5983   doprint_68:
0000368A  5287      5984          addq.l    #1,D7
                    5985   doprint_65:
0000368C  4A2E FFD0 5986          tst.b     -48(A6)
00003690  6700 005A 5987          beq       doprint_77
00003694  206E 000C 5988          move.l    12(A6),A0
00003698  1010      5989          move.b    (A0),D0
0000369A  4880      5990          ext.w     D0
0000369C  48C0      5991          ext.l     D0
0000369E  0C80 0000 5992          cmp.l     #111,D0
000036A2  006F      
000036A4  671A      5993          beq.s     doprint_73
000036A6  6E0C      5994          bgt.s     doprint_76
000036A8  0C80 0000 5995          cmp.l     #88,D0
000036AC  0058      
000036AE  6710      5996          beq.s     doprint_73
000036B0  6000 003A 5997          bra       doprint_77
                    5998   doprint_76:
000036B4  0C80 0000 5999          cmp.l     #120,D0
000036B8  0078      
000036BA  6704      6000          beq.s     doprint_73
000036BC  6000 002E 6001          bra       doprint_77
                    6002   doprint_73:
000036C0  2042      6003          move.l    D2,A0
000036C2  5282      6004          addq.l    #1,D2
000036C4  10BC 0030 6005          move.b    #48,(A0)
000036C8  5287      6006          addq.l    #1,D7
000036CA  206E 000C 6007          move.l    12(A6),A0
000036CE  1010      6008          move.b    (A0),D0
000036D0  0C00 0078 6009          cmp.b     #120,D0
000036D4  670C      6010          beq.s     doprint_79
000036D6  206E 000C 6011          move.l    12(A6),A0
000036DA  1010      6012          move.b    (A0),D0
000036DC  0C00 0058 6013          cmp.b     #88,D0
000036E0  660A      6014          bne.s     doprint_77
                    6015   doprint_79:
000036E2  2042      6016          move.l    D2,A0
000036E4  5282      6017          addq.l    #1,D2
000036E6  10BC 0078 6018          move.b    #120,(A0)
000036EA  5287      6019          addq.l    #1,D7
                    6020   doprint_77:
000036EC  2042      6021          move.l    D2,A0
000036EE  4210      6022          clr.b     (A0)
000036F0  206E 000C 6023          move.l    12(A6),A0
000036F4  1010      6024          move.b    (A0),D0
000036F6  4880      6025          ext.w     D0
000036F8  48C0      6026          ext.l     D0
000036FA  0C80 0000 6027          cmp.l     #105,D0
000036FE  0069      
00003700  6700 0076 6028          beq       doprint_82
00003704  6E42      6029          bgt.s     doprint_93
00003706  0C80 0000 6030          cmp.l     #99,D0
0000370A  0063      
0000370C  6700 0084 6031          beq       doprint_96
00003710  6E1C      6032          bgt.s     doprint_94
00003712  0C80 0000 6033          cmp.l     #88,D0
00003716  0058      
00003718  6700 005E 6034          beq       doprint_82
0000371C  6E00 0184 6035          bgt       doprint_80
00003720  0C80 0000 6036          cmp.l     #69,D0
00003724  0045      
00003726  6700 0050 6037          beq       doprint_82
0000372A  6000 0176 6038          bra       doprint_80
                    6039   doprint_94:
0000372E  0C80 0000 6040          cmp.l     #101,D0
00003732  0065      
00003734  6700 0042 6041          beq       doprint_82
00003738  6E00 0168 6042          bgt       doprint_80
0000373C  0C80 0000 6043          cmp.l     #100,D0
00003740  0064      
00003742  6734      6044          beq.s     doprint_82
00003744  6000 015C 6045          bra       doprint_80
                    6046   doprint_93:
00003748  0C80 0000 6047          cmp.l     #117,D0
0000374C  0075      
0000374E  6728      6048          beq.s     doprint_82
00003750  6E1A      6049          bgt.s     doprint_95
00003752  0C80 0000 6050          cmp.l     #115,D0
00003756  0073      
00003758  6700 0038 6051          beq       doprint_96
0000375C  6E00 0144 6052          bgt       doprint_80
00003760  0C80 0000 6053          cmp.l     #111,D0
00003764  006F      
00003766  6710      6054          beq.s     doprint_82
00003768  6000 0138 6055          bra       doprint_80
                    6056   doprint_95:
0000376C  0C80 0000 6057          cmp.l     #120,D0
00003770  0078      
00003772  6704      6058          beq.s     doprint_82
00003774  6000 012C 6059          bra       doprint_80
                    6060   doprint_82:
00003778  4A2E FFD2 6061          tst.b     -46(A6)
0000377C  6714      6062          beq.s     doprint_96
0000377E  4A2E FFCD 6063          tst.b     -51(A6)
00003782  660E      6064          bne.s     doprint_96
00003784  200D      6065          move.l    A5,D0
00003786  9087      6066          sub.l     D7,D0
00003788  4884      6067          ext.w     D4
0000378A  48C4      6068          ext.l     D4
0000378C  9084      6069          sub.l     D4,D0
0000378E  2D40 FFFC 6070          move.l    D0,-4(A6)
                    6071   doprint_96:
00003792  202E FFFC 6072          move.l    -4(A6),D0
00003796  0C80 0000 6073          cmp.l     #0,D0
0000379A  0000      
0000379C  6C04      6074          bge.s     doprint_98
0000379E  42AE FFFC 6075          clr.l     -4(A6)
                    6076   doprint_98:
000037A2  4A2E FFCD 6077          tst.b     -51(A6)
000037A6  6600 0030 6078          bne       doprint_104
000037AA  1004      6079          move.b    D4,D0
000037AC  4880      6080          ext.w     D0
000037AE  48C0      6081          ext.l     D0
000037B0  D0AE FFFC 6082          add.l     -4(A6),D0
000037B4  D087      6083          add.l     D7,D0
000037B6  1D40 FFD1 6084          move.b    D0,-47(A6)
                    6085   doprint_102:
000037BA  102E FFD1 6086          move.b    -47(A6),D0
000037BE  4880      6087          ext.w     D0
000037C0  48C0      6088          ext.l     D0
000037C2  220D      6089          move.l    A5,D1
000037C4  534D      6090          subq.w    #1,A5
000037C6  B081      6091          cmp.l     D1,D0
000037C8  6C0E      6092          bge.s     doprint_104
000037CA  4878 0020 6093          pea       32
000037CE  2F0A      6094          move.l    A2,-(A7)
000037D0  4E93      6095          jsr       (A3)
000037D2  504F      6096          addq.w    #8,A7
000037D4  5286      6097          addq.l    #1,D6
000037D6  60E2      6098          bra       doprint_102
                    6099   doprint_104:
000037D8  41EE FFD4 6100          lea       -44(A6),A0
000037DC  2408      6101          move.l    A0,D2
                    6102   doprint_105:
000037DE  2042      6103          move.l    D2,A0
000037E0  4A10      6104          tst.b     (A0)
000037E2  6716      6105          beq.s     doprint_107
000037E4  2042      6106          move.l    D2,A0
000037E6  5282      6107          addq.l    #1,D2
000037E8  1210      6108          move.b    (A0),D1
000037EA  4881      6109          ext.w     D1
000037EC  48C1      6110          ext.l     D1
000037EE  2F01      6111          move.l    D1,-(A7)
000037F0  2F0A      6112          move.l    A2,-(A7)
000037F2  4E93      6113          jsr       (A3)
000037F4  504F      6114          addq.w    #8,A7
000037F6  5286      6115          addq.l    #1,D6
000037F8  60E4      6116          bra       doprint_105
                    6117   doprint_107:
000037FA  202E FFFC 6118          move.l    -4(A6),D0
000037FE  1D40 FFD1 6119          move.b    D0,-47(A6)
                    6120   doprint_108:
00003802  102E FFD1 6121          move.b    -47(A6),D0
00003806  532E FFD1 6122          subq.b    #1,-47(A6)
0000380A  4A00      6123          tst.b     D0
0000380C  670E      6124          beq.s     doprint_110
0000380E  4878 0030 6125          pea       48
00003812  2F0A      6126          move.l    A2,-(A7)
00003814  4E93      6127          jsr       (A3)
00003816  504F      6128          addq.w    #8,A7
00003818  5286      6129          addq.l    #1,D6
0000381A  60E6      6130          bra       doprint_108
                    6131   doprint_110:
0000381C  2043      6132          move.l    D3,A0
0000381E  4A10      6133          tst.b     (A0)
00003820  6700 0048 6134          beq       doprint_113
00003824  206E 000C 6135          move.l    12(A6),A0
00003828  1010      6136          move.b    (A0),D0
0000382A  4880      6137          ext.w     D0
0000382C  48C0      6138          ext.l     D0
0000382E  0C80 0000 6139          cmp.l     #115,D0
00003832  0073      
00003834  670C      6140          beq.s     doprint_116
00003836  6E18      6141          bgt.s     doprint_119
00003838  0C80 0000 6142          cmp.l     #99,D0
0000383C  0063      
0000383E  6702      6143          beq.s     doprint_116
00003840  600E      6144          bra.s     doprint_119
                    6145   doprint_116:
00003842  2005      6146          move.l    D5,D0
00003844  5385      6147          subq.l    #1,D5
00003846  0C80 0000 6148          cmp.l     #0,D0
0000384A  0000      
0000384C  6E02      6149          bgt.s     doprint_119
0000384E  6016      6150          bra.s     doprint_115
                    6151   doprint_119:
00003850  2043      6152          move.l    D3,A0
00003852  5283      6153          addq.l    #1,D3
00003854  1210      6154          move.b    (A0),D1
00003856  4881      6155          ext.w     D1
00003858  48C1      6156          ext.l     D1
0000385A  2F01      6157          move.l    D1,-(A7)
0000385C  2F0A      6158          move.l    A2,-(A7)
0000385E  4E93      6159          jsr       (A3)
00003860  504F      6160          addq.w    #8,A7
00003862  5286      6161          addq.l    #1,D6
00003864  6002      6162          bra.s     doprint_112
                    6163   doprint_115:
00003866  6002      6164          bra.s     doprint_113
                    6165   doprint_112:
00003868  60B2      6166          bra       doprint_110
                    6167   doprint_113:
0000386A  4A2E FFCD 6168          tst.b     -51(A6)
0000386E  6700 0030 6169          beq       doprint_125
00003872  1004      6170          move.b    D4,D0
00003874  4880      6171          ext.w     D0
00003876  48C0      6172          ext.l     D0
00003878  D0AE FFFC 6173          add.l     -4(A6),D0
0000387C  D087      6174          add.l     D7,D0
0000387E  1D40 FFD1 6175          move.b    D0,-47(A6)
                    6176   doprint_123:
00003882  102E FFD1 6177          move.b    -47(A6),D0
00003886  4880      6178          ext.w     D0
00003888  48C0      6179          ext.l     D0
0000388A  220D      6180          move.l    A5,D1
0000388C  534D      6181          subq.w    #1,A5
0000388E  B081      6182          cmp.l     D1,D0
00003890  6C0E      6183          bge.s     doprint_125
00003892  4878 0020 6184          pea       32
00003896  2F0A      6185          move.l    A2,-(A7)
00003898  4E93      6186          jsr       (A3)
0000389A  504F      6187          addq.w    #8,A7
0000389C  5386      6188          subq.l    #1,D6
0000389E  60E2      6189          bra       doprint_123
                    6190   doprint_125:
000038A0  6014      6191          bra.s     doprint_81
                    6192   doprint_80:
000038A2  206E 000C 6193          move.l    12(A6),A0
000038A6  1210      6194          move.b    (A0),D1
000038A8  4881      6195          ext.w     D1
000038AA  48C1      6196          ext.l     D1
000038AC  2F01      6197          move.l    D1,-(A7)
000038AE  2F0A      6198          move.l    A2,-(A7)
000038B0  4E93      6199          jsr       (A3)
000038B2  504F      6200          addq.w    #8,A7
000038B4  5286      6201          addq.l    #1,D6
                    6202   doprint_81:
000038B6  52AE 000C 6203          addq.l    #1,12(A6)
                    6204   doprint_2:
000038BA  6000 FA10 6205          bra       doprint_1
                    6206   doprint_3:
000038BE  4A92      6207          tst.l     (A2)
000038C0  6710      6208          beq.s     doprint_126
000038C2  4201      6209          clr.b     D1
000038C4  C2BC 0000 6210          and.l     #255,D1
000038C8  00FF      
000038CA  2F01      6211          move.l    D1,-(A7)
000038CC  2F0A      6212          move.l    A2,-(A7)
000038CE  4E93      6213          jsr       (A3)
000038D0  504F      6214          addq.w    #8,A7
                    6215   doprint_126:
000038D2  2006      6216          move.l    D6,D0
000038D4  4CDF 3CFC 6217          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000038D8  4E5E      6218          unlk      A6
000038DA  4E75      6219          rts
                    6220   @itoa_convert:
000038DC  4E56 0000 6221          link      A6,#0
000038E0  48E7 3C00 6222          movem.l   D2/D3/D4/D5,-(A7)
000038E4  242E 0008 6223          move.l    8(A6),D2
000038E8  262E 0010 6224          move.l    16(A6),D3
000038EC  2A2E 000C 6225          move.l    12(A6),D5
000038F0  2F05      6226          move.l    D5,-(A7)
000038F2  2F03      6227          move.l    D3,-(A7)
000038F4  4EB8 301C 6228          jsr       ULDIV
000038F8  202F 0004 6229          move.l    4(A7),D0
000038FC  504F      6230          addq.w    #8,A7
000038FE  2800      6231          move.l    D0,D4
00003900  BA83      6232          cmp.l     D3,D5
00003902  651C      6233          blo.s     @itoa_convert_1
00003904  2F03      6234          move.l    D3,-(A7)
00003906  2F05      6235          move.l    D5,-(A7)
00003908  2F03      6236          move.l    D3,-(A7)
0000390A  4EB8 301C 6237          jsr       ULDIV
0000390E  2217      6238          move.l    (A7),D1
00003910  504F      6239          addq.w    #8,A7
00003912  2F01      6240          move.l    D1,-(A7)
00003914  2F02      6241          move.l    D2,-(A7)
00003916  4EB8 38DC 6242          jsr       @itoa_convert
0000391A  DEFC 000C 6243          add.w     #12,A7
0000391E  2400      6244          move.l    D0,D2
                    6245   @itoa_convert_1:
00003920  0C84 0000 6246          cmp.l     #9,D4
00003924  0009      
00003926  6E0E      6247          bgt.s     @itoa_convert_3
00003928  2004      6248          move.l    D4,D0
0000392A  7230      6249          moveq     #48,D1
0000392C  C2BC 0000 6250          and.l     #255,D1
00003930  00FF      
00003932  D081      6251          add.l     D1,D0
00003934  6012      6252          bra.s     @itoa_convert_4
                    6253   @itoa_convert_3:
00003936  2004      6254          move.l    D4,D0
00003938  7261      6255          moveq     #97,D1
0000393A  C2BC 0000 6256          and.l     #255,D1
0000393E  00FF      
00003940  D081      6257          add.l     D1,D0
00003942  0480 0000 6258          sub.l     #10,D0
00003946  000A      
                    6259   @itoa_convert_4:
00003948  2042      6260          move.l    D2,A0
0000394A  1080      6261          move.b    D0,(A0)
0000394C  2002      6262          move.l    D2,D0
0000394E  5280      6263          addq.l    #1,D0
00003950  4CDF 003C 6264          movem.l   (A7)+,D2/D3/D4/D5
00003954  4E5E      6265          unlk      A6
00003956  4E75      6266          rts
                    6267   _ltoa:
00003958  4E56 0000 6268          link      A6,#0
0000395C  48E7 3C00 6269          movem.l   D2/D3/D4/D5,-(A7)
00003960  242E 0008 6270          move.l    8(A6),D2
00003964  262E 000C 6271          move.l    12(A6),D3
00003968  2A2E 0010 6272          move.l    16(A6),D5
0000396C  2803      6273          move.l    D3,D4
0000396E  0C85 0000 6274          cmp.l     #2,D5
00003972  0002      
00003974  6D08      6275          blt.s     ltoa_3
00003976  0C85 0000 6276          cmp.l     #36,D5
0000397A  0024      
0000397C  6F06      6277          ble.s     ltoa_1
                    6278   ltoa_3:
0000397E  2003      6279          move.l    D3,D0
00003980  6000 0052 6280          bra       ltoa_4
                    6281   ltoa_1:
00003984  0C85 0000 6282          cmp.l     #10,D5
00003988  000A      
0000398A  6600 0032 6283          bne       ltoa_5
0000398E  0C82 0000 6284          cmp.l     #0,D2
00003992  0000      
00003994  6C28      6285          bge.s     ltoa_5
00003996  2002      6286          move.l    D2,D0
00003998  4480      6287          neg.l     D0
0000399A  2400      6288          move.l    D0,D2
0000399C  0C82 0000 6289          cmp.l     #0,D2
000039A0  0000      
000039A2  6C12      6290          bge.s     ltoa_7
000039A4  4879 0000 6291          pea       @itoa_1.L
000039A8  5084      
000039AA  2F03      6292          move.l    D3,-(A7)
000039AC  4EB8 300C 6293          jsr       _strcpy
000039B0  504F      6294          addq.w    #8,A7
000039B2  2003      6295          move.l    D3,D0
000039B4  601E      6296          bra.s     ltoa_4
                    6297   ltoa_7:
000039B6  2044      6298          move.l    D4,A0
000039B8  5284      6299          addq.l    #1,D4
000039BA  10BC 002D 6300          move.b    #45,(A0)
                    6301   ltoa_5:
000039BE  2F05      6302          move.l    D5,-(A7)
000039C0  2F02      6303          move.l    D2,-(A7)
000039C2  2F04      6304          move.l    D4,-(A7)
000039C4  4EB8 38DC 6305          jsr       @itoa_convert
000039C8  DEFC 000C 6306          add.w     #12,A7
000039CC  2800      6307          move.l    D0,D4
000039CE  2044      6308          move.l    D4,A0
000039D0  4210      6309          clr.b     (A0)
000039D2  2003      6310          move.l    D3,D0
                    6311   ltoa_4:
000039D4  4CDF 003C 6312          movem.l   (A7)+,D2/D3/D4/D5
000039D8  4E5E      6313          unlk      A6
000039DA  4E75      6314          rts
                    6315   _ultoa:
000039DC  4E56 0000 6316          link      A6,#0
000039E0  48E7 3800 6317          movem.l   D2/D3/D4,-(A7)
000039E4  262E 0010 6318          move.l    16(A6),D3
000039E8  282E 000C 6319          move.l    12(A6),D4
000039EC  2404      6320          move.l    D4,D2
000039EE  0C83 0000 6321          cmp.l     #2,D3
000039F2  0002      
000039F4  6D08      6322          blt.s     ultoa_3
000039F6  0C83 0000 6323          cmp.l     #36,D3
000039FA  0024      
000039FC  6F04      6324          ble.s     ultoa_1
                    6325   ultoa_3:
000039FE  2004      6326          move.l    D4,D0
00003A00  6018      6327          bra.s     ultoa_4
                    6328   ultoa_1:
00003A02  2F03      6329          move.l    D3,-(A7)
00003A04  2F2E 0008 6330          move.l    8(A6),-(A7)
00003A08  2F02      6331          move.l    D2,-(A7)
00003A0A  4EB8 38DC 6332          jsr       @itoa_convert
00003A0E  DEFC 000C 6333          add.w     #12,A7
00003A12  2400      6334          move.l    D0,D2
00003A14  2042      6335          move.l    D2,A0
00003A16  4210      6336          clr.b     (A0)
00003A18  2004      6337          move.l    D4,D0
                    6338   ultoa_4:
00003A1A  4CDF 001C 6339          movem.l   (A7)+,D2/D3/D4
00003A1E  4E5E      6340          unlk      A6
00003A20  4E75      6341          rts
                    6342   _itoa:
00003A22  4E56 0000 6343          link      A6,#0
00003A26  2F2E 0010 6344          move.l    16(A6),-(A7)
00003A2A  2F2E 000C 6345          move.l    12(A6),-(A7)
00003A2E  2F2E 0008 6346          move.l    8(A6),-(A7)
00003A32  4EB8 3958 6347          jsr       _ltoa
00003A36  DEFC 000C 6348          add.w     #12,A7
00003A3A  4E5E      6349          unlk      A6
00003A3C  4E75      6350          rts
                    6351   ULMUL:
00003A3E  4E56 0000 6352          link    A6,#0
00003A42  48E7 C000 6353          movem.l D0/D1,-(A7)
00003A46  222E 0008 6354          move.l  8(A6),D1
00003A4A  202E 000C 6355          move.l  12(A6),D0
00003A4E  602C      6356          bra.s   lmul_3
                    6357   LMUL:
00003A50  4E56 0000 6358          link    A6,#0
00003A54  48E7 C000 6359          movem.l D0/D1,-(A7)
00003A58  222E 0008 6360          move.l  8(A6),D1
00003A5C  202E 000C 6361          move.l  12(A6),D0
00003A60  4A80      6362          tst.l   D0
00003A62  6A0A      6363          bpl.s   lmul_1
00003A64  4480      6364          neg.l   D0
00003A66  4A81      6365          tst.l   D1
00003A68  6A0A      6366          bpl.s   lmul_2
00003A6A  4481      6367          neg.l   D1
00003A6C  600E      6368          bra.s   lmul_3
                    6369   lmul_1:
00003A6E  4A81      6370          tst.l   D1
00003A70  6A0A      6371          bpl.s   lmul_3
00003A72  4481      6372          neg.l   D1
                    6373   lmul_2:
00003A74  6114      6374          bsr.s   domul
00003A76  4481      6375          neg.l   D1
00003A78  4080      6376          negx.l  D0
00003A7A  6002      6377          bra.s   lmul_4
                    6378   lmul_3:
00003A7C  610C      6379          bsr.s   domul
                    6380   lmul_4:
00003A7E  2D41 0008 6381          move.l  D1,8(A6)
00003A82  4CDF 0003 6382          movem.l (A7)+,D0/D1
00003A86  4E5E      6383          unlk    A6
00003A88  4E75      6384          rts
                    6385   domul:
00003A8A  0C81 0000 6386          cmpi.l  #$FFFF,D1
00003A8E  FFFF      
00003A90  620C      6387          bhi.s   domul_1
00003A92  0C80 0000 6388          cmpi.l  #$FFFF,D0
00003A96  FFFF      
00003A98  620E      6389          bhi.s   domul_2
00003A9A  C2C0      6390          mulu    D0,D1
00003A9C  4E75      6391          rts
                    6392   domul_1:
00003A9E  0C80 0000 6393          cmpi.l  #$FFFF,D0
00003AA2  FFFF      
00003AA4  6218      6394          bhi.s   domul_4
00003AA6  6002      6395          bra.s   domul_3
                    6396   domul_2
00003AA8  C141      6397          exg     D0,D1
                    6398   domul_3:
00003AAA  2F02      6399          move.l  D2,-(A7)
00003AAC  2401      6400          move.l  D1,D2
00003AAE  4842      6401          swap    D2
00003AB0  C2C0      6402          mulu    D0,D1
00003AB2  C4C0      6403          mulu    D0,D2
00003AB4  4842      6404          swap    D2
00003AB6  4242      6405          clr.w   D2
00003AB8  D282      6406          add.l   D2,D1
00003ABA  241F      6407          move.l  (A7)+,D2
00003ABC  4E75      6408          rts
                    6409   domul_4:
00003ABE  48E7 3000 6410          movem.l D2/D3,-(A7)
00003AC2  2401      6411          move.l  D1,D2
00003AC4  2601      6412          move.l  D1,D3
00003AC6  C2C0      6413          mulu    D0,D1
00003AC8  4842      6414          swap    D2
00003ACA  C4C0      6415          mulu    D0,D2
00003ACC  4840      6416          swap    D0
00003ACE  C6C0      6417          mulu    D0,D3
00003AD0  D483      6418          add.l   D3,D2
00003AD2  4842      6419          swap    D2
00003AD4  4242      6420          clr.w   D2
00003AD6  D282      6421          add.l   D2,D1
00003AD8  4CDF 000C 6422          movem.l (A7)+,D2/D3
00003ADC  4E75      6423          rts
                    6424   _strlen:
00003ADE  206F 0004 6425          move.l    (4,A7),A0
00003AE2  2248      6426          move.l    A0,A1
                    6427   strlen_1:
00003AE4  4A19      6428          tst.b     (A1)+
00003AE6  66FC      6429          bne       strlen_1
00003AE8  2009      6430          move.l    A1,D0
00003AEA  9088      6431          sub.l     A0,D0
00003AEC  5380      6432          subq.l    #1,D0
00003AEE  4E75      6433          rts
                    6434          section   const
                    6435   
                    6436   @m68kde~1_1:
00003AF0  0D0A 00   6437          dc.b      13,10,0
                    6438   @m68kde~1_2:
00003AF4  0D53 7769 6439          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00003AF8  7463 6865 
00003AFC  7320 5357 
00003B00  5B        
00003B01  372D 305D 6440          dc.b      55,45,48,93,32,61,32,0
00003B05  203D 2000 
                    6441   @m68kde~1_3:
00003B0A  3000      6442          dc.b      48,0
                    6443   @m68kde~1_4:
00003B0C  3100      6444          dc.b      49,0
                    6445   @m68kde~1_5:
00003B0E  0D0A 4475 6446          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003B12  6D70 204D 
00003B16  656D 6F72 
00003B1A  79        
00003B1B  2042 6C6F 6447          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003B1F  636B 3A20 
00003B23  3C45 5343 
00003B27  3E20      
00003B29  746F 2041 6448          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003B2D  626F 7274 
00003B31  2C20 3C53 
00003B35  50        
00003B36  4143 453E 6449          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003B3A  2074 6F20 
00003B3E  436F 6E74 
00003B42  69        
00003B43  6E75 6500 6450          dc.b      110,117,101,0
                    6451   @m68kde~1_6:
00003B48  0D0A 456E 6452          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003B4C  7465 7220 
00003B50  5374 6172 
00003B54  74        
00003B55  2041 6464 6453          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003B59  7265 7373 
00003B5D  3A20 00   
                    6454   @m68kde~1_7:
00003B60  0D0A 2530 6455          dc.b      13,10,37,48,56,120,32,0
00003B64  3878 2000 
                    6456   @m68kde~1_8:
00003B68  2530 3258 6457          dc.b      37,48,50,88,0
00003B6C  00        
                    6458   @m68kde~1_9:
00003B6E  2020 00   6459          dc.b      32,32,0
                    6460   @m68kde~1_10:
00003B72  0D0A 4669 6461          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003B76  6C6C 204D 
00003B7A  656D 6F72 
00003B7E  79        
00003B7F  2042 6C6F 6462          dc.b      32,66,108,111,99,107,0
00003B83  636B 00   
                    6463   @m68kde~1_11:
00003B86  0D0A 456E 6464          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003B8A  7465 7220 
00003B8E  456E 6420 
00003B92  41        
00003B93  6464 7265 6465          dc.b      100,100,114,101,115,115,58,32,0
00003B97  7373 3A20 
00003B9B  00        
                    6466   @m68kde~1_12:
00003B9C  0D0A 456E 6467          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003BA0  7465 7220 
00003BA4  4669 6C6C 
00003BA8  20        
00003BA9  4461 7461 6468          dc.b      68,97,116,97,58,32,0
00003BAD  3A20 00   
                    6469   @m68kde~1_13:
00003BB0  0D0A 4669 6470          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003BB4  6C6C 696E 
00003BB8  6720 4164 
00003BBC  64        
00003BBD  7265 7373 6471          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003BC1  6573 205B 
00003BC5  2425 3038 
00003BC9  58        
00003BCA  202D 2024 6472          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003BCE  2530 3858 
00003BD2  5D20 7769 
00003BD6  7468      
00003BD8  2024 2530 6473          dc.b      32,36,37,48,50,88,0
00003BDC  3258 00   
                    6474   @m68kde~1_14:
00003BE0  0D0A 5573 6475          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003BE4  6520 4879 
00003BE8  7065 7254 
00003BEC  65        
00003BED  726D 696E 6476          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003BF1  616C 2074 
00003BF5  6F20 5365 
00003BF9  6E64 2054 6477          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003BFD  6578 7420 
00003C01  4669 6C65 
00003C05  2028 2E68 6478          dc.b      32,40,46,104,101,120,41,13,10,0
00003C09  6578 290D 
00003C0D  0A00      
                    6479   @m68kde~1_15:
00003C10  0D0A 4C6F 6480          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003C14  6164 2046 
00003C18  6169 6C65 
00003C1C  64        
00003C1D  2061 7420 6481          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003C21  4164 6472 
00003C25  6573 7320 
00003C29  3D        
00003C2A  205B 2425 6482          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003C2E  3038 585D 
00003C32  0D0A 00   
                    6483   @m68kde~1_16:
00003C36  0D0A 5375 6484          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003C3A  6363 6573 
00003C3E  733A 2044 
00003C42  6F        
00003C43  776E 6C6F 6485          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003C47  6164 6564 
00003C4B  2025 6420 
00003C4F  6279 7465 6486          dc.b      98,121,116,101,115,13,10,0
00003C53  730D 0A00 
                    6487   @m68kde~1_17:
00003C58  0D0A 4578 6488          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003C5C  616D 696E 
00003C60  6520 616E 
00003C64  64        
00003C65  2043 6861 6489          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003C69  6E67 6520 
00003C6D  4D65 6D6F 
00003C71  72        
00003C72  7900      6490          dc.b      121,0
                    6491   @m68kde~1_18:
00003C74  0D0A 3C45 6492          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003C78  5343 3E20 
00003C7C  746F 2053 
00003C80  746F      
00003C82  702C 203C 6493          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003C86  5350 4143 
00003C8A  453E 2074 
00003C8E  6F20      
00003C90  4164 7661 6494          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003C94  6E63 652C 
00003C98  2027 2D27 
00003C9C  2074      
00003C9E  6F20 476F 6495          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003CA2  2042 6163 
00003CA6  6B2C 203C 
00003CAA  4441      
00003CAC  5441 3E20 6496          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003CB0  746F 2063 
00003CB4  6861 6E67 
00003CB8  65        
00003CB9  00        6497          dc.b      0
                    6498   @m68kde~1_19:
00003CBA  0D0A 456E 6499          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003CBE  7465 7220 
00003CC2  4164 6472 
00003CC6  65        
00003CC7  7373 3A20 6500          dc.b      115,115,58,32,0
00003CCB  00        
                    6501   @m68kde~1_20:
00003CCC  0D0A 5B25 6502          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003CD0  3038 785D 
00003CD4  203A 2025 
00003CD8  3032 78   
00003CDB  2020 00   6503          dc.b      32,32,0
                    6504   @m68kde~1_21:
00003CDE  0D0A 5761 6505          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003CE2  726E 696E 
00003CE6  6720 4368 
00003CEA  61        
00003CEB  6E67 6520 6506          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003CEF  4661 696C 
00003CF3  6564 3A20 
00003CF7  57        
00003CF8  726F 7465 6507          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003CFC  205B 2530 
00003D00  3278 5D2C 
00003D04  20        
00003D05  5265 6164 6508          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003D09  205B 2530 
00003D0D  3278 5D00 
                    6509   @m68kde~1_22:
00003D12  0D0A 2020 6510          dc.b      13,10,32,32,32,32,69,114,97,115,101,83,80,73
00003D16  2020 4572 
00003D1A  6173 6553 
00003D1E  5049      
00003D20  466C 6173 6511          dc.b      70,108,97,115,104,67,104,105,112,58,101,115
00003D24  6843 6869 
00003D28  703A 6573 
00003D2C  7066 6320 6512          dc.b      112,102,99,32,98,101,102,111,114,101,32,119
00003D30  6265 666F 
00003D34  7265 2077 
00003D38  7269 7465 6513          dc.b      114,105,116,101,32,48,54,0
00003D3C  2030 3600 
                    6514   @m68kde~1_23:
00003D40  0D0A 2020 6515          dc.b      13,10,32,32,32,32,69,114,97,115,101,83,80,73
00003D44  2020 4572 
00003D48  6173 6553 
00003D4C  5049      
00003D4E  466C 6173 6516          dc.b      70,108,97,115,104,67,104,105,112,58,101,115
00003D52  6843 6869 
00003D56  703A 6573 
00003D5A  7066 6320 6517          dc.b      112,102,99,32,98,101,102,111,114,101,32,119
00003D5E  6265 666F 
00003D62  7265 2077 
00003D66  7269 7465 6518          dc.b      114,105,116,101,32,48,55,0
00003D6A  2030 3700 
                    6519   @m68kde~1_24:
00003D6E  0D0A 2020 6520          dc.b      13,10,32,32,32,32,69,114,97,115,101,83,80,73
00003D72  2020 4572 
00003D76  6173 6553 
00003D7A  5049      
00003D7C  466C 6173 6521          dc.b      70,108,97,115,104,67,104,105,112,58,101,115
00003D80  6843 6869 
00003D84  703A 6573 
00003D88  7066 6320 6522          dc.b      112,102,99,32,119,97,105,116,32,102,111,114
00003D8C  7761 6974 
00003D90  2066 6F72 
00003D94  2063 6F6D 6523          dc.b      32,99,111,109,112,108,101,116,101,0
00003D98  706C 6574 
00003D9C  6500      
                    6524   @m68kde~1_25:
00003D9E  0D0A 4572 6525          dc.b      13,10,69,114,97,115,101,83,80,73,70,108,97,115
00003DA2  6173 6553 
00003DA6  5049 466C 
00003DAA  6173      
00003DAC  6820 436F 6526          dc.b      104,32,67,111,109,112,108,101,116,101,33,0
00003DB0  6D70 6C65 
00003DB4  7465 2100 
                    6527   @m68kde~1_26:
00003DB8  0D0A 4572 6528          dc.b      13,10,69,114,97,115,105,110,103,32,83,80,73
00003DBC  6173 696E 
00003DC0  6720 5350 
00003DC4  49        
00003DC5  2046 6C61 6529          dc.b      32,70,108,97,115,104,32,67,104,105,112,0
00003DC9  7368 2043 
00003DCD  6869 7000 
                    6530   @m68kde~1_27:
00003DD2  0D0A 5772 6531          dc.b      13,10,87,114,105,116,101,32,68,82,65,77,40,48
00003DD6  6974 6520 
00003DDA  4452 414D 
00003DDE  2830      
00003DE0  3830 3030 6532          dc.b      56,48,48,48,48,48,48,41,32,116,111,32,102,108
00003DE4  3030 3029 
00003DE8  2074 6F20 
00003DEC  666C      
00003DEE  6173 6820 6533          dc.b      97,115,104,32,99,104,105,112,0
00003DF2  6368 6970 
00003DF6  00        
                    6534   @m68kde~1_28:
00003DF8  2E2E 00   6535          dc.b      46,46,0
                    6536   @m68kde~1_29:
00003DFC  0D0A 5772 6537          dc.b      13,10,87,114,105,116,101,32,116,111,32,70,108
00003E00  6974 6520 
00003E04  746F 2046 
00003E08  6C        
00003E09  6173 6820 6538          dc.b      97,115,104,32,67,104,105,112,32,67,111,109,112
00003E0D  4368 6970 
00003E11  2043 6F6D 
00003E15  70        
00003E16  6C65 7465 6539          dc.b      108,101,116,101,33,0
00003E1A  2100      
                    6540   @m68kde~1_30:
00003E1C  0D0A 5265 6541          dc.b      13,10,82,101,97,100,32,102,114,111,109,32,102
00003E20  6164 2066 
00003E24  726F 6D20 
00003E28  66        
00003E29  6C61 7368 6542          dc.b      108,97,115,104,32,99,104,105,112,0
00003E2D  2063 6869 
00003E31  7000      
                    6543   @m68kde~1_31:
00003E34  0D0A 4572 6544          dc.b      13,10,69,114,114,111,114,32,102,111,117,110
00003E38  726F 7220 
00003E3C  666F 756E 
00003E40  6420 6174 6545          dc.b      100,32,97,116,32,37,100,46,32,87,114,105,116
00003E44  2025 642E 
00003E48  2057 7269 
00003E4C  74        
00003E4D  6562 7566 6546          dc.b      101,98,117,102,102,101,114,58,37,48,50,120,46
00003E51  6665 723A 
00003E55  2530 3278 
00003E59  2E        
00003E5A  2052 6561 6547          dc.b      32,82,101,97,100,98,117,102,102,101,114,58,37
00003E5E  6462 7566 
00003E62  6665 723A 
00003E66  25        
00003E67  3032 7800 6548          dc.b      48,50,120,0
                    6549   @m68kde~1_32:
00003E6C  0D0A 5465 6550          dc.b      13,10,84,101,115,116,32,80,114,111,99,101,115
00003E70  7374 2050 
00003E74  726F 6365 
00003E78  73        
00003E79  7320 5465 6551          dc.b      115,32,84,101,114,109,105,110,97,116,101,100
00003E7D  726D 696E 
00003E81  6174 6564 
00003E85  2077 6974 6552          dc.b      32,119,105,116,104,32,77,73,83,77,65,84,67,72
00003E89  6820 4D49 
00003E8D  534D 4154 
00003E91  4348      
00003E93  2045 7272 6553          dc.b      32,69,114,114,111,114,46,32,80,114,101,115,115
00003E97  6F72 2E20 
00003E9B  5072 6573 
00003E9F  73        
00003EA0  204B 4559 6554          dc.b      32,75,69,89,91,48,93,0
00003EA4  5B30 5D00 
                    6555   @m68kde~1_33:
00003EA8  0D0A 466C 6556          dc.b      13,10,70,108,97,115,104,32,80,114,111,99,101
00003EAC  6173 6820 
00003EB0  5072 6F63 
00003EB4  65        
00003EB5  7373 2043 6557          dc.b      115,115,32,67,111,109,112,108,101,116,101,100
00003EB9  6F6D 706C 
00003EBD  6574 6564 
00003EC1  2077 6974 6558          dc.b      32,119,105,116,104,32,78,111,32,69,114,114,111
00003EC5  6820 4E6F 
00003EC9  2045 7272 
00003ECD  6F        
00003ECE  7221 2050 6559          dc.b      114,33,32,80,114,101,115,115,32,69,83,67,32
00003ED2  7265 7373 
00003ED6  2045 5343 
00003EDA  20        
00003EDB  6261 636B 6560          dc.b      98,97,99,107,32,116,111,32,109,101,110,117,0
00003EDF  2074 6F20 
00003EE3  6D65 6E75 
00003EE7  00        
                    6561   @m68kde~1_34:
00003EE8  0D0A 4C6F 6562          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00003EEC  6164 696E 
00003EF0  6720 5072 
00003EF4  6F        
00003EF5  6772 616D 6563          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00003EF9  2046 726F 
00003EFD  6D20 5350 
00003F01  49        
00003F02  2046 6C61 6564          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003F06  7368 2E2E 
00003F0A  2E2E 00   
                    6565   @m68kde~1_35:
00003F0E  0D0A 4C6F 6566          dc.b      13,10,76,111,97,100,32,80,114,111,99,101,115
00003F12  6164 2050 
00003F16  726F 6365 
00003F1A  73        
00003F1B  7320 436F 6567          dc.b      115,32,67,111,109,112,108,101,116,101,100,33
00003F1F  6D70 6C65 
00003F23  7465 6421 
00003F27  2050 7265 6568          dc.b      32,80,114,101,115,115,32,69,83,67,32,98,97,99
00003F2B  7373 2045 
00003F2F  5343 2062 
00003F33  6163      
00003F35  6B20 746F 6569          dc.b      107,32,116,111,32,109,101,110,117,0
00003F39  206D 656E 
00003F3D  7500      
                    6570   @m68kde~1_36:
00003F40  2425 3038 6571          dc.b      36,37,48,56,88,32,32,0
00003F44  5820 2000 
                    6572   @m68kde~1_37:
00003F48  2000      6573          dc.b      32,0
                    6574   @m68kde~1_38:
00003F4A  2E00      6575          dc.b      46,0
                    6576   @m68kde~1_39:
00003F4C  2563 00   6577          dc.b      37,99,0
                    6578   @m68kde~1_40:
00003F50  00        6579          dc.b      0
                    6580   @m68kde~1_41:
00003F52  0D0A 0D0A 6581          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003F56  2044 3020 
00003F5A  3D20 2425 
00003F5E  3038 58   
00003F61  2020 4130 6582          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003F65  203D 2024 
00003F69  2530 3858 
00003F6D  00        
                    6583   @m68kde~1_42:
00003F6E  0D0A 2044 6584          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003F72  3120 3D20 
00003F76  2425 3038 
00003F7A  5820 20   
00003F7D  4131 203D 6585          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003F81  2024 2530 
00003F85  3858 00   
                    6586   @m68kde~1_43:
00003F88  0D0A 2044 6587          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003F8C  3220 3D20 
00003F90  2425 3038 
00003F94  5820 20   
00003F97  4132 203D 6588          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003F9B  2024 2530 
00003F9F  3858 00   
                    6589   @m68kde~1_44:
00003FA2  0D0A 2044 6590          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003FA6  3320 3D20 
00003FAA  2425 3038 
00003FAE  5820 20   
00003FB1  4133 203D 6591          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003FB5  2024 2530 
00003FB9  3858 00   
                    6592   @m68kde~1_45:
00003FBC  0D0A 2044 6593          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003FC0  3420 3D20 
00003FC4  2425 3038 
00003FC8  5820 20   
00003FCB  4134 203D 6594          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003FCF  2024 2530 
00003FD3  3858 00   
                    6595   @m68kde~1_46:
00003FD6  0D0A 2044 6596          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003FDA  3520 3D20 
00003FDE  2425 3038 
00003FE2  5820 20   
00003FE5  4135 203D 6597          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003FE9  2024 2530 
00003FED  3858 00   
                    6598   @m68kde~1_47:
00003FF0  0D0A 2044 6599          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003FF4  3620 3D20 
00003FF8  2425 3038 
00003FFC  5820 20   
00003FFF  4136 203D 6600          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004003  2024 2530 
00004007  3858 00   
                    6601   @m68kde~1_48:
0000400A  0D0A 2044 6602          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
0000400E  3720 3D20 
00004012  2425 3038 
00004016  5820 20   
00004019  4137 203D 6603          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000401D  2024 2530 
00004021  3858 00   
                    6604   @m68kde~1_49:
00004024  0D0A 0D0A 6605          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004028  5553 5020 
0000402C  3D20 2425 
00004030  3038 58   
00004033  2020 2841 6606          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004037  3729 2055 
0000403B  7365 7220 
0000403F  5350      
00004041  00        6607          dc.b      0
                    6608   @m68kde~1_50:
00004042  0D0A 5353 6609          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004046  5020 3D20 
0000404A  2425 3038 
0000404E  5820 20   
00004051  2841 3729 6610          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004055  2053 7570 
00004059  6572 7669 
0000405D  73        
0000405E  6F72 2053 6611          dc.b      111,114,32,83,80,0
00004062  5000      
                    6612   @m68kde~1_51:
00004064  0D0A 2053 6613          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004068  5220 3D20 
0000406C  2425 3034 
00004070  5820 20   
00004073  2000      6614          dc.b      32,0
                    6615   @m68kde~1_52:
00004076  2020 205B 6616          dc.b      32,32,32,91,0
0000407A  00        
                    6617   @m68kde~1_53:
0000407C  0D0A 2050 6618          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004080  4320 3D20 
00004084  2425 3038 
00004088  5820 20   
0000408B  00        6619          dc.b      0
                    6620   @m68kde~1_54:
0000408C  5B40 2042 6621          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004090  5245 414B 
00004094  504F 494E 
00004098  545D 00   
                    6622   @m68kde~1_55:
0000409C  0D0A 5750 6623          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000040A0  2564 203D 
000040A4  2025 7300 
                    6624   @m68kde~1_56:
000040A8  0D0A 0D0A 6625          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000040AC  0D0A 0D0A 
000040B0  0D0A 0D0A 
000040B4  5369 6E   
000040B7  676C 6520 6626          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000040BB  5374 6570 
000040BF  2020 3A5B 
000040C3  4F        
000040C4  4E5D 00   6627          dc.b      78,93,0
                    6628   @m68kde~1_57:
000040C8  0D0A 4272 6629          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000040CC  6561 6B20 
000040D0  506F 696E 
000040D4  74        
000040D5  7320 3A5B 6630          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000040D9  4469 7361 
000040DD  626C 6564 
000040E1  5D        
000040E2  00        6631          dc.b      0
                    6632   @m68kde~1_58:
000040E4  0D0A 5072 6633          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000040E8  6573 7320 
000040EC  3C53 5041 
000040F0  4345      
000040F2  3E20 746F 6634          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000040F6  2045 7865 
000040FA  6375 7465 
000040FE  20        
000040FF  4E65 7874 6635          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00004103  2049 6E73 
00004107  7472 7563 
0000410B  7469 6F6E 6636          dc.b      116,105,111,110,0
0000410F  00        
                    6637   @m68kde~1_59:
00004110  0D0A 5072 6638          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004114  6573 7320 
00004118  3C45 5343 
0000411C  3E20      
0000411E  746F 2052 6639          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004122  6573 756D 
00004126  6520 5072 
0000412A  6F67 7261 6640          dc.b      111,103,114,97,109,0
0000412E  6D00      
                    6641   @m68kde~1_60:
00004130  0D0A 496C 6642          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004134  6C65 6761 
00004138  6C20 4461 
0000413C  74        
0000413D  6120 5265 6643          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004141  6769 7374 
00004145  6572 203A 
00004149  20        
0000414A  5573 6520 6644          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000414E  4430 2D44 
00004152  372E 2E2E 
00004156  2E2E      
00004158  0D0A 00   6645          dc.b      13,10,0
                    6646   @m68kde~1_61:
0000415C  0D0A 4425 6647          dc.b      13,10,68,37,99,32,61,32,0
00004160  6320 3D20 
00004164  00        
                    6648   @m68kde~1_62:
00004166  0D0A 496C 6649          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000416A  6C65 6761 
0000416E  6C20 4164 
00004172  64        
00004173  7265 7373 6650          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004177  2052 6567 
0000417B  6973 7465 
0000417F  7220 3A20 6651          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004183  5573 6520 
00004187  4130 2D41 
0000418B  372E      
0000418D  2E2E 2E2E 6652          dc.b      46,46,46,46,13,10,0
00004191  0D0A 00   
                    6653   @m68kde~1_63:
00004194  0D0A 4125 6654          dc.b      13,10,65,37,99,32,61,32,0
00004198  6320 3D20 
0000419C  00        
                    6655   @m68kde~1_64:
0000419E  0D0A 5573 6656          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000041A2  6572 2053 
000041A6  5020 3D20 
000041AA  00        
                    6657   @m68kde~1_65:
000041AC  0D0A 496C 6658          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000041B0  6C65 6761 
000041B4  6C20 5265 
000041B8  67        
000041B9  6973 7465 6659          dc.b      105,115,116,101,114,46,46,46,46,0
000041BD  722E 2E2E 
000041C1  2E00      
                    6660   @m68kde~1_66:
000041C4  0D0A 5379 6661          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000041C8  7374 656D 
000041CC  2053 5020 
000041D0  3D        
000041D1  2000      6662          dc.b      32,0
                    6663   @m68kde~1_67:
000041D4  0D0A 5043 6664          dc.b      13,10,80,67,32,61,32,0
000041D8  203D 2000 
                    6665   @m68kde~1_68:
000041DC  0D0A 5352 6666          dc.b      13,10,83,82,32,61,32,0
000041E0  203D 2000 
                    6667   @m68kde~1_69:
000041E4  0D0A 496C 6668          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000041E8  6C65 6761 
000041EC  6C20 5265 
000041F0  67        
000041F1  6973 7465 6669          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000041F5  723A 2055 
000041F9  7365 2041 
000041FD  30        
000041FE  2D41 372C 6670          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004202  2044 302D 
00004206  4437 2C20 
0000420A  5353 50   
0000420D  2C20 5553 6671          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004211  502C 2050 
00004215  4320 6F72 
00004219  2053      
0000421B  520D 0A00 6672          dc.b      82,13,10,0
                    6673   @m68kde~1_70:
00004220  0D0A 0D0A 6674          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004224  4E75 6D20 
00004228  2020 2020 
0000422C  4164      
0000422E  6472 6573 6675          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004232  7320 2020 
00004236  2020 2049 
0000423A  6E        
0000423B  7374 7275 6676          dc.b      115,116,114,117,99,116,105,111,110,0
0000423F  6374 696F 
00004243  6E00      
                    6677   @m68kde~1_71:
00004246  0D0A 2D2D 6678          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000424A  2D20 2020 
0000424E  2020 2D2D 
00004252  2D2D 2D   
00004255  2D2D 2D2D 6679          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004259  2020 2020 
0000425D  2D2D 2D2D 
00004261  2D2D 2D   
00004264  2D2D 2D2D 6680          dc.b      45,45,45,45,0
00004268  00        
                    6681   @m68kde~1_72:
0000426A  0D0A 4E6F 6682          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000426E  2042 7265 
00004272  616B 506F 
00004276  69        
00004277  6E74 7320 6683          dc.b      110,116,115,32,83,101,116,0
0000427B  5365 7400 
                    6684   @m68kde~1_73:
00004280  0D0A 2533 6685          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004284  6420 2020 
00004288  2020 2425 
0000428C  3038 78   
0000428F  00        6686          dc.b      0
                    6687   @m68kde~1_74:
00004290  0D0A 4E75 6688          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004294  6D20 2020 
00004298  2020 4164 
0000429C  6472      
0000429E  6573 7300 6689          dc.b      101,115,115,0
                    6690   @m68kde~1_75:
000042A2  0D0A 2D2D 6691          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000042A6  2D20 2020 
000042AA  2020 2D2D 
000042AE  2D2D 2D   
000042B1  2D2D 2D2D 6692          dc.b      45,45,45,45,0
000042B5  00        
                    6693   @m68kde~1_76:
000042B6  0D0A 4E6F 6694          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000042BA  2057 6174 
000042BE  6368 506F 
000042C2  69        
000042C3  6E74 7320 6695          dc.b      110,116,115,32,83,101,116,0
000042C7  5365 7400 
                    6696   @m68kde~1_77:
000042CC  0D0A 456E 6697          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000042D0  7465 7220 
000042D4  4272 6561 
000042D8  6B        
000042D9  2050 6F69 6698          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000042DD  6E74 204E 
000042E1  756D 6265 
000042E5  72        
000042E6  3A20 00   6699          dc.b      58,32,0
                    6700   @m68kde~1_78:
000042EA  0D0A 496C 6701          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000042EE  6C65 6761 
000042F2  6C20 5261 
000042F6  6E        
000042F7  6765 203A 6702          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000042FB  2055 7365 
000042FF  2030 202D 
00004303  2037      
00004305  00        6703          dc.b      0
                    6704   @m68kde~1_79:
00004306  0D0A 4272 6705          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000430A  6561 6B20 
0000430E  506F 696E 
00004312  74        
00004313  2043 6C65 6706          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004317  6172 6564 
0000431B  2E2E 2E2E 
0000431F  2E        
00004320  0D0A 00   6707          dc.b      13,10,0
                    6708   @m68kde~1_80:
00004324  0D0A 4272 6709          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004328  6561 6B20 
0000432C  506F 696E 
00004330  74        
00004331  2077 6173 6710          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004335  6E27 7420 
00004339  5365 742E 
0000433D  2E        
0000433E  2E2E 2E00 6711          dc.b      46,46,46,0
                    6712   @m68kde~1_81:
00004342  0D0A 456E 6713          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004346  7465 7220 
0000434A  5761 7463 
0000434E  68        
0000434F  2050 6F69 6714          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004353  6E74 204E 
00004357  756D 6265 
0000435B  72        
0000435C  3A20 00   6715          dc.b      58,32,0
                    6716   @m68kde~1_82:
00004360  0D0A 5761 6717          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004364  7463 6820 
00004368  506F 696E 
0000436C  74        
0000436D  2043 6C65 6718          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004371  6172 6564 
00004375  2E2E 2E2E 
00004379  2E        
0000437A  0D0A 00   6719          dc.b      13,10,0
                    6720   @m68kde~1_83:
0000437E  0D0A 5761 6721          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004382  7463 6820 
00004386  506F 696E 
0000438A  74        
0000438B  2057 6173 6722          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000438F  206E 6F74 
00004393  2053 6574 
00004397  2E        
00004398  2E2E 2E2E 6723          dc.b      46,46,46,46,0
0000439C  00        
                    6724   @m68kde~1_84:
0000439E  0D0A 4E6F 6725          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000043A2  2046 5245 
000043A6  4520 4272 
000043AA  6561      
000043AC  6B20 506F 6726          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000043B0  696E 7473 
000043B4  2E2E 2E2E 
000043B8  2E        
000043B9  00        6727          dc.b      0
                    6728   @m68kde~1_85:
000043BA  0D0A 4272 6729          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000043BE  6561 6B20 
000043C2  506F 696E 
000043C6  74        
000043C7  2041 6464 6730          dc.b      32,65,100,100,114,101,115,115,58,32,0
000043CB  7265 7373 
000043CF  3A20 00   
                    6731   @m68kde~1_86:
000043D2  0D0A 4572 6732          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000043D6  726F 7220 
000043DA  3A20 4272 
000043DE  65        
000043DF  616B 2050 6733          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000043E3  6F69 6E74 
000043E7  7320 4341 
000043EB  4E        
000043EC  4E4F 5420 6734          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000043F0  6265 2073 
000043F4  6574 2061 
000043F8  74        
000043F9  204F 4444 6735          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000043FD  2061 6464 
00004401  7265 7373 
00004405  65        
00004406  7300      6736          dc.b      115,0
                    6737   @m68kde~1_87:
00004408  0D0A 4572 6738          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000440C  726F 7220 
00004410  3A20 4272 
00004414  65        
00004415  616B 2050 6739          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004419  6F69 6E74 
0000441D  7320 4341 
00004421  4E        
00004422  4E4F 5420 6740          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004426  6265 2073 
0000442A  6574 2066 
0000442E  6F        
0000442F  7220 524F 6741          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004433  4D20 696E 
00004437  2052 616E 
0000443B  67        
0000443C  6520 3A20 6742          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004440  5B24 302D 
00004444  2430 3030 
00004448  3037 46   
0000444B  4646 5D00 6743          dc.b      70,70,93,0
                    6744   @m68kde~1_88:
00004450  0D0A 4572 6745          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004454  726F 723A 
00004458  2042 7265 
0000445C  61        
0000445D  6B20 506F 6746          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004461  696E 7420 
00004465  416C 7265 
00004469  6164 7920 6747          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000446D  4578 6973 
00004471  7473 2061 
00004475  74        
00004476  2041 6464 6748          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000447A  7265 7373 
0000447E  203A 2025 
00004482  30        
00004483  3878 0D0A 6749          dc.b      56,120,13,10,0
00004487  00        
                    6750   @m68kde~1_89:
00004488  0D0A 4272 6751          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000448C  6561 6B20 
00004490  506F 696E 
00004494  74        
00004495  2053 6574 6752          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004499  2061 7420 
0000449D  4164 6472 
000044A1  65        
000044A2  7373 3A20 6753          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000044A6  5B24 2530 
000044AA  3878 5D00 
                    6754   @m68kde~1_90:
000044AE  0D0A 4E6F 6755          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000044B2  2046 5245 
000044B6  4520 5761 
000044BA  7463      
000044BC  6820 506F 6756          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000044C0  696E 7473 
000044C4  2E2E 2E2E 
000044C8  2E        
000044C9  00        6757          dc.b      0
                    6758   @m68kde~1_91:
000044CA  0D0A 5761 6759          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000044CE  7463 6820 
000044D2  506F 696E 
000044D6  74        
000044D7  2041 6464 6760          dc.b      32,65,100,100,114,101,115,115,58,32,0
000044DB  7265 7373 
000044DF  3A20 00   
                    6761   @m68kde~1_92:
000044E2  0D0A 4572 6762          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000044E6  726F 723A 
000044EA  2057 6174 
000044EE  63        
000044EF  6820 506F 6763          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000044F3  696E 7420 
000044F7  416C 7265 
000044FB  6164 7920 6764          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000044FF  5365 7420 
00004503  6174 2041 
00004507  64        
00004508  6472 6573 6765          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000450C  7320 3A20 
00004510  2530 3878 
00004514  0D        
00004515  0A00      6766          dc.b      10,0
                    6767   @m68kde~1_93:
00004518  0D0A 5761 6768          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000451C  7463 6820 
00004520  506F 696E 
00004524  74        
00004525  2053 6574 6769          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004529  2061 7420 
0000452D  4164 6472 
00004531  65        
00004532  7373 3A20 6770          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004536  5B24 2530 
0000453A  3878 5D00 
                    6771   @m68kde~1_94:
0000453E  0D0A 0D0A 6772          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004542  0D0A 0D0A 
00004546  4042 5245 
0000454A  414B 50   
0000454D  4F49 4E54 6773          dc.b      79,73,78,84,0
00004551  00        
                    6774   @m68kde~1_95:
00004552  0D0A 5369 6775          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004556  6E67 6C65 
0000455A  2053 7465 
0000455E  70        
0000455F  203A 205B 6776          dc.b      32,58,32,91,79,78,93,0
00004563  4F4E 5D00 
                    6777   @m68kde~1_96:
00004568  0D0A 4272 6778          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000456C  6561 6B50 
00004570  6F69 6E74 
00004574  73        
00004575  203A 205B 6779          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004579  456E 6162 
0000457D  6C65 645D 
00004581  00        
                    6780   @m68kde~1_97:
00004582  0D0A 5072 6781          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004586  6573 7320 
0000458A  3C45 5343 
0000458E  3E20      
00004590  746F 2052 6782          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004594  6573 756D 
00004598  6520 5573 
0000459C  6572 2050 6783          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
000045A0  726F 6772 
000045A4  616D 0D0A 
000045A8  00        
                    6784   @m68kde~1_98:
000045AA  0D0A 556E 6785          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
000045AE  6B6E 6F77 
000045B2  6E20 436F 
000045B6  6D        
000045B7  6D61 6E64 6786          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000045BB  2E2E 2E2E 
000045BF  2E0D 0A00 
                    6787   @m68kde~1_99:
000045C4  0D0A 5072 6788          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000045C8  6F67 7261 
000045CC  6D20 456E 
000045D0  64        
000045D1  6564 2028 6789          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000045D5  5452 4150 
000045D9  2023 3135 
000045DD  292E      
000045DF  2E2E 2E00 6790          dc.b      46,46,46,0
                    6791   @m68kde~1_100:
000045E4  0D0A 4B69 6792          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000045E8  6C6C 2041 
000045EC  6C6C 2042 
000045F0  72        
000045F1  6561 6B20 6793          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000045F5  506F 696E 
000045F9  7473 2E2E 
000045FD  2E        
000045FE  2879 2F6E 6794          dc.b      40,121,47,110,41,63,0
00004602  293F 00   
                    6795   @m68kde~1_101:
00004606  0D0A 4B69 6796          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000460A  6C6C 2041 
0000460E  6C6C 2057 
00004612  61        
00004613  7463 6820 6797          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004617  506F 696E 
0000461B  7473 2E2E 
0000461F  2E        
00004620  2879 2F6E 6798          dc.b      40,121,47,110,41,63,0
00004624  293F 00   
                    6799   @m68kde~1_102:
00004628  0D0A 2D2D 6800          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000462C  2D2D 2D2D 
00004630  2D2D 2D2D 
00004634  2D2D 2D   
00004637  2D2D 2D2D 6801          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000463B  2D2D 2D2D 
0000463F  2D2D 2D2D 
00004643  2D2D 2D   
00004646  2D2D 2D2D 6802          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000464A  2D2D 2D2D 
0000464E  2D2D 2D2D 
00004652  2D2D 2D   
00004655  2D2D 2D2D 6803          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004659  2D2D 2D2D 
0000465D  2D2D 2D2D 
00004661  2D2D 2D   
00004664  2D2D 2D2D 6804          dc.b      45,45,45,45,45,45,0
00004668  2D2D 00   
                    6805   @m68kde~1_103:
0000466C  0D0A 2020 6806          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004670  4465 6275 
00004674  6767 6572 
00004678  20        
00004679  436F 6D6D 6807          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000467D  616E 6420 
00004681  5375 6D6D 
00004685  6172 7900 6808          dc.b      97,114,121,0
                    6809   @m68kde~1_104:
0000468A  0D0A 2020 6810          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000468E  2E28 7265 
00004692  6729 2020 
00004696  2020      
00004698  2020 202D 6811          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000469C  2043 6861 
000046A0  6E67 6520 
000046A4  5265      
000046A6  6769 7374 6812          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
000046AA  6572 733A 
000046AE  2065 2E67 
000046B2  2041 302D 6813          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000046B6  4137 2C44 
000046BA  302D 4437 
000046BE  2C50 43   
000046C1  2C53 5350 6814          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000046C5  2C55 5350 
000046C9  2C53 5200 
                    6815   @m68kde~1_105:
000046CE  0D0A 2020 6816          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000046D2  4244 2F42 
000046D6  532F 4243 
000046DA  2F42 4B   
000046DD  2020 2D20 6817          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000046E1  4272 6561 
000046E5  6B20 506F 
000046E9  69        
000046EA  6E74 3A20 6818          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000046EE  4469 7370 
000046F2  6C61 792F 
000046F6  53        
000046F7  6574 2F43 6819          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000046FB  6C65 6172 
000046FF  2F4B 696C 
00004703  6C        
00004704  00        6820          dc.b      0
                    6821   @m68kde~1_106:
00004706  0D0A 2020 6822          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
0000470A  4320 2020 
0000470E  2020 2020 
00004712  2020 20   
00004715  2020 2D20 6823          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004719  436F 7079 
0000471D  2050 726F 
00004721  67        
00004722  7261 6D20 6824          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004726  6672 6F6D 
0000472A  2046 6C61 
0000472E  73        
0000472F  6820 746F 6825          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004733  204D 6169 
00004737  6E20 4D65 
0000473B  6D        
0000473C  6F72 7900 6826          dc.b      111,114,121,0
                    6827   @m68kde~1_107:
00004740  0D0A 2020 6828          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004744  4420 2020 
00004748  2020 2020 
0000474C  2020 20   
0000474F  2020 2D20 6829          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004753  4475 6D70 
00004757  204D 656D 
0000475B  6F        
0000475C  7279 2043 6830          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00004760  6F6E 7465 
00004764  6E74 7320 
00004768  746F 2053 6831          dc.b      116,111,32,83,99,114,101,101,110,0
0000476C  6372 6565 
00004770  6E00      
                    6832   @m68kde~1_108:
00004772  0D0A 2020 6833          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004776  4520 2020 
0000477A  2020 2020 
0000477E  2020 20   
00004781  2020 2D20 6834          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004785  456E 7465 
00004789  7220 5374 
0000478D  72        
0000478E  696E 6720 6835          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004792  696E 746F 
00004796  204D 656D 
0000479A  6F72 7900 6836          dc.b      111,114,121,0
                    6837   @m68kde~1_109:
0000479E  0D0A 2020 6838          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
000047A2  4620 2020 
000047A6  2020 2020 
000047AA  2020 20   
000047AD  2020 2D20 6839          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
000047B1  4669 6C6C 
000047B5  204D 656D 
000047B9  6F        
000047BA  7279 2077 6840          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000047BE  6974 6820 
000047C2  4461 7461 
000047C6  00        
                    6841   @m68kde~1_110:
000047C8  0D0A 2020 6842          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000047CC  4720 2020 
000047D0  2020 2020 
000047D4  2020 20   
000047D7  2020 2D20 6843          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000047DB  476F 2050 
000047DF  726F 6772 
000047E3  61        
000047E4  6D20 5374 6844          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000047E8  6172 7469 
000047EC  6E67 2061 
000047F0  74        
000047F1  2041 6464 6845          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000047F5  7265 7373 
000047F9  3A20 2425 
000047FD  30        
000047FE  3858 00   6846          dc.b      56,88,0
                    6847   @m68kde~1_111:
00004802  0D0A 2020 6848          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00004806  4C20 2020 
0000480A  2020 2020 
0000480E  2020 20   
00004811  2020 2D20 6849          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004815  4C6F 6164 
00004819  2050 726F 
0000481D  67        
0000481E  7261 6D20 6850          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004822  282E 4845 
00004826  5820 6669 
0000482A  6C        
0000482B  6529 2066 6851          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000482F  726F 6D20 
00004833  4C61 7074 
00004837  6F        
00004838  7000      6852          dc.b      112,0
                    6853   @m68kde~1_112:
0000483A  0D0A 2020 6854          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000483E  4D20 2020 
00004842  2020 2020 
00004846  2020 20   
00004849  2020 2D20 6855          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000484D  4D65 6D6F 
00004851  7279 2045 
00004855  78        
00004856  616D 696E 6856          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000485A  6520 616E 
0000485E  6420 4368 
00004862  61        
00004863  6E67 6500 6857          dc.b      110,103,101,0
                    6858   @m68kde~1_113:
00004868  0D0A 2020 6859          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000486C  5020 2020 
00004870  2020 2020 
00004874  2020 20   
00004877  2020 2D20 6860          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000487B  5072 6F67 
0000487F  7261 6D20 
00004883  46        
00004884  6C61 7368 6861          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004888  204D 656D 
0000488C  6F72 7920 
00004890  7769 7468 6862          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004894  2055 7365 
00004898  7220 5072 
0000489C  6F67 7261 6863          dc.b      111,103,114,97,109,0
000048A0  6D00      
                    6864   @m68kde~1_114:
000048A2  0D0A 2020 6865          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
000048A6  5220 2020 
000048AA  2020 2020 
000048AE  2020 20   
000048B1  2020 2D20 6866          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000048B5  4469 7370 
000048B9  6C61 7920 
000048BD  36        
000048BE  3830 3030 6867          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000048C2  2052 6567 
000048C6  6973 7465 
000048CA  72        
000048CB  7300      6868          dc.b      115,0
                    6869   @m68kde~1_115:
000048CE  0D0A 2020 6870          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000048D2  5320 2020 
000048D6  2020 2020 
000048DA  2020 20   
000048DD  2020 2D20 6871          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000048E1  546F 6767 
000048E5  6C65 204F 
000048E9  4E        
000048EA  2F4F 4646 6872          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000048EE  2053 696E 
000048F2  676C 6520 
000048F6  53        
000048F7  7465 7020 6873          dc.b      116,101,112,32,77,111,100,101,0
000048FB  4D6F 6465 
000048FF  00        
                    6874   @m68kde~1_116:
00004900  0D0A 2020 6875          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00004904  544D 2020 
00004908  2020 2020 
0000490C  2020 20   
0000490F  2020 2D20 6876          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004913  5465 7374 
00004917  204D 656D 
0000491B  6F        
0000491C  7279 00   6877          dc.b      114,121,0
                    6878   @m68kde~1_117:
00004920  0D0A 2020 6879          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004924  5453 2020 
00004928  2020 2020 
0000492C  2020 20   
0000492F  2020 2D20 6880          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004933  5465 7374 
00004937  2053 7769 
0000493B  74        
0000493C  6368 6573 6881          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00004940  3A20 5357 
00004944  372D 3000 
                    6882   @m68kde~1_118:
00004948  0D0A 2020 6883          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000494C  5444 2020 
00004950  2020 2020 
00004954  2020 20   
00004957  2020 2D20 6884          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000495B  5465 7374 
0000495F  2044 6973 
00004963  70        
00004964  6C61 7973 6885          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004968  3A20 4C45 
0000496C  4473 2061 
00004970  6E        
00004971  6420 372D 6886          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004975  5365 676D 
00004979  656E 7400 
                    6887   @m68kde~1_119:
0000497E  0D0A 2020 6888          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004982  5744 2F57 
00004986  532F 5743 
0000498A  2F57 4B   
0000498D  2020 2D20 6889          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00004991  5761 7463 
00004995  6820 506F 
00004999  696E      
0000499B  743A 2044 6890          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000499F  6973 706C 
000049A3  6179 2F53 
000049A7  65        
000049A8  742F 436C 6891          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
000049AC  6561 722F 
000049B0  4B69 6C6C 
000049B4  00        
                    6892   @m68kde~1_120:
000049B6  0D0A 2300 6893          dc.b      13,10,35,0
                    6894   @m68kde~1_121:
000049BA  0D0A 5072 6895          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000049BE  6F67 7261 
000049C2  6D20 5275 
000049C6  6E        
000049C7  6E69 6E67 6896          dc.b      110,105,110,103,46,46,46,46,46,0
000049CB  2E2E 2E2E 
000049CF  2E00      
                    6897   @m68kde~1_122:
000049D2  0D0A 5072 6898          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000049D6  6573 7320 
000049DA  3C52 4553 
000049DE  4554      
000049E0  3E20 6275 6899          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000049E4  7474 6F6E 
000049E8  203C 4B65 
000049EC  79        
000049ED  303E 206F 6900          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000049F1  6E20 4445 
000049F5  3120 746F 
000049F9  2073      
000049FB  746F 7000 6901          dc.b      116,111,112,0
                    6902   @m68kde~1_123:
00004A00  0D0A 4572 6903          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00004A04  726F 723A 
00004A08  2050 7265 
00004A0C  73        
00004A0D  7320 2747 6904          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00004A11  2720 6669 
00004A15  7273 7420 
00004A19  74        
00004A1A  6F20 7374 6905          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00004A1E  6172 7420 
00004A22  7072 6F67 
00004A26  7261 6D00 6906          dc.b      114,97,109,0
                    6907   @m68kde~1_124:
00004A2A  0D0A 5369 6908          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004A2E  6E67 6C65 
00004A32  2053 7465 
00004A36  70        
00004A37  2020 3A5B 6909          dc.b      32,32,58,91,79,78,93,0
00004A3B  4F4E 5D00 
                    6910   @m68kde~1_125:
00004A40  0D0A 5072 6911          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004A44  6573 7320 
00004A48  2747 2720 
00004A4C  74        
00004A4D  6F20 5472 6912          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00004A51  6163 6520 
00004A55  5072 6F67 
00004A59  72        
00004A5A  616D 2066 6913          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00004A5E  726F 6D20 
00004A62  6164 6472 
00004A66  6573 7320 6914          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004A6A  2425 582E 
00004A6E  2E2E 2E2E 
00004A72  00        
                    6915   @m68kde~1_126:
00004A74  0D0A 5075 6916          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004A78  7368 203C 
00004A7C  5245 5345 
00004A80  5420      
00004A82  4275 7474 6917          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004A86  6F6E 3E20 
00004A8A  746F 2053 
00004A8E  74        
00004A8F  6F70 2E2E 6918          dc.b      111,112,46,46,46,46,46,0
00004A93  2E2E 2E00 
                    6919   @m68kde~1_127:
00004A98  0D0A 5369 6920          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004A9C  6E67 6C65 
00004AA0  2053 7465 
00004AA4  70        
00004AA5  203A 205B 6921          dc.b      32,58,32,91,79,70,70,93,0
00004AA9  4F46 465D 
00004AAD  00        
                    6922   @m68kde~1_128:
00004AAE  0D0A 4272 6923          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004AB2  6561 6B20 
00004AB6  506F 696E 
00004ABA  74        
00004ABB  7320 3A5B 6924          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00004ABF  456E 6162 
00004AC3  6C65 645D 
00004AC7  00        
                    6925   @m68kde~1_129:
00004AC8  0D0A 5072 6926          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004ACC  6573 7320 
00004AD0  3C45 5343 
00004AD4  3E20      
00004AD6  746F 2052 6927          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004ADA  6573 756D 
00004ADE  6520 5573 
00004AE2  6572 2050 6928          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00004AE6  726F 6772 
00004AEA  616D 2E2E 
00004AEE  2E        
00004AEF  2E2E 00   6929          dc.b      46,46,0
                    6930   @m68kde~1_130:
00004AF2  0D0A 5369 6931          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004AF6  6E67 6C65 
00004AFA  2053 7465 
00004AFE  70        
00004AFF  2020 3A5B 6932          dc.b      32,32,58,91,79,70,70,93,0
00004B03  4F46 465D 
00004B07  00        
                    6933   @m68kde~1_131:
00004B08  0D0A 0D0A 6934          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004B0C  5072 6F67 
00004B10  7261 6D20 
00004B14  41        
00004B15  424F 5254 6935          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004B19  2021 2121 
00004B1D  2121 210D 
00004B21  0A00      
                    6936   @m68kde~1_132:
00004B24  2573 0D0A 6937          dc.b      37,115,13,10,0
00004B28  00        
                    6938   @m68kde~1_133:
00004B2A  0D0A 0D0A 6939          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00004B2E  5072 6F67 
00004B32  7261 6D20 
00004B36  41        
00004B37  424F 5254 6940          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004B3B  2021 2121 
00004B3F  2121 00   
                    6941   @m68kde~1_134:
00004B42  0D0A 556E 6942          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004B46  6861 6E64 
00004B4A  6C65 6420 
00004B4E  49        
00004B4F  6E74 6572 6943          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004B53  7275 7074 
00004B57  3A20 4952 
00004B5B  5125 6420 6944          dc.b      81,37,100,32,33,33,33,33,33,0
00004B5F  2121 2121 
00004B63  2100      
                    6945   @m68kde~1_135:
00004B66  4144 4452 6946          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004B6A  4553 5320 
00004B6E  4552 524F 
00004B72  523A 20   
00004B75  3136 206F 6947          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004B79  7220 3332 
00004B7D  2042 6974 
00004B81  2054      
00004B83  7261 6E73 6948          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004B87  6665 7220 
00004B8B  746F 2F66 
00004B8F  726F 6D20 6949          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004B93  616E 204F 
00004B97  4444 2041 
00004B9B  64        
00004B9C  6472 6573 6950          dc.b      100,114,101,115,115,46,46,46,46,0
00004BA0  732E 2E2E 
00004BA4  2E00      
                    6951   @m68kde~1_136:
00004BA6  556E 6861 6952          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004BAA  6E64 6C65 
00004BAE  6420 5472 
00004BB2  6170 2021 6953          dc.b      97,112,32,33,33,33,33,33,0
00004BB6  2121 2121 
00004BBA  00        
                    6954   @m68kde~1_137:
00004BBC  4255 5320 6955          dc.b      66,85,83,32,69,114,114,111,114,33,0
00004BC0  4572 726F 
00004BC4  7221 00   
                    6956   @m68kde~1_138:
00004BC8  4144 4452 6957          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00004BCC  4553 5320 
00004BD0  4572 726F 
00004BD4  7221      
00004BD6  00        6958          dc.b      0
                    6959   @m68kde~1_139:
00004BD8  494C 4C45 6960          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00004BDC  4741 4C20 
00004BE0  494E 5354 
00004BE4  5255 43   
00004BE7  5449 4F4E 6961          dc.b      84,73,79,78,0
00004BEB  00        
                    6962   @m68kde~1_140:
00004BEC  4449 5649 6963          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00004BF0  4445 2042 
00004BF4  5920 5A45 
00004BF8  524F 00   
                    6964   @m68kde~1_141:
00004BFC  2743 484B 6965          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00004C00  2720 494E 
00004C04  5354 5255 
00004C08  4354 49   
00004C0B  4F4E 00   6966          dc.b      79,78,0
                    6967   @m68kde~1_142:
00004C0E  5452 4150 6968          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004C12  5620 494E 
00004C16  5354 5255 
00004C1A  4354 49   
00004C1D  4F4E 00   6969          dc.b      79,78,0
                    6970   @m68kde~1_143:
00004C20  5052 4956 6971          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004C24  494C 4547 
00004C28  4520 5649 
00004C2C  4F4C 41   
00004C2F  5449 4F4E 6972          dc.b      84,73,79,78,0
00004C33  00        
                    6973   @m68kde~1_144:
00004C34  554E 494E 6974          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004C38  4954 4941 
00004C3C  4C49 5345 
00004C40  4420 49   
00004C43  5251 00   6975          dc.b      82,81,0
                    6976   @m68kde~1_145:
00004C46  5350 5552 6977          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004C4A  494F 5553 
00004C4E  2049 5251 
00004C52  00        
                    6978   @m68kde~1_146:
00004C54  0D0A 5374 6979          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004C58  6172 7420 
00004C5C  4164 6472 
00004C60  65        
00004C61  7373 2069 6980          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004C65  6E20 4D65 
00004C69  6D6F 7279 
00004C6D  3A20 00   6981          dc.b      58,32,0
                    6982   @m68kde~1_147:
00004C70  0D0A 456E 6983          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004C74  7465 7220 
00004C78  5374 7269 
00004C7C  6E        
00004C7D  6720 2845 6984          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00004C81  5343 2074 
00004C85  6F20 656E 
00004C89  64        
00004C8A  2920 3A00 6985          dc.b      41,32,58,0
                    6986   @m68kde~1_148:
00004C8E  0D0A 4368 6987          dc.b      13,10,67,104,111,111,115,101,32,116,104,101
00004C92  6F6F 7365 
00004C96  2074 6865 
00004C9A  2064 6174 6988          dc.b      32,100,97,116,97,32,116,121,112,101,32,121,111
00004C9E  6120 7479 
00004CA2  7065 2079 
00004CA6  6F        
00004CA7  7520 7761 6989          dc.b      117,32,119,97,110,116,32,116,111,32,116,101
00004CAB  6E74 2074 
00004CAF  6F20 7465 
00004CB3  7374 0A00 6990          dc.b      115,116,10,0
                    6991   @m68kde~1_149:
00004CB8  412D 4259 6992          dc.b      65,45,66,89,84,69,83,32,32,32,32,66,45,87,79
00004CBC  5445 5320 
00004CC0  2020 2042 
00004CC4  2D57 4F   
00004CC7  5244 5320 6993          dc.b      82,68,83,32,32,32,32,67,45,76,79,78,71,32,87
00004CCB  2020 2043 
00004CCF  2D4C 4F4E 
00004CD3  4720 57   
00004CD6  4F52 4453 6994          dc.b      79,82,68,83,10,0
00004CDA  0A00      
                    6995   @m68kde~1_150:
00004CDC  496E 7075 6996          dc.b      73,110,112,117,116,32,78,111,116,32,86,97,108
00004CE0  7420 4E6F 
00004CE4  7420 5661 
00004CE8  6C        
00004CE9  6964 0A00 6997          dc.b      105,100,10,0
                    6998   @m68kde~1_151:
00004CEE  0D0A 4675 6999          dc.b      13,10,70,117,110,99,116,105,111,110,32,69,120
00004CF2  6E63 7469 
00004CF6  6F6E 2045 
00004CFA  78        
00004CFB  6365 7074 7000          dc.b      99,101,112,116,105,111,110,32,111,102,32,87
00004CFF  696F 6E20 
00004D03  6F66 2057 
00004D07  726F 6E67 7001          dc.b      114,111,110,103,32,68,97,116,97,32,116,121,112
00004D0B  2044 6174 
00004D0F  6120 7479 
00004D13  70        
00004D14  6500      7002          dc.b      101,0
                    7003   @m68kde~1_152:
00004D16  0D0A 4461 7004          dc.b      13,10,68,97,116,97,32,79,112,116,105,111,110
00004D1A  7461 204F 
00004D1E  7074 696F 
00004D22  6E        
00004D23  2043 686F 7005          dc.b      32,67,104,111,111,115,101,110,46,32,35,32,111
00004D27  6F73 656E 
00004D2B  2E20 2320 
00004D2F  6F        
00004D30  6620 6269 7006          dc.b      102,32,98,105,116,115,32,105,115,32,37,105,10
00004D34  7473 2069 
00004D38  7320 2569 
00004D3C  0A        
00004D3D  00        7007          dc.b      0
                    7008   @m68kde~1_153:
00004D3E  0D0A 4368 7009          dc.b      13,10,67,104,111,111,115,101,32,116,104,101
00004D42  6F6F 7365 
00004D46  2074 6865 
00004D4A  2064 6174 7010          dc.b      32,100,97,116,97,32,112,97,116,116,101,114,110
00004D4E  6120 7061 
00004D52  7474 6572 
00004D56  6E        
00004D57  2079 6F75 7011          dc.b      32,121,111,117,32,119,97,110,116,32,116,111
00004D5B  2077 616E 
00004D5F  7420 746F 
00004D63  2075 7365 7012          dc.b      32,117,115,101,10,0
00004D67  0A00      
                    7013   @m68kde~1_154:
00004D6A  412D 3535 7014          dc.b      65,45,53,53,32,32,32,32,66,45,65,65,32,32,32
00004D6E  2020 2020 
00004D72  422D 4141 
00004D76  2020 20   
00004D79  2043 2D46 7015          dc.b      32,67,45,70,70,32,32,32,32,68,45,48,48,10,0
00004D7D  4620 2020 
00004D81  2044 2D30 
00004D85  300A 00   
                    7016   @m68kde~1_155:
00004D88  0D0A 496E 7017          dc.b      13,10,73,110,112,117,116,32,78,111,116,32,86
00004D8C  7075 7420 
00004D90  4E6F 7420 
00004D94  56        
00004D95  616C 6964 7018          dc.b      97,108,105,100,10,0
00004D99  0A00      
                    7019   @m68kde~1_156:
00004D9C  0D0A 4675 7020          dc.b      13,10,70,117,99,110,116,105,111,110,32,69,120
00004DA0  636E 7469 
00004DA4  6F6E 2045 
00004DA8  78        
00004DA9  6365 7074 7021          dc.b      99,101,112,116,105,111,110,32,111,102,32,87
00004DAD  696F 6E20 
00004DB1  6F66 2057 
00004DB5  726F 6E67 7022          dc.b      114,111,110,103,32,68,97,116,97,32,80,97,116
00004DB9  2044 6174 
00004DBD  6120 5061 
00004DC1  74        
00004DC2  7465 726E 7023          dc.b      116,101,114,110,0
00004DC6  00        
                    7024   @m68kde~1_157:
00004DC8  0D0A 4461 7025          dc.b      13,10,68,97,116,97,32,80,97,116,116,101,114
00004DCC  7461 2050 
00004DD0  6174 7465 
00004DD4  72        
00004DD5  6E20 4368 7026          dc.b      110,32,67,104,111,111,115,101,110,46,32,84,104
00004DD9  6F6F 7365 
00004DDD  6E2E 2054 
00004DE1  68        
00004DE2  6520 5061 7027          dc.b      101,32,80,97,116,116,101,114,110,32,105,115
00004DE6  7474 6572 
00004DEA  6E20 6973 
00004DEE  2025 3032 7028          dc.b      32,37,48,50,88,10,0
00004DF2  580A 00   
                    7029   @m68kde~1_158:
00004DF6  0D0A 506C 7030          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004DFA  6561 7365 
00004DFE  2065 6E74 
00004E02  65        
00004E03  7220 5374 7031          dc.b      114,32,83,116,97,114,116,32,65,100,100,114,101
00004E07  6172 7420 
00004E0B  4164 6472 
00004E0F  65        
00004E10  7373 0A00 7032          dc.b      115,115,10,0
                    7033   @m68kde~1_159:
00004E14  0D0A 5374 7034          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004E18  6172 7420 
00004E1C  4164 6472 
00004E20  65        
00004E21  7373 206D 7035          dc.b      115,115,32,109,117,115,116,32,62,32,48,120,48
00004E25  7573 7420 
00004E29  3E20 3078 
00004E2D  30        
00004E2E  3830 3230 7036          dc.b      56,48,50,48,48,48,48,0
00004E32  3030 3000 
                    7037   @m68kde~1_160:
00004E36  0D0A 466F 7038          dc.b      13,10,70,111,114,32,100,97,116,97,32,116,121
00004E3A  7220 6461 
00004E3E  7461 2074 
00004E42  79        
00004E43  7065 2057 7039          dc.b      112,101,32,87,79,82,68,83,32,38,32,76,79,78
00004E47  4F52 4453 
00004E4B  2026 204C 
00004E4F  4F4E      
00004E51  4720 574F 7040          dc.b      71,32,87,79,82,68,83,44,32,97,100,100,114,101
00004E55  5244 532C 
00004E59  2061 6464 
00004E5D  7265      
00004E5F  7373 206D 7041          dc.b      115,115,32,109,117,115,116,32,98,101,32,101
00004E63  7573 7420 
00004E67  6265 2065 
00004E6B  7665 6E00 7042          dc.b      118,101,110,0
                    7043   @m68kde~1_161:
00004E70  0D0A 506C 7044          dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
00004E74  6561 7365 
00004E78  2065 6E74 
00004E7C  65        
00004E7D  7220 456E 7045          dc.b      114,32,69,110,100,32,65,100,100,114,101,115
00004E81  6420 4164 
00004E85  6472 6573 
00004E89  730A 00   7046          dc.b      115,10,0
                    7047   @m68kde~1_162:
00004E8C  456E 6420 7048          dc.b      69,110,100,32,65,100,100,114,101,115,115,32
00004E90  4164 6472 
00004E94  6573 7320 
00004E98  6D75 7374 7049          dc.b      109,117,115,116,32,60,32,48,120,48,56,48,51
00004E9C  203C 2030 
00004EA0  7830 3830 
00004EA4  33        
00004EA5  3030 3030 7050          dc.b      48,48,48,48,10,0
00004EA9  0A00      
                    7051   @m68kde~1_163:
00004EAC  466F 7220 7052          dc.b      70,111,114,32,100,97,116,97,32,116,121,112,101
00004EB0  6461 7461 
00004EB4  2074 7970 
00004EB8  65        
00004EB9  2057 4F52 7053          dc.b      32,87,79,82,68,83,32,38,32,76,79,78,71,32,87
00004EBD  4453 2026 
00004EC1  204C 4F4E 
00004EC5  4720 57   
00004EC8  4F52 4453 7054          dc.b      79,82,68,83,44,32,97,100,100,114,101,115,115
00004ECC  2C20 6164 
00004ED0  6472 6573 
00004ED4  73        
00004ED5  206D 7573 7055          dc.b      32,109,117,115,116,32,98,101,32,101,118,101
00004ED9  7420 6265 
00004EDD  2065 7665 
00004EE1  6E0A 00   7056          dc.b      110,10,0
                    7057   @m68kde~1_164:
00004EE4  0D0A 4375 7058          dc.b      13,10,67,117,114,114,101,110,116,32,80,114,111
00004EE8  7272 656E 
00004EEC  7420 5072 
00004EF0  6F        
00004EF1  6772 6573 7059          dc.b      103,114,101,115,115,58,32,65,100,100,114,101
00004EF5  733A 2041 
00004EF9  6464 7265 
00004EFD  7373 2025 7060          dc.b      115,115,32,37,48,56,120,32,87,114,105,116,101
00004F01  3038 7820 
00004F05  5772 6974 
00004F09  65        
00004F0A  2044 6174 7061          dc.b      32,68,97,116,97,32,37,48,50,88,32,82,101,97
00004F0E  6120 2530 
00004F12  3258 2052 
00004F16  6561      
00004F18  6420 4461 7062          dc.b      100,32,68,97,116,97,32,37,48,50,88,0
00004F1C  7461 2025 
00004F20  3032 5800 
                    7063   @m68kde~1_165:
00004F24  0D0A 4375 7064          dc.b      13,10,67,117,114,114,101,110,116,32,80,114,111
00004F28  7272 656E 
00004F2C  7420 5072 
00004F30  6F        
00004F31  6772 6573 7065          dc.b      103,114,101,115,115,58,32,65,100,100,114,101
00004F35  733A 2041 
00004F39  6464 7265 
00004F3D  7373 2025 7066          dc.b      115,115,32,37,48,56,120,32,87,114,105,116,101
00004F41  3038 7820 
00004F45  5772 6974 
00004F49  65        
00004F4A  2044 6174 7067          dc.b      32,68,97,116,97,32,37,48,50,88,37,48,50,88,32
00004F4E  6120 2530 
00004F52  3258 2530 
00004F56  3258 20   
00004F59  5265 6164 7068          dc.b      82,101,97,100,32,68,97,116,97,32,37,48,50,88
00004F5D  2044 6174 
00004F61  6120 2530 
00004F65  3258      
00004F67  2530 3258 7069          dc.b      37,48,50,88,0
00004F6B  00        
                    7070   @m68kde~1_166:
00004F6C  0D0A 4375 7071          dc.b      13,10,67,117,114,114,101,110,116,32,80,114,111
00004F70  7272 656E 
00004F74  7420 5072 
00004F78  6F        
00004F79  6772 6573 7072          dc.b      103,114,101,115,115,58,32,65,100,100,114,101
00004F7D  733A 2041 
00004F81  6464 7265 
00004F85  7373 2025 7073          dc.b      115,115,32,37,48,56,120,32,87,114,105,116,101
00004F89  3038 7820 
00004F8D  5772 6974 
00004F91  65        
00004F92  2044 6174 7074          dc.b      32,68,97,116,97,32,37,48,50,88,37,48,50,88,37
00004F96  6120 2530 
00004F9A  3258 2530 
00004F9E  3258 25   
00004FA1  3032 5825 7075          dc.b      48,50,88,37,48,50,88,32,82,101,97,100,32,68
00004FA5  3032 5820 
00004FA9  5265 6164 
00004FAD  2044      
00004FAF  6174 6120 7076          dc.b      97,116,97,32,37,48,50,88,37,48,50,88,37,48,50
00004FB3  2530 3258 
00004FB7  2530 3258 
00004FBB  2530 32   
00004FBE  5825 3032 7077          dc.b      88,37,48,50,88,0
00004FC2  5800      
                    7078   @m68kde~1_167:
00004FC4  0D0A 4675 7079          dc.b      13,10,70,117,99,110,116,105,111,110,32,69,120
00004FC8  636E 7469 
00004FCC  6F6E 2045 
00004FD0  78        
00004FD1  6365 7074 7080          dc.b      99,101,112,116,105,111,110,32,111,110,32,82
00004FD5  696F 6E20 
00004FD9  6F6E 2052 
00004FDD  4541 4420 7081          dc.b      69,65,68,32,97,110,100,32,87,82,73,84,69,32
00004FE1  616E 6420 
00004FE5  5752 4954 
00004FE9  4520      
00004FEB  7374 6167 7082          dc.b      115,116,97,103,101,0
00004FEF  6500      
                    7083   @m68kde~1_168:
00004FF2  0D0A 5465 7084          dc.b      13,10,84,101,115,116,32,67,111,109,112,108,101
00004FF6  7374 2043 
00004FFA  6F6D 706C 
00004FFE  65        
00004FFF  7465 642E 7085          dc.b      116,101,100,46,32,80,114,101,115,115,32,69,83
00005003  2050 7265 
00005007  7373 2045 
0000500B  53        
0000500C  4320 746F 7086          dc.b      67,32,116,111,32,65,98,111,114,116,0
00005010  2041 626F 
00005014  7274 00   
                    7087   @m68kde~1_169:
00005018  4445 312D 7088          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000501C  3638 6B20 
00005020  4275 6720 
00005024  5631      
00005026  2E37 3700 7089          dc.b      46,55,55,0
                    7090   @m68kde~1_170:
0000502A  5869 6E67 7091          dc.b      88,105,110,103,119,101,105,32,83,117,32,55,50
0000502E  7765 6920 
00005032  5375 2037 
00005036  32        
00005037  3937 3939 7092          dc.b      57,55,57,57,49,55,10,89,117,113,105,97,110,32
0000503B  3137 0A59 
0000503F  7571 6961 
00005043  6E20      
00005045  4875 2036 7093          dc.b      72,117,32,54,52,49,51,51,55,49,51,0
00005049  3431 3333 
0000504D  3731 3300 
                    7094   @m68kde~1_171:
00005052  0D0A 5275 7095          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005056  6E6E 696E 
0000505A  672E 2E2E 
0000505E  2E        
0000505F  2E00      7096          dc.b      46,0
                    7097   @m68kde~1_172:
00005062  5275 6E6E 7098          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005066  696E 672E 
0000506A  2E2E 2E2E 
0000506E  00        
                    7099   @m68kde~1_173:
00005070  4279 3A20 7100          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005074  504A 2044 
00005078  6176 6965 
0000507C  73        
0000507D  00        7101          dc.b      0
                    7102   @m68kde~1_174:
0000507E  0D0A 2573 7103          dc.b      13,10,37,115,0
00005082  00        
                    7104   @itoa_1:
00005084  2D32 3134 7105          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005088  3734 3833 
0000508C  3634 3800 
                    7106   __ctype:
00005090  0040 4040 7107          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005094  4040 4040 
00005098  4040 5050 
0000509C  5050 50   
0000509F  4040 4040 7108          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000050A3  4040 4040 
000050A7  4040 4040 
000050AB  4040 40   
000050AE  4040 40D0 7109          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000050B2  A0A0 A0A0 
000050B6  A0A0 A0A0 
000050BA  A0A0 A0A0 7110          dc.b      160,160,160,160,160,160,160,140,140,140,140
000050BE  A0A0 A08C 
000050C2  8C8C 8C   
000050C5  8C8C 8C8C 7111          dc.b      140,140,140,140,140,140,160,160,160,160,160
000050C9  8C8C A0A0 
000050CD  A0A0 A0   
000050D0  A0A0 8A8A 7112          dc.b      160,160,138,138,138,138,138,138,130,130,130
000050D4  8A8A 8A8A 
000050D8  8282 82   
000050DB  8282 8282 7113          dc.b      130,130,130,130,130,130,130,130,130,130,130
000050DF  8282 8282 
000050E3  8282 82   
000050E6  8282 8282 7114          dc.b      130,130,130,130,130,130,160,160,160,160,160
000050EA  8282 A0A0 
000050EE  A0A0 A0   
000050F1  A089 8989 7115          dc.b      160,137,137,137,137,137,137,129,129,129,129
000050F5  8989 8981 
000050F9  8181 81   
000050FC  8181 8181 7116          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005100  8181 8181 
00005104  8181 81   
00005107  8181 8181 7117          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000510B  81A0 A0A0 
0000510F  A040 0000 
00005113  00        
00005114  0000 0000 7118          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005118  0000 0000 
0000511C  0000 0000 
00005120  0000 0000 
00005124  0000 0000 
00005128  0000      
0000512A  0000 0000 7119          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000512E  0000 0000 
00005132  0000 0000 
00005136  0000 0000 
0000513A  0000 0000 
0000513E  0000      
00005140  0000 0000 7120          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005144  0000 0000 
00005148  0000 0000 
0000514C  0000 0000 
00005150  0000 0000 
00005154  0000      
00005156  0000 0000 7121          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000515A  0000 0000 
0000515E  0000 0000 
00005162  0000 0000 
00005166  0000 0000 
0000516A  0000      
0000516C  0000 0000 7122          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005170  0000 0000 
00005174  0000 0000 
00005178  0000 0000 
0000517C  0000 0000 
00005180  0000      
00005182  0000 0000 7123          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005186  0000 0000 
0000518A  0000 0000 
0000518E  0000 00   
                    7124          section   data
00005192            7125                   align
          0000 5192 7126   DataStart       equ       *
                    7127   
                    7128   *********************************************************************************************************
                    7129   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    7130   * to ram as part of the CStart routine in this file
                    7131   *********************************************************************************************************
                    7132   
                    7133          section   bss
00005192            7134                   align
          0000 5192 7135   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    7136   
                    7137   *********************************************************************************************************
                    7138   * Section for Uninitialised Data held in ROM as constants
                    7139   *********************************************************************************************************
                    7140   
0B000000            7141                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 7142   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    7143   
                    7144   
0B000000            7145   bss             org       bss
                    7146   
                    7147   *********************************************************************************************************
                    7148   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    7149   * install the exception handler using the C function InstallExceptionHandler()
                    7150   *********************************************************************************************************
                    7151   
                    7152   
                    7153   
0B000000            7154   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            7155   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            7156   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            7157   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            7158   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            7159   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            7160   VCheck           ds.l    1      ditto
0B00001C            7161   VTrapV           ds.l    1      ditto
0B000020            7162   VPrivilege       ds.l    1      ditto
0B000024            7163   VTrace           ds.l    1
0B000028            7164   VLine1010emul    ds.l    1
0B00002C            7165   VLine1111emul    ds.l    1
0B000030            7166   VUnassigned1     ds.l    1
0B000034            7167   VUnassigned2     ds.l    1
0B000038            7168   VUnassigned3     ds.l    1
0B00003C            7169   VUninit_IRQ      ds.l    1
0B000040            7170   VUnassigned4     ds.l    1
0B000044            7171   VUnassigned5     ds.l    1
0B000048            7172   VUnassigned6     ds.l    1
0B00004C            7173   VUnassigned7     ds.l    1
0B000050            7174   VUnassigned8     ds.l    1
0B000054            7175   VUnassigned9     ds.l    1
0B000058            7176   VUnassigned10    ds.l    1
0B00005C            7177   VUnassigned11    ds.l    1
0B000060            7178   VSpuriousIRQ     ds.l    1
                    7179   
                    7180   * Interrupt handlers Vector 25-31
0B000064            7181   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            7182   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            7183   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            7184   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            7185   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            7186   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            7187   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7188   
                    7189   * Trap Handler vectors 32-47
0B000080            7190   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            7191   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            7192   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            7193   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            7194   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            7195   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            7196   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            7197   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7198   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7199   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7200   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7201   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7202   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7203   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7204   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7205   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7206   
                    7207   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7208   
                    7209   ***********************************************************************************************************
                    7210   * Other Variables
                    7211   ***********************************************************************************************************
                    7212   *__DebugA5       ds.l    1
                    7213   *__UserA5        ds.l    1
                    7214   
                    7215   ***********************************************************************************************************
0B0000C0            7216   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7217   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7218   __heap:         ds.l    0       ; pointers for malloc functions
                    7219   
                    7220   *__himem:       ds.l    himem            ; highest memory location + 1
                    7221   *__stklen:      ds.l    stklen           ; default stack size
                    7222   
                    7223   *********************************************************************************************************
                    7224   * Section for Heap
                    7225   *********************************************************************************************************
                    7226   
                    7227   _i:
0B0000C4            7228          ds.b      4
                    7229   _x:
0B0000C8            7230          ds.b      4
                    7231   _y:
0B0000CC            7232          ds.b      4
                    7233   _z:
0B0000D0            7234          ds.b      4
                    7235   _PortA_Count:
0B0000D4            7236          ds.b      4
                    7237   _Trace:
0B0000D8            7238          ds.b      4
                    7239   _GoFlag:
0B0000DC            7240          ds.b      4
                    7241   _Echo:
0B0000E0            7242          ds.b      4
                    7243   _d0:
0B0000E4            7244          ds.b      4
                    7245   _d1:
0B0000E8            7246          ds.b      4
                    7247   _d2:
0B0000EC            7248          ds.b      4
                    7249   _d3:
0B0000F0            7250          ds.b      4
                    7251   _d4:
0B0000F4            7252          ds.b      4
                    7253   _d5:
0B0000F8            7254          ds.b      4
                    7255   _d6:
0B0000FC            7256          ds.b      4
                    7257   _d7:
0B000100            7258          ds.b      4
                    7259   _a0:
0B000104            7260          ds.b      4
                    7261   _a1:
0B000108            7262          ds.b      4
                    7263   _a2:
0B00010C            7264          ds.b      4
                    7265   _a3:
0B000110            7266          ds.b      4
                    7267   _a4:
0B000114            7268          ds.b      4
                    7269   _a5:
0B000118            7270          ds.b      4
                    7271   _a6:
0B00011C            7272          ds.b      4
                    7273   _PC:
0B000120            7274          ds.b      4
                    7275   _SSP:
0B000124            7276          ds.b      4
                    7277   _USP:
0B000128            7278          ds.b      4
                    7279   _SR:
0B00012C            7280          ds.b      2
                    7281   _BreakPointAddress:
0B00012E            7282          ds.b      32
                    7283   _BreakPointInstruction:
0B00014E            7284          ds.b      16
                    7285   _BreakPointSetOrCleared:
0B00015E            7286          ds.b      32
                    7287   _InstructionSize:
0B00017E            7288          ds.b      4
                    7289   _WatchPointAddress:
0B000182            7290          ds.b      32
                    7291   _WatchPointSetOrCleared:
0B0001A2            7292          ds.b      32
                    7293   _WatchPointString:
0B0001C2            7294          ds.b      800
                    7295   _TempString:
0B0004E2            7296          ds.b      100
                    7297          section   heap
0B000546            7298                   align
          0B00 0546 7299   bssEnd          equ *                   end of storage space for unitialised variables
                    7300   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7301   heap   equ       *
0B000546            7302                    align
          0000 0000

Assembly errors: 0
